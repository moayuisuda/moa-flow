{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { singleton } from 'mana-syringe';\nimport { UnitType, CSSUnitValue } from '../cssom';\nimport { parseLengthOrPercentage, mergeDimensions } from '../parser';\n/**\n * <length> & <percentage>\n */\n\nvar CSSPropertyLengthOrPercentage =\n/** @class */\nfunction () {\n  function CSSPropertyLengthOrPercentage() {\n    this.parser = parseLengthOrPercentage;\n    this.mixer = mergeDimensions;\n  }\n  /**\n   * according to parent's bounds\n   *\n   * @example\n   * CSS.percent(50) -> CSS.px(0.5 * parent.width)\n   */\n\n\n  CSSPropertyLengthOrPercentage.prototype.calculator = function (name, oldParsed, computed, object, registry) {\n    if (CSSUnitValue.isRelativeUnit(computed.unit)) {\n      if (computed.unit === UnitType.kPercentage) {\n        // try to resolve according to parent's geometry bounds\n        // if (object.parentElement) {\n        //   // registry.registerParentGeometryBoundsChangedHandler(object, name);\n        //   return this.calculateUsedValueWithParentBounds(object, name);\n        // } else {\n        //   registry.addUnresolveProperty(object, name);\n        //   // defer calculation after mounted\n        //   // object.addEventListener(\n        //   //   ElementEvent.MOUNTED,\n        //   //   () => {\n        //   //     registry.registerParentGeometryBoundsChangedHandler(object, name);\n        //   //   },\n        //   //   { once: true },\n        //   // );\n        // }\n        return new CSSUnitValue(0, 'px');\n      } else if (computed.unit === UnitType.kEms) {\n        // TODO: handle ems\n        return new CSSUnitValue(0, 'px');\n      }\n    } else {\n      // remove listener if exists\n      // registry.unregisterParentGeometryBoundsChangedHandler(object, name);\n      // return absolute value\n      return computed.clone();\n    }\n  };\n\n  CSSPropertyLengthOrPercentage.prototype.nameToBoundsIndex = function (name) {\n    if (name === 'x' || name === 'cx' || name === 'width') {\n      return 0;\n    } else if (name === 'y' || name === 'cy' || name === 'height') {\n      return 1;\n    }\n\n    return 2;\n  };\n\n  CSSPropertyLengthOrPercentage.prototype.calculateUsedValueWithParentBounds = function (object, name) {\n    var bounds = object.parentElement.getGeometryBounds();\n    var computedValue = object.computedStyle[name].value;\n    return new CSSUnitValue(bounds.halfExtents[this.nameToBoundsIndex(name)] * 2 * computedValue / 100, 'px');\n  };\n\n  CSSPropertyLengthOrPercentage = __decorate([singleton()], CSSPropertyLengthOrPercentage);\n  return CSSPropertyLengthOrPercentage;\n}();\n\nexport { CSSPropertyLengthOrPercentage };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/properties/CSSPropertyLengthOrPercentage.js"],"names":["__decorate","singleton","UnitType","CSSUnitValue","parseLengthOrPercentage","mergeDimensions","CSSPropertyLengthOrPercentage","parser","mixer","prototype","calculator","name","oldParsed","computed","object","registry","isRelativeUnit","unit","kPercentage","kEms","clone","nameToBoundsIndex","calculateUsedValueWithParentBounds","bounds","parentElement","getGeometryBounds","computedValue","computedStyle","value","halfExtents"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,UAAvC;AACA,SAASC,uBAAT,EAAkCC,eAAlC,QAAyD,WAAzD;AACA;AACA;AACA;;AAEA,IAAIC,6BAA6B;AACjC;AACA,YAAY;AACV,WAASA,6BAAT,GAAyC;AACvC,SAAKC,MAAL,GAAcH,uBAAd;AACA,SAAKI,KAAL,GAAaH,eAAb;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,6BAA6B,CAACG,SAA9B,CAAwCC,UAAxC,GAAqD,UAAUC,IAAV,EAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,QAA7C,EAAuD;AAC1G,QAAIZ,YAAY,CAACa,cAAb,CAA4BH,QAAQ,CAACI,IAArC,CAAJ,EAAgD;AAC9C,UAAIJ,QAAQ,CAACI,IAAT,KAAkBf,QAAQ,CAACgB,WAA/B,EAA4C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAO,IAAIf,YAAJ,CAAiB,CAAjB,EAAoB,IAApB,CAAP;AACD,OAjBD,MAiBO,IAAIU,QAAQ,CAACI,IAAT,KAAkBf,QAAQ,CAACiB,IAA/B,EAAqC;AAC1C;AACA,eAAO,IAAIhB,YAAJ,CAAiB,CAAjB,EAAoB,IAApB,CAAP;AACD;AACF,KAtBD,MAsBO;AACL;AACA;AACA;AACA,aAAOU,QAAQ,CAACO,KAAT,EAAP;AACD;AACF,GA7BD;;AA+BAd,EAAAA,6BAA6B,CAACG,SAA9B,CAAwCY,iBAAxC,GAA4D,UAAUV,IAAV,EAAgB;AAC1E,QAAIA,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,IAAiCA,IAAI,KAAK,OAA9C,EAAuD;AACrD,aAAO,CAAP;AACD,KAFD,MAEO,IAAIA,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,IAAiCA,IAAI,KAAK,QAA9C,EAAwD;AAC7D,aAAO,CAAP;AACD;;AAED,WAAO,CAAP;AACD,GARD;;AAUAL,EAAAA,6BAA6B,CAACG,SAA9B,CAAwCa,kCAAxC,GAA6E,UAAUR,MAAV,EAAkBH,IAAlB,EAAwB;AACnG,QAAIY,MAAM,GAAGT,MAAM,CAACU,aAAP,CAAqBC,iBAArB,EAAb;AACA,QAAIC,aAAa,GAAGZ,MAAM,CAACa,aAAP,CAAqBhB,IAArB,EAA2BiB,KAA/C;AACA,WAAO,IAAIzB,YAAJ,CAAiBoB,MAAM,CAACM,WAAP,CAAmB,KAAKR,iBAAL,CAAuBV,IAAvB,CAAnB,IAAmD,CAAnD,GAAuDe,aAAvD,GAAuE,GAAxF,EAA6F,IAA7F,CAAP;AACD,GAJD;;AAMApB,EAAAA,6BAA6B,GAAGN,UAAU,CAAC,CAACC,SAAS,EAAV,CAAD,EAAgBK,6BAAhB,CAA1C;AACA,SAAOA,6BAAP;AACD,CA9DD,EAFA;;AAkEA,SAASA,6BAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { singleton } from 'mana-syringe';\nimport { UnitType, CSSUnitValue } from '../cssom';\nimport { parseLengthOrPercentage, mergeDimensions } from '../parser';\n/**\n * <length> & <percentage>\n */\n\nvar CSSPropertyLengthOrPercentage =\n/** @class */\nfunction () {\n  function CSSPropertyLengthOrPercentage() {\n    this.parser = parseLengthOrPercentage;\n    this.mixer = mergeDimensions;\n  }\n  /**\n   * according to parent's bounds\n   *\n   * @example\n   * CSS.percent(50) -> CSS.px(0.5 * parent.width)\n   */\n\n\n  CSSPropertyLengthOrPercentage.prototype.calculator = function (name, oldParsed, computed, object, registry) {\n    if (CSSUnitValue.isRelativeUnit(computed.unit)) {\n      if (computed.unit === UnitType.kPercentage) {\n        // try to resolve according to parent's geometry bounds\n        // if (object.parentElement) {\n        //   // registry.registerParentGeometryBoundsChangedHandler(object, name);\n        //   return this.calculateUsedValueWithParentBounds(object, name);\n        // } else {\n        //   registry.addUnresolveProperty(object, name);\n        //   // defer calculation after mounted\n        //   // object.addEventListener(\n        //   //   ElementEvent.MOUNTED,\n        //   //   () => {\n        //   //     registry.registerParentGeometryBoundsChangedHandler(object, name);\n        //   //   },\n        //   //   { once: true },\n        //   // );\n        // }\n        return new CSSUnitValue(0, 'px');\n      } else if (computed.unit === UnitType.kEms) {\n        // TODO: handle ems\n        return new CSSUnitValue(0, 'px');\n      }\n    } else {\n      // remove listener if exists\n      // registry.unregisterParentGeometryBoundsChangedHandler(object, name);\n      // return absolute value\n      return computed.clone();\n    }\n  };\n\n  CSSPropertyLengthOrPercentage.prototype.nameToBoundsIndex = function (name) {\n    if (name === 'x' || name === 'cx' || name === 'width') {\n      return 0;\n    } else if (name === 'y' || name === 'cy' || name === 'height') {\n      return 1;\n    }\n\n    return 2;\n  };\n\n  CSSPropertyLengthOrPercentage.prototype.calculateUsedValueWithParentBounds = function (object, name) {\n    var bounds = object.parentElement.getGeometryBounds();\n    var computedValue = object.computedStyle[name].value;\n    return new CSSUnitValue(bounds.halfExtents[this.nameToBoundsIndex(name)] * 2 * computedValue / 100, 'px');\n  };\n\n  CSSPropertyLengthOrPercentage = __decorate([singleton()], CSSPropertyLengthOrPercentage);\n  return CSSPropertyLengthOrPercentage;\n}();\n\nexport { CSSPropertyLengthOrPercentage };"]},"metadata":{},"sourceType":"module"}