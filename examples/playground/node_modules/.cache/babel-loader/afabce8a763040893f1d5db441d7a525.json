{"ast":null,"code":"import { isString } from 'lodash-es';\nimport { AABB } from '../../shapes';\nimport { rad2deg, turn2deg } from '../../utils';\nimport { UnitType } from '../cssom';\nimport { CSSUnitValue } from '../cssom';\nexport function parseDimension(unitRegExp, string) {\n  string = \"\".concat(string).trim().toLowerCase();\n\n  if (isFinite(Number(string))) {\n    if ('px'.search(unitRegExp) >= 0) {\n      return new CSSUnitValue(Number(string), 'px');\n    }\n  }\n\n  var matchedUnits = [];\n  string = string.replace(unitRegExp, function (match) {\n    matchedUnits.push(match);\n    return 'U' + match;\n  });\n  var taggedUnitRegExp = 'U(' + unitRegExp.source + ')';\n  return matchedUnits.map(function (unit) {\n    return new CSSUnitValue(Number(string.replace(new RegExp('U' + unit, 'g'), '').replace(new RegExp(taggedUnitRegExp, 'g'), '*0')), unit);\n  })[0];\n}\n/**\n * <length>\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\n * length with only absolute unit, eg. 1px\n */\n\nexport var parseLength = parseDimension.bind(null, new RegExp('px', 'g'));\n/**\n * <percentage>\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\n */\n\nexport var parserPercentage = parseDimension.bind(null, new RegExp('%', 'g'));\n/**\n * length with absolute or relative unit,\n * eg. 1px, 0.7em, 50%, calc(100% - 200px);\n *\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/length-percentage\n */\n\nexport var parseLengthOrPercentage = parseDimension.bind(null, new RegExp('px|%|em', 'g'));\nexport var parseAngle = parseDimension.bind(null, new RegExp('deg|rad|grad|turn', 'g'));\n/**\n * merge CSSUnitValue\n *\n * @example\n * 10px + 20px = 30px\n * 10deg + 10rad\n */\n\nexport function mergeDimensions(left, right, target, nonNegative, index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var unit = '';\n  var leftValue = left.value || 0;\n  var rightValue = right.value || 0; // const canonicalUnit = CSSUnitValue.toCanonicalUnit(left.unit);\n  // const leftCanonicalUnitValue = left.convertTo(canonicalUnit);\n  // const rightCanonicalUnitValue = right.convertTo(canonicalUnit);\n  // format '%' to 'px'\n\n  if (CSSUnitValue.isLength(left.unit) || CSSUnitValue.isLength(right.unit)) {\n    leftValue = convertPercentUnit(left, index, target);\n    rightValue = convertPercentUnit(right, index, target);\n    unit = 'px';\n  } // format 'rad' 'turn' to 'deg'\n\n\n  if (CSSUnitValue.isAngle(left.unit) || CSSUnitValue.isAngle(right.unit)) {\n    leftValue = convertAngleUnit(left);\n    rightValue = convertAngleUnit(right);\n    unit = 'deg';\n  }\n\n  return [leftValue, rightValue, function (value) {\n    if (nonNegative) {\n      value = Math.max(value, 0);\n    }\n\n    return value + unit;\n  }];\n}\nexport function convertAngleUnit(value) {\n  var deg = 0;\n\n  if (value.unit === UnitType.kDegrees) {\n    deg = value.value;\n  } else if (value.unit === UnitType.kRadians) {\n    deg = rad2deg(Number(value.value));\n  } else if (value.unit === UnitType.kTurns) {\n    deg = turn2deg(Number(value.value));\n  }\n\n  return deg;\n}\nexport function parseDimensionArray(string) {\n  if (isString(string)) {\n    // \"1px 2px 3px\"\n    return string.split(' ').map(function (segment) {\n      return parseLengthOrPercentage(segment);\n    });\n  } else {\n    // [1, '2px', 3]\n    return string.map(function (segment) {\n      return parseLengthOrPercentage(segment.toString());\n    });\n  }\n}\nexport function mergeDimensionList(left, right, target) {\n  if (left.length !== right.length) {\n    return;\n  }\n\n  var unit = left[0].unit;\n  return [left.map(function (l) {\n    return l.value;\n  }), right.map(function (l) {\n    return l.value;\n  }), function (values) {\n    return values.map(function (n) {\n      return new CSSUnitValue(n, unit);\n    }).join(' ');\n  }];\n}\nexport function convertPercentUnit(valueWithUnit, vec3Index, target) {\n  if (valueWithUnit.unit === UnitType.kPixels) {\n    return Number(valueWithUnit.value);\n  } else if (valueWithUnit.unit === UnitType.kPercentage && target) {\n    // use bounds\n    var bounds = target.getGeometryBounds();\n    var size = 0;\n\n    if (!AABB.isEmpty(bounds)) {\n      size = bounds.halfExtents[vec3Index] * 2;\n    }\n\n    return Number(valueWithUnit.value) / 100 * size;\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/parser/dimension.js"],"names":["isString","AABB","rad2deg","turn2deg","UnitType","CSSUnitValue","parseDimension","unitRegExp","string","concat","trim","toLowerCase","isFinite","Number","search","matchedUnits","replace","match","push","taggedUnitRegExp","source","map","unit","RegExp","parseLength","bind","parserPercentage","parseLengthOrPercentage","parseAngle","mergeDimensions","left","right","target","nonNegative","index","leftValue","value","rightValue","isLength","convertPercentUnit","isAngle","convertAngleUnit","Math","max","deg","kDegrees","kRadians","kTurns","parseDimensionArray","split","segment","toString","mergeDimensionList","length","l","values","n","join","valueWithUnit","vec3Index","kPixels","kPercentage","bounds","getGeometryBounds","size","isEmpty","halfExtents"],"mappings":"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","sourcesContent":["import { isString } from 'lodash-es';\nimport { AABB } from '../../shapes';\nimport { rad2deg, turn2deg } from '../../utils';\nimport { UnitType } from '../cssom';\nimport { CSSUnitValue } from '../cssom';\nexport function parseDimension(unitRegExp, string) {\n  string = \"\".concat(string).trim().toLowerCase();\n\n  if (isFinite(Number(string))) {\n    if ('px'.search(unitRegExp) >= 0) {\n      return new CSSUnitValue(Number(string), 'px');\n    }\n  }\n\n  var matchedUnits = [];\n  string = string.replace(unitRegExp, function (match) {\n    matchedUnits.push(match);\n    return 'U' + match;\n  });\n  var taggedUnitRegExp = 'U(' + unitRegExp.source + ')';\n  return matchedUnits.map(function (unit) {\n    return new CSSUnitValue(Number(string.replace(new RegExp('U' + unit, 'g'), '').replace(new RegExp(taggedUnitRegExp, 'g'), '*0')), unit);\n  })[0];\n}\n/**\n * <length>\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\n * length with only absolute unit, eg. 1px\n */\n\nexport var parseLength = parseDimension.bind(null, new RegExp('px', 'g'));\n/**\n * <percentage>\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\n */\n\nexport var parserPercentage = parseDimension.bind(null, new RegExp('%', 'g'));\n/**\n * length with absolute or relative unit,\n * eg. 1px, 0.7em, 50%, calc(100% - 200px);\n *\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/length-percentage\n */\n\nexport var parseLengthOrPercentage = parseDimension.bind(null, new RegExp('px|%|em', 'g'));\nexport var parseAngle = parseDimension.bind(null, new RegExp('deg|rad|grad|turn', 'g'));\n/**\n * merge CSSUnitValue\n *\n * @example\n * 10px + 20px = 30px\n * 10deg + 10rad\n */\n\nexport function mergeDimensions(left, right, target, nonNegative, index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var unit = '';\n  var leftValue = left.value || 0;\n  var rightValue = right.value || 0; // const canonicalUnit = CSSUnitValue.toCanonicalUnit(left.unit);\n  // const leftCanonicalUnitValue = left.convertTo(canonicalUnit);\n  // const rightCanonicalUnitValue = right.convertTo(canonicalUnit);\n  // format '%' to 'px'\n\n  if (CSSUnitValue.isLength(left.unit) || CSSUnitValue.isLength(right.unit)) {\n    leftValue = convertPercentUnit(left, index, target);\n    rightValue = convertPercentUnit(right, index, target);\n    unit = 'px';\n  } // format 'rad' 'turn' to 'deg'\n\n\n  if (CSSUnitValue.isAngle(left.unit) || CSSUnitValue.isAngle(right.unit)) {\n    leftValue = convertAngleUnit(left);\n    rightValue = convertAngleUnit(right);\n    unit = 'deg';\n  }\n\n  return [leftValue, rightValue, function (value) {\n    if (nonNegative) {\n      value = Math.max(value, 0);\n    }\n\n    return value + unit;\n  }];\n}\nexport function convertAngleUnit(value) {\n  var deg = 0;\n\n  if (value.unit === UnitType.kDegrees) {\n    deg = value.value;\n  } else if (value.unit === UnitType.kRadians) {\n    deg = rad2deg(Number(value.value));\n  } else if (value.unit === UnitType.kTurns) {\n    deg = turn2deg(Number(value.value));\n  }\n\n  return deg;\n}\nexport function parseDimensionArray(string) {\n  if (isString(string)) {\n    // \"1px 2px 3px\"\n    return string.split(' ').map(function (segment) {\n      return parseLengthOrPercentage(segment);\n    });\n  } else {\n    // [1, '2px', 3]\n    return string.map(function (segment) {\n      return parseLengthOrPercentage(segment.toString());\n    });\n  }\n}\nexport function mergeDimensionList(left, right, target) {\n  if (left.length !== right.length) {\n    return;\n  }\n\n  var unit = left[0].unit;\n  return [left.map(function (l) {\n    return l.value;\n  }), right.map(function (l) {\n    return l.value;\n  }), function (values) {\n    return values.map(function (n) {\n      return new CSSUnitValue(n, unit);\n    }).join(' ');\n  }];\n}\nexport function convertPercentUnit(valueWithUnit, vec3Index, target) {\n  if (valueWithUnit.unit === UnitType.kPixels) {\n    return Number(valueWithUnit.value);\n  } else if (valueWithUnit.unit === UnitType.kPercentage && target) {\n    // use bounds\n    var bounds = target.getGeometryBounds();\n    var size = 0;\n\n    if (!AABB.isEmpty(bounds)) {\n      size = bounds.halfExtents[vec3Index] * 2;\n    }\n\n    return Number(valueWithUnit.value) / 100 * size;\n  }\n\n  return 0;\n}"]},"metadata":{},"sourceType":"module"}