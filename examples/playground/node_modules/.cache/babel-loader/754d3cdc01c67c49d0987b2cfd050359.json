{"ast":null,"code":"import { Line as LineUtil } from '@antv/g-math';\nexport function distance(x1, y1, x2, y2) {\n  var dx = x1 - x2;\n  var dy = y1 - y2;\n  return Math.sqrt(dx * dx + dy * dy);\n}\nexport function inBox(minX, minY, width, height, x, y) {\n  return x >= minX && x <= minX + width && y >= minY && y <= minY + height;\n}\nexport function inRect(minX, minY, width, height, lineWidth, x, y) {\n  var halfWidth = lineWidth / 2; // 将四个边看做矩形来检测，比边的检测算法要快\n\n  return inBox(minX - halfWidth, minY - halfWidth, width, lineWidth, x, y) || // 上边\n  inBox(minX + width - halfWidth, minY - halfWidth, lineWidth, height, x, y) || // 右边\n  inBox(minX + halfWidth, minY + height - halfWidth, width, lineWidth, x, y) || // 下边\n  inBox(minX - halfWidth, minY + halfWidth, lineWidth, height, x, y); // 左边\n}\nexport function inArc(cx, cy, r, startAngle, endAngle, lineWidth, x, y) {\n  var angle = (Math.atan2(y - cy, x - cx) + Math.PI * 2) % (Math.PI * 2); // 转换到 0 - 2 * Math.PI 之间\n\n  if (angle < startAngle || angle > endAngle) {\n    return false;\n  }\n\n  var point = {\n    x: cx + r * Math.cos(angle),\n    y: cy + r * Math.sin(angle)\n  };\n  return distance(point.x, point.y, x, y) <= lineWidth / 2;\n}\nexport function inLine(x1, y1, x2, y2, lineWidth, x, y) {\n  var minX = Math.min(x1, x2);\n  var maxX = Math.max(x1, x2);\n  var minY = Math.min(y1, y2);\n  var maxY = Math.max(y1, y2);\n  var halfWidth = lineWidth / 2; // 因为目前的方案是计算点到直线的距离，而有可能会在延长线上，所以要先判断是否在包围盒内\n  // 这种方案会在水平或者竖直的情况下载线的延长线上有半 lineWidth 的误差\n\n  if (!(x >= minX - halfWidth && x <= maxX + halfWidth && y >= minY - halfWidth && y <= maxY + halfWidth)) {\n    return false;\n  } // 因为已经计算了包围盒，所以仅需要计算到直线的距离即可，可以显著提升性能\n\n\n  return LineUtil.pointToLine(x1, y1, x2, y2, x, y) <= lineWidth / 2;\n}\nexport function inPolyline(points, lineWidth, x, y, isClose) {\n  var count = points.length;\n\n  if (count < 2) {\n    return false;\n  }\n\n  for (var i = 0; i < count - 1; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var x2 = points[i + 1][0];\n    var y2 = points[i + 1][1];\n\n    if (inLine(x1, y1, x2, y2, lineWidth, x, y)) {\n      return true;\n    }\n  } // 如果封闭，则计算起始点和结束点的边\n\n\n  if (isClose) {\n    var first = points[0];\n    var last = points[count - 1];\n\n    if (inLine(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n      return true;\n    }\n  }\n\n  return false;\n} // 多边形的射线检测，参考：https://blog.csdn.net/WilliamSun0122/article/details/77994526\n\nvar tolerance = 1e-6; // 三态函数，判断两个double在eps精度下的大小关系\n\nfunction dcmp(x) {\n  if (Math.abs(x) < tolerance) {\n    return 0;\n  }\n\n  return x < 0 ? -1 : 1;\n} // 判断点Q是否在p1和p2的线段上\n\n\nfunction onSegment(p1, p2, q) {\n  if ((q[0] - p1[0]) * (p2[1] - p1[1]) === (p2[0] - p1[0]) * (q[1] - p1[1]) && Math.min(p1[0], p2[0]) <= q[0] && q[0] <= Math.max(p1[0], p2[0]) && Math.min(p1[1], p2[1]) <= q[1] && q[1] <= Math.max(p1[1], p2[1])) {\n    return true;\n  }\n\n  return false;\n} // 判断点P在多边形内-射线法\n\n\nexport function inPolygon(points, x, y) {\n  var isHit = false;\n  var n = points.length;\n\n  if (n <= 2) {\n    // svg 中点小于 3 个时，不显示，也无法被拾取\n    return false;\n  }\n\n  for (var i = 0; i < n; i++) {\n    var p1 = points[i];\n    var p2 = points[(i + 1) % n];\n\n    if (onSegment(p1, p2, [x, y])) {\n      // 点在多边形一条边上\n      return true;\n    } // 前一个判断min(p1[1],p2[1])<P.y<=max(p1[1],p2[1])\n    // 后一个判断被测点 在 射线与边交点 的左边\n\n\n    if (dcmp(p1[1] - y) > 0 !== dcmp(p2[1] - y) > 0 && dcmp(x - (y - p1[1]) * (p1[0] - p2[0]) / (p1[1] - p2[1]) - p1[0]) < 0) {\n      isHit = !isHit;\n    }\n  }\n\n  return isHit;\n}\nexport function inPolygons(polygons, x, y) {\n  var isHit = false;\n\n  for (var i = 0; i < polygons.length; i++) {\n    var points = polygons[i];\n    isHit = inPolygon(points, x, y);\n\n    if (isHit) {\n      break;\n    }\n  }\n\n  return isHit;\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g-plugin-canvas-picker/es/utils/math.js"],"names":["Line","LineUtil","distance","x1","y1","x2","y2","dx","dy","Math","sqrt","inBox","minX","minY","width","height","x","y","inRect","lineWidth","halfWidth","inArc","cx","cy","r","startAngle","endAngle","angle","atan2","PI","point","cos","sin","inLine","min","maxX","max","maxY","pointToLine","inPolyline","points","isClose","count","length","i","first","last","tolerance","dcmp","abs","onSegment","p1","p2","q","inPolygon","isHit","n","inPolygons","polygons"],"mappings":"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","sourcesContent":["import { Line as LineUtil } from '@antv/g-math';\nexport function distance(x1, y1, x2, y2) {\n  var dx = x1 - x2;\n  var dy = y1 - y2;\n  return Math.sqrt(dx * dx + dy * dy);\n}\nexport function inBox(minX, minY, width, height, x, y) {\n  return x >= minX && x <= minX + width && y >= minY && y <= minY + height;\n}\nexport function inRect(minX, minY, width, height, lineWidth, x, y) {\n  var halfWidth = lineWidth / 2; // 将四个边看做矩形来检测，比边的检测算法要快\n\n  return inBox(minX - halfWidth, minY - halfWidth, width, lineWidth, x, y) || // 上边\n  inBox(minX + width - halfWidth, minY - halfWidth, lineWidth, height, x, y) || // 右边\n  inBox(minX + halfWidth, minY + height - halfWidth, width, lineWidth, x, y) || // 下边\n  inBox(minX - halfWidth, minY + halfWidth, lineWidth, height, x, y); // 左边\n}\nexport function inArc(cx, cy, r, startAngle, endAngle, lineWidth, x, y) {\n  var angle = (Math.atan2(y - cy, x - cx) + Math.PI * 2) % (Math.PI * 2); // 转换到 0 - 2 * Math.PI 之间\n\n  if (angle < startAngle || angle > endAngle) {\n    return false;\n  }\n\n  var point = {\n    x: cx + r * Math.cos(angle),\n    y: cy + r * Math.sin(angle)\n  };\n  return distance(point.x, point.y, x, y) <= lineWidth / 2;\n}\nexport function inLine(x1, y1, x2, y2, lineWidth, x, y) {\n  var minX = Math.min(x1, x2);\n  var maxX = Math.max(x1, x2);\n  var minY = Math.min(y1, y2);\n  var maxY = Math.max(y1, y2);\n  var halfWidth = lineWidth / 2; // 因为目前的方案是计算点到直线的距离，而有可能会在延长线上，所以要先判断是否在包围盒内\n  // 这种方案会在水平或者竖直的情况下载线的延长线上有半 lineWidth 的误差\n\n  if (!(x >= minX - halfWidth && x <= maxX + halfWidth && y >= minY - halfWidth && y <= maxY + halfWidth)) {\n    return false;\n  } // 因为已经计算了包围盒，所以仅需要计算到直线的距离即可，可以显著提升性能\n\n\n  return LineUtil.pointToLine(x1, y1, x2, y2, x, y) <= lineWidth / 2;\n}\nexport function inPolyline(points, lineWidth, x, y, isClose) {\n  var count = points.length;\n\n  if (count < 2) {\n    return false;\n  }\n\n  for (var i = 0; i < count - 1; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var x2 = points[i + 1][0];\n    var y2 = points[i + 1][1];\n\n    if (inLine(x1, y1, x2, y2, lineWidth, x, y)) {\n      return true;\n    }\n  } // 如果封闭，则计算起始点和结束点的边\n\n\n  if (isClose) {\n    var first = points[0];\n    var last = points[count - 1];\n\n    if (inLine(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n      return true;\n    }\n  }\n\n  return false;\n} // 多边形的射线检测，参考：https://blog.csdn.net/WilliamSun0122/article/details/77994526\n\nvar tolerance = 1e-6; // 三态函数，判断两个double在eps精度下的大小关系\n\nfunction dcmp(x) {\n  if (Math.abs(x) < tolerance) {\n    return 0;\n  }\n\n  return x < 0 ? -1 : 1;\n} // 判断点Q是否在p1和p2的线段上\n\n\nfunction onSegment(p1, p2, q) {\n  if ((q[0] - p1[0]) * (p2[1] - p1[1]) === (p2[0] - p1[0]) * (q[1] - p1[1]) && Math.min(p1[0], p2[0]) <= q[0] && q[0] <= Math.max(p1[0], p2[0]) && Math.min(p1[1], p2[1]) <= q[1] && q[1] <= Math.max(p1[1], p2[1])) {\n    return true;\n  }\n\n  return false;\n} // 判断点P在多边形内-射线法\n\n\nexport function inPolygon(points, x, y) {\n  var isHit = false;\n  var n = points.length;\n\n  if (n <= 2) {\n    // svg 中点小于 3 个时，不显示，也无法被拾取\n    return false;\n  }\n\n  for (var i = 0; i < n; i++) {\n    var p1 = points[i];\n    var p2 = points[(i + 1) % n];\n\n    if (onSegment(p1, p2, [x, y])) {\n      // 点在多边形一条边上\n      return true;\n    } // 前一个判断min(p1[1],p2[1])<P.y<=max(p1[1],p2[1])\n    // 后一个判断被测点 在 射线与边交点 的左边\n\n\n    if (dcmp(p1[1] - y) > 0 !== dcmp(p2[1] - y) > 0 && dcmp(x - (y - p1[1]) * (p1[0] - p2[0]) / (p1[1] - p2[1]) - p1[0]) < 0) {\n      isHit = !isHit;\n    }\n  }\n\n  return isHit;\n}\nexport function inPolygons(polygons, x, y) {\n  var isHit = false;\n\n  for (var i = 0; i < polygons.length; i++) {\n    var points = polygons[i];\n    isHit = inPolygon(points, x, y);\n\n    if (isHit) {\n      break;\n    }\n  }\n\n  return isHit;\n}"]},"metadata":{},"sourceType":"module"}