{"ast":null,"code":"import baseMerge from './_baseMerge.js';\nimport isObject from './isObject.js';\n/**\n * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n * objects into destination objects that are passed thru.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to merge.\n * @param {Object} object The parent object of `objValue`.\n * @param {Object} source The parent object of `srcValue`.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n * @returns {*} Returns the value to assign.\n */\n\nfunction customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n  if (isObject(objValue) && isObject(srcValue)) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, objValue);\n    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n    stack['delete'](srcValue);\n  }\n\n  return objValue;\n}\n\nexport default customDefaultsMerge;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/lodash-es/_customDefaultsMerge.js"],"names":["baseMerge","isObject","customDefaultsMerge","objValue","srcValue","key","object","source","stack","set","undefined"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,QAAvC,EAAiDC,GAAjD,EAAsDC,MAAtD,EAA8DC,MAA9D,EAAsEC,KAAtE,EAA6E;AAC3E,MAAIP,QAAQ,CAACE,QAAD,CAAR,IAAsBF,QAAQ,CAACG,QAAD,CAAlC,EAA8C;AAC5C;AACAI,IAAAA,KAAK,CAACC,GAAN,CAAUL,QAAV,EAAoBD,QAApB;AACAH,IAAAA,SAAS,CAACG,QAAD,EAAWC,QAAX,EAAqBM,SAArB,EAAgCR,mBAAhC,EAAqDM,KAArD,CAAT;AACAA,IAAAA,KAAK,CAAC,QAAD,CAAL,CAAgBJ,QAAhB;AACD;;AACD,SAAOD,QAAP;AACD;;AAED,eAAeD,mBAAf","sourcesContent":["import baseMerge from './_baseMerge.js';\nimport isObject from './isObject.js';\n\n/**\n * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n * objects into destination objects that are passed thru.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to merge.\n * @param {Object} object The parent object of `objValue`.\n * @param {Object} source The parent object of `srcValue`.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n * @returns {*} Returns the value to assign.\n */\nfunction customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n  if (isObject(objValue) && isObject(srcValue)) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, objValue);\n    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n    stack['delete'](srcValue);\n  }\n  return objValue;\n}\n\nexport default customDefaultsMerge;\n"]},"metadata":{},"sourceType":"module"}