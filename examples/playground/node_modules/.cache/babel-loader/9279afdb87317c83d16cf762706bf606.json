{"ast":null,"code":"import { Container } from 'inversify';\nimport { Syringe, Utils } from '../core';\nexport function bindSingleton(toBind) {\n  return toBind.inSingletonScope();\n}\nexport function bindTransient(toBind) {\n  return toBind.inTransientScope();\n}\nexport function bindLifecycle(toBind, option) {\n  if (option.lifecycle === Syringe.Lifecycle.singleton) {\n    return bindSingleton(toBind);\n  }\n\n  return bindTransient(toBind);\n}\nexport function bindNamed(toBind, named) {\n  toBind.whenTargetNamed(namedToIdentifier(named));\n}\nexport function bindGeneralToken(token, register) {\n  return register.bind(tokenToIdentifier(token));\n}\nexport function bindMonoToken(token, register) {\n  if (register.isBound(tokenToIdentifier(token))) {\n    try {\n      return register.rebind(tokenToIdentifier(token));\n    } catch (ex) {\n      // not bind in crrent container\n      return register.bind(tokenToIdentifier(token));\n    }\n  }\n\n  return register.bind(tokenToIdentifier(token));\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function namedToIdentifier(named) {\n  if (Utils.isDefinedToken(named)) {\n    return named.symbol;\n  }\n\n  return named;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function tokenToIdentifier(token) {\n  if (Utils.isDefinedToken(token)) {\n    return token.symbol;\n  }\n\n  return token;\n}\nexport var GlobalContainer = new Container();\nexport * from './inversify-protocol';","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/mana-syringe/es/inversify/index.js"],"names":["Container","Syringe","Utils","bindSingleton","toBind","inSingletonScope","bindTransient","inTransientScope","bindLifecycle","option","lifecycle","Lifecycle","singleton","bindNamed","named","whenTargetNamed","namedToIdentifier","bindGeneralToken","token","register","bind","tokenToIdentifier","bindMonoToken","isBound","rebind","ex","isDefinedToken","symbol","GlobalContainer"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,SAA/B;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AACpC,SAAOA,MAAM,CAACC,gBAAP,EAAP;AACD;AACD,OAAO,SAASC,aAAT,CAAuBF,MAAvB,EAA+B;AACpC,SAAOA,MAAM,CAACG,gBAAP,EAAP;AACD;AACD,OAAO,SAASC,aAAT,CAAuBJ,MAAvB,EAA+BK,MAA/B,EAAuC;AAC5C,MAAIA,MAAM,CAACC,SAAP,KAAqBT,OAAO,CAACU,SAAR,CAAkBC,SAA3C,EAAsD;AACpD,WAAOT,aAAa,CAACC,MAAD,CAApB;AACD;;AAED,SAAOE,aAAa,CAACF,MAAD,CAApB;AACD;AACD,OAAO,SAASS,SAAT,CAAmBT,MAAnB,EAA2BU,KAA3B,EAAkC;AACvCV,EAAAA,MAAM,CAACW,eAAP,CAAuBC,iBAAiB,CAACF,KAAD,CAAxC;AACD;AACD,OAAO,SAASG,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;AAChD,SAAOA,QAAQ,CAACC,IAAT,CAAcC,iBAAiB,CAACH,KAAD,CAA/B,CAAP;AACD;AACD,OAAO,SAASI,aAAT,CAAuBJ,KAAvB,EAA8BC,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,CAACI,OAAT,CAAiBF,iBAAiB,CAACH,KAAD,CAAlC,CAAJ,EAAgD;AAC9C,QAAI;AACF,aAAOC,QAAQ,CAACK,MAAT,CAAgBH,iBAAiB,CAACH,KAAD,CAAjC,CAAP;AACD,KAFD,CAEE,OAAOO,EAAP,EAAW;AACX;AACA,aAAON,QAAQ,CAACC,IAAT,CAAcC,iBAAiB,CAACH,KAAD,CAA/B,CAAP;AACD;AACF;;AAED,SAAOC,QAAQ,CAACC,IAAT,CAAcC,iBAAiB,CAACH,KAAD,CAA/B,CAAP;AACD,C,CAAC;;AAEF,OAAO,SAASF,iBAAT,CAA2BF,KAA3B,EAAkC;AACvC,MAAIZ,KAAK,CAACwB,cAAN,CAAqBZ,KAArB,CAAJ,EAAiC;AAC/B,WAAOA,KAAK,CAACa,MAAb;AACD;;AAED,SAAOb,KAAP;AACD,C,CAAC;;AAEF,OAAO,SAASO,iBAAT,CAA2BH,KAA3B,EAAkC;AACvC,MAAIhB,KAAK,CAACwB,cAAN,CAAqBR,KAArB,CAAJ,EAAiC;AAC/B,WAAOA,KAAK,CAACS,MAAb;AACD;;AAED,SAAOT,KAAP;AACD;AACD,OAAO,IAAIU,eAAe,GAAG,IAAI5B,SAAJ,EAAtB;AACP,cAAc,sBAAd","sourcesContent":["import { Container } from 'inversify';\nimport { Syringe, Utils } from '../core';\nexport function bindSingleton(toBind) {\n  return toBind.inSingletonScope();\n}\nexport function bindTransient(toBind) {\n  return toBind.inTransientScope();\n}\nexport function bindLifecycle(toBind, option) {\n  if (option.lifecycle === Syringe.Lifecycle.singleton) {\n    return bindSingleton(toBind);\n  }\n\n  return bindTransient(toBind);\n}\nexport function bindNamed(toBind, named) {\n  toBind.whenTargetNamed(namedToIdentifier(named));\n}\nexport function bindGeneralToken(token, register) {\n  return register.bind(tokenToIdentifier(token));\n}\nexport function bindMonoToken(token, register) {\n  if (register.isBound(tokenToIdentifier(token))) {\n    try {\n      return register.rebind(tokenToIdentifier(token));\n    } catch (ex) {\n      // not bind in crrent container\n      return register.bind(tokenToIdentifier(token));\n    }\n  }\n\n  return register.bind(tokenToIdentifier(token));\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function namedToIdentifier(named) {\n  if (Utils.isDefinedToken(named)) {\n    return named.symbol;\n  }\n\n  return named;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function tokenToIdentifier(token) {\n  if (Utils.isDefinedToken(token)) {\n    return token.symbol;\n  }\n\n  return token;\n}\nexport var GlobalContainer = new Container();\nexport * from './inversify-protocol';"]},"metadata":{},"sourceType":"module"}