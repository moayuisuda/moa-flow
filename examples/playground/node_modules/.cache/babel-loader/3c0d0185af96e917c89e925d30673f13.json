{"ast":null,"code":"import React from 'react'; // import { Image as KonvaImage } from \"react-konva\";\n// import Konva from \"konva\";\n// import { ImageConfig } from \"konva/lib/shapes/Image\";\n// class Image extends React.Component<Omit<ImageConfig, \"image\">> {\n//   state = {\n//     image: undefined as HTMLImageElement | undefined,\n//   };\n//   image: HTMLImageElement;\n//   imageNode: Konva.Image | null;\n//   componentDidMount() {\n//     this.loadImage();\n//   }\n//   componentDidUpdate(oldProps: Omit<ImageConfig, \"image\">) {\n//     if (oldProps.src !== this.props.src) {\n//       this.loadImage();\n//     }\n//   }\n//   componentWillUnmount() {\n//     this.image.removeEventListener(\"load\", this.handleLoad);\n//   }\n//   loadImage() {\n//     // save to \"this\" to remove \"load\" handler on unmount\n//     this.image = new window.Image();\n//     this.image.src = this.props.src;\n//     this.image.addEventListener(\"load\", this.handleLoad);\n//   }\n//   handleLoad = () => {\n//     // after setState react-konva will update canvas and redraw the layer\n//     // because \"image\" property is changed\n//     this.setState({\n//       image: this.image,\n//     });\n//     // if you keep same image object during source updates\n//     // you will have to update layer manually:\n//     // this.imageNode.getLayer().batchDraw();\n//   };\n//   render() {\n//     return (\n//       <KonvaImage\n//         image={this.state.image}\n//         ref={(node) => {\n//           this.imageNode = node;\n//         }}\n//         {...this.props}\n//       />\n//     );\n//   }\n// }\n// export default Image;\n\nvar Image = function () {\n  React.createElement(React.Fragment, null);\n};\n\nexport { Image as default };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/packages/flow/lib/components/Image.js"],"names":["React","Image","createElement","Fragment","default"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAI,YAAY;AACrBD,EAAAA,KAAK,CAACE,aAAN,CAAoBF,KAAK,CAACG,QAA1B,EAAoC,IAApC;AACH,CAFD;;AAIA,SAASF,KAAK,IAAIG,OAAlB","sourcesContent":["import React from 'react';\n\n// import { Image as KonvaImage } from \"react-konva\";\n// import Konva from \"konva\";\n// import { ImageConfig } from \"konva/lib/shapes/Image\";\n// class Image extends React.Component<Omit<ImageConfig, \"image\">> {\n//   state = {\n//     image: undefined as HTMLImageElement | undefined,\n//   };\n//   image: HTMLImageElement;\n//   imageNode: Konva.Image | null;\n//   componentDidMount() {\n//     this.loadImage();\n//   }\n//   componentDidUpdate(oldProps: Omit<ImageConfig, \"image\">) {\n//     if (oldProps.src !== this.props.src) {\n//       this.loadImage();\n//     }\n//   }\n//   componentWillUnmount() {\n//     this.image.removeEventListener(\"load\", this.handleLoad);\n//   }\n//   loadImage() {\n//     // save to \"this\" to remove \"load\" handler on unmount\n//     this.image = new window.Image();\n//     this.image.src = this.props.src;\n//     this.image.addEventListener(\"load\", this.handleLoad);\n//   }\n//   handleLoad = () => {\n//     // after setState react-konva will update canvas and redraw the layer\n//     // because \"image\" property is changed\n//     this.setState({\n//       image: this.image,\n//     });\n//     // if you keep same image object during source updates\n//     // you will have to update layer manually:\n//     // this.imageNode.getLayer().batchDraw();\n//   };\n//   render() {\n//     return (\n//       <KonvaImage\n//         image={this.state.image}\n//         ref={(node) => {\n//           this.imageNode = node;\n//         }}\n//         {...this.props}\n//       />\n//     );\n//   }\n// }\n// export default Image;\nvar Image = (function () {\n    React.createElement(React.Fragment, null);\n});\n\nexport { Image as default };\n"]},"metadata":{},"sourceType":"module"}