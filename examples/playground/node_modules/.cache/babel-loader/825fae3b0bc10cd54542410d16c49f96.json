{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CSSMathValue } from './CSSMathValue';\nimport { Nested, ParenLess, CSSStyleValueType } from '.';\n\nvar CSSMathNegate =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathNegate, _super);\n\n  function CSSMathNegate(value, type) {\n    var _this = _super.call(this, type) || this;\n\n    _this.value = value;\n    _this.operator = 'negate';\n    return _this;\n  }\n\n  CSSMathNegate.create = function (value) {\n    return new CSSMathNegate(value, value.type_);\n  };\n\n  CSSMathNegate.prototype.clone = function () {\n    return new CSSMathNegate(this.value, this.type_);\n  };\n\n  CSSMathNegate.prototype.getType = function () {\n    return CSSStyleValueType.kNegateType;\n  };\n\n  CSSMathNegate.prototype.equals = function (other) {\n    if (other.getType() !== CSSStyleValueType.kNegateType) {\n      return false;\n    }\n\n    var other_invert = other;\n    return this.value.equals(other_invert.value);\n  };\n\n  CSSMathNegate.prototype.sumValue = function () {\n    var sum = this.value.sumValue();\n\n    if (sum.length === 0) {\n      return null;\n    }\n\n    sum.forEach(function (term) {\n      term.value *= -1;\n    });\n    return sum;\n  }; // toCalcExpressionNode(): CSSMathExpressionNode {\n  //   const right_side = this.value.toCalcExpressionNode();\n  //   if (!right_side) {\n  //     return null;\n  //   }\n  //   // return CSSMathExpressionOperation::CreateArithmeticOperationSimplified(\n  //   //   CSSMathExpressionNumericLiteral::Create(\n  //   //       -1, CSSPrimitiveValue::UnitType::kNumber),\n  //   //   right_side, CSSMathOperator::kMultiply);\n  // }\n\n\n  CSSMathNegate.prototype.buildCSSText = function (nested, paren_less, result) {\n    if (paren_less == ParenLess.kNo) {\n      result += nested === Nested.kYes ? '(' : 'calc(';\n    }\n\n    result += '-';\n    result = this.value.buildCSSText(Nested.kYes, ParenLess.kNo, result);\n\n    if (paren_less === ParenLess.kNo) {\n      result += ')';\n    }\n\n    return result;\n  };\n\n  return CSSMathNegate;\n}(CSSMathValue);\n\nexport { CSSMathNegate };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSMathNegate.js"],"names":["__extends","CSSMathValue","Nested","ParenLess","CSSStyleValueType","CSSMathNegate","_super","value","type","_this","call","operator","create","type_","prototype","clone","getType","kNegateType","equals","other","other_invert","sumValue","sum","length","forEach","term","buildCSSText","nested","paren_less","result","kNo","kYes"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,iBAA5B,QAAqD,GAArD;;AAEA,IAAIC,aAAa;AACjB;AACA,UAAUC,MAAV,EAAkB;AAChBN,EAAAA,SAAS,CAACK,aAAD,EAAgBC,MAAhB,CAAT;;AAEA,WAASD,aAAT,CAAuBE,KAAvB,EAA8BC,IAA9B,EAAoC;AAClC,QAAIC,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAY,IAAZ,EAAkBF,IAAlB,KAA2B,IAAvC;;AAEAC,IAAAA,KAAK,CAACF,KAAN,GAAcA,KAAd;AACAE,IAAAA,KAAK,CAACE,QAAN,GAAiB,QAAjB;AACA,WAAOF,KAAP;AACD;;AAEDJ,EAAAA,aAAa,CAACO,MAAd,GAAuB,UAAUL,KAAV,EAAiB;AACtC,WAAO,IAAIF,aAAJ,CAAkBE,KAAlB,EAAyBA,KAAK,CAACM,KAA/B,CAAP;AACD,GAFD;;AAIAR,EAAAA,aAAa,CAACS,SAAd,CAAwBC,KAAxB,GAAgC,YAAY;AAC1C,WAAO,IAAIV,aAAJ,CAAkB,KAAKE,KAAvB,EAA8B,KAAKM,KAAnC,CAAP;AACD,GAFD;;AAIAR,EAAAA,aAAa,CAACS,SAAd,CAAwBE,OAAxB,GAAkC,YAAY;AAC5C,WAAOZ,iBAAiB,CAACa,WAAzB;AACD,GAFD;;AAIAZ,EAAAA,aAAa,CAACS,SAAd,CAAwBI,MAAxB,GAAiC,UAAUC,KAAV,EAAiB;AAChD,QAAIA,KAAK,CAACH,OAAN,OAAoBZ,iBAAiB,CAACa,WAA1C,EAAuD;AACrD,aAAO,KAAP;AACD;;AAED,QAAIG,YAAY,GAAGD,KAAnB;AACA,WAAO,KAAKZ,KAAL,CAAWW,MAAX,CAAkBE,YAAY,CAACb,KAA/B,CAAP;AACD,GAPD;;AASAF,EAAAA,aAAa,CAACS,SAAd,CAAwBO,QAAxB,GAAmC,YAAY;AAC7C,QAAIC,GAAG,GAAG,KAAKf,KAAL,CAAWc,QAAX,EAAV;;AAEA,QAAIC,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;AACpB,aAAO,IAAP;AACD;;AAEDD,IAAAA,GAAG,CAACE,OAAJ,CAAY,UAAUC,IAAV,EAAgB;AAC1BA,MAAAA,IAAI,CAAClB,KAAL,IAAc,CAAC,CAAf;AACD,KAFD;AAGA,WAAOe,GAAP;AACD,GAXD,CAhCgB,CA2Cb;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAjB,EAAAA,aAAa,CAACS,SAAd,CAAwBY,YAAxB,GAAuC,UAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,MAA9B,EAAsC;AAC3E,QAAID,UAAU,IAAIzB,SAAS,CAAC2B,GAA5B,EAAiC;AAC/BD,MAAAA,MAAM,IAAIF,MAAM,KAAKzB,MAAM,CAAC6B,IAAlB,GAAyB,GAAzB,GAA+B,OAAzC;AACD;;AAEDF,IAAAA,MAAM,IAAI,GAAV;AACAA,IAAAA,MAAM,GAAG,KAAKtB,KAAL,CAAWmB,YAAX,CAAwBxB,MAAM,CAAC6B,IAA/B,EAAqC5B,SAAS,CAAC2B,GAA/C,EAAoDD,MAApD,CAAT;;AAEA,QAAID,UAAU,KAAKzB,SAAS,CAAC2B,GAA7B,EAAkC;AAChCD,MAAAA,MAAM,IAAI,GAAV;AACD;;AAED,WAAOA,MAAP;AACD,GAbD;;AAeA,SAAOxB,aAAP;AACD,CAvED,CAuEEJ,YAvEF,CAFA;;AA2EA,SAASI,aAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { CSSMathValue } from './CSSMathValue';\nimport { Nested, ParenLess, CSSStyleValueType } from '.';\n\nvar CSSMathNegate =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathNegate, _super);\n\n  function CSSMathNegate(value, type) {\n    var _this = _super.call(this, type) || this;\n\n    _this.value = value;\n    _this.operator = 'negate';\n    return _this;\n  }\n\n  CSSMathNegate.create = function (value) {\n    return new CSSMathNegate(value, value.type_);\n  };\n\n  CSSMathNegate.prototype.clone = function () {\n    return new CSSMathNegate(this.value, this.type_);\n  };\n\n  CSSMathNegate.prototype.getType = function () {\n    return CSSStyleValueType.kNegateType;\n  };\n\n  CSSMathNegate.prototype.equals = function (other) {\n    if (other.getType() !== CSSStyleValueType.kNegateType) {\n      return false;\n    }\n\n    var other_invert = other;\n    return this.value.equals(other_invert.value);\n  };\n\n  CSSMathNegate.prototype.sumValue = function () {\n    var sum = this.value.sumValue();\n\n    if (sum.length === 0) {\n      return null;\n    }\n\n    sum.forEach(function (term) {\n      term.value *= -1;\n    });\n    return sum;\n  }; // toCalcExpressionNode(): CSSMathExpressionNode {\n  //   const right_side = this.value.toCalcExpressionNode();\n  //   if (!right_side) {\n  //     return null;\n  //   }\n  //   // return CSSMathExpressionOperation::CreateArithmeticOperationSimplified(\n  //   //   CSSMathExpressionNumericLiteral::Create(\n  //   //       -1, CSSPrimitiveValue::UnitType::kNumber),\n  //   //   right_side, CSSMathOperator::kMultiply);\n  // }\n\n\n  CSSMathNegate.prototype.buildCSSText = function (nested, paren_less, result) {\n    if (paren_less == ParenLess.kNo) {\n      result += nested === Nested.kYes ? '(' : 'calc(';\n    }\n\n    result += '-';\n    result = this.value.buildCSSText(Nested.kYes, ParenLess.kNo, result);\n\n    if (paren_less === ParenLess.kNo) {\n      result += ')';\n    }\n\n    return result;\n  };\n\n  return CSSMathNegate;\n}(CSSMathValue);\n\nexport { CSSMathNegate };"]},"metadata":{},"sourceType":"module"}