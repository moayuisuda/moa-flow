{"ast":null,"code":"/**\n * A specialized version of `_.reduceRight` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the last element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduceRight(array, iteratee, accumulator, initAccum) {\n  var length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[--length];\n  }\n\n  while (length--) {\n    accumulator = iteratee(accumulator, array[length], length, array);\n  }\n\n  return accumulator;\n}\n\nexport default arrayReduceRight;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/lodash-es/_arrayReduceRight.js"],"names":["arrayReduceRight","array","iteratee","accumulator","initAccum","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CC,WAA3C,EAAwDC,SAAxD,EAAmE;AACjE,MAAIC,MAAM,GAAGJ,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACI,MAAvC;;AACA,MAAID,SAAS,IAAIC,MAAjB,EAAyB;AACvBF,IAAAA,WAAW,GAAGF,KAAK,CAAC,EAAEI,MAAH,CAAnB;AACD;;AACD,SAAOA,MAAM,EAAb,EAAiB;AACfF,IAAAA,WAAW,GAAGD,QAAQ,CAACC,WAAD,EAAcF,KAAK,CAACI,MAAD,CAAnB,EAA6BA,MAA7B,EAAqCJ,KAArC,CAAtB;AACD;;AACD,SAAOE,WAAP;AACD;;AAED,eAAeH,gBAAf","sourcesContent":["/**\n * A specialized version of `_.reduceRight` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the last element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduceRight(array, iteratee, accumulator, initAccum) {\n  var length = array == null ? 0 : array.length;\n  if (initAccum && length) {\n    accumulator = array[--length];\n  }\n  while (length--) {\n    accumulator = iteratee(accumulator, array[length], length, array);\n  }\n  return accumulator;\n}\n\nexport default arrayReduceRight;\n"]},"metadata":{},"sourceType":"module"}