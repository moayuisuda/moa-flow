{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { Shape } from '../types';\nimport { DisplayObject } from './DisplayObject';\nimport { AABB } from '../shapes';\nimport { mat4, vec3 } from 'gl-matrix';\n/**\n * HTML container\n * @see https://github.com/pmndrs/drei#html\n */\n\nvar HTML =\n/** @class */\nfunction (_super) {\n  __extends(HTML, _super);\n\n  function HTML(_a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var _this = this;\n\n    var style = _a.style,\n        rest = __rest(_a, [\"style\"]);\n\n    _this = _super.call(this, __assign({\n      type: Shape.HTML,\n      style: __assign({\n        innerHTML: '',\n        className: '',\n        style: ''\n      }, style)\n    }, rest)) || this;\n    _this.cullable.enable = false;\n    return _this;\n  }\n  /**\n   * return wrapper HTMLElement\n   * * <div> in g-webgl/canvas\n   * * <foreignObject> in g-svg\n   */\n\n\n  HTML.prototype.getDomElement = function () {\n    return this.parsedStyle.$el;\n  };\n  /**\n   * override with $el.getBoundingClientRect\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\n   */\n\n\n  HTML.prototype.getBoundingClientRect = function () {\n    return this.parsedStyle.$el.getBoundingClientRect();\n  };\n\n  HTML.prototype.getClientRects = function () {\n    return [this.getBoundingClientRect()];\n  };\n\n  HTML.prototype.getBounds = function () {\n    var _a, _b;\n\n    var clientRect = this.getBoundingClientRect(); // calc context's offset\n    // @ts-ignore\n\n    var canvasRect = (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) === null || _b === void 0 ? void 0 : _b.getContextService().getBoundingClientRect();\n\n    if (canvasRect) {\n      var minX = clientRect.left - canvasRect.left;\n      var minY = clientRect.top - canvasRect.top;\n      var aabb = new AABB();\n      aabb.setMinMax(vec3.fromValues(minX, minY, 0), vec3.fromValues(minX + clientRect.width, minY + clientRect.height, 0));\n      return aabb;\n    }\n\n    return null;\n  };\n\n  HTML.prototype.getLocalBounds = function () {\n    if (this.parentNode) {\n      var parentInvert = mat4.invert(mat4.create(), this.parentNode.getWorldTransform());\n      var bounds = this.getBounds();\n\n      if (!AABB.isEmpty(bounds)) {\n        var localBounds = new AABB();\n        localBounds.setFromTransformedAABB(bounds, parentInvert);\n        return localBounds;\n      }\n    }\n\n    return this.getBounds();\n  };\n\n  return HTML;\n}(DisplayObject);\n\nexport { HTML };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/display-objects/HTML.js"],"names":["__assign","__extends","__rest","Shape","DisplayObject","AABB","mat4","vec3","HTML","_super","_a","_this","style","rest","call","type","innerHTML","className","cullable","enable","prototype","getDomElement","parsedStyle","$el","getBoundingClientRect","getClientRects","getBounds","_b","clientRect","canvasRect","ownerDocument","defaultView","getContextService","minX","left","minY","top","aabb","setMinMax","fromValues","width","height","getLocalBounds","parentNode","parentInvert","invert","create","getWorldTransform","bounds","isEmpty","localBounds","setFromTransformedAABB"],"mappings":"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","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport { Shape } from '../types';\nimport { DisplayObject } from './DisplayObject';\nimport { AABB } from '../shapes';\nimport { mat4, vec3 } from 'gl-matrix';\n/**\n * HTML container\n * @see https://github.com/pmndrs/drei#html\n */\n\nvar HTML =\n/** @class */\nfunction (_super) {\n  __extends(HTML, _super);\n\n  function HTML(_a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var _this = this;\n\n    var style = _a.style,\n        rest = __rest(_a, [\"style\"]);\n\n    _this = _super.call(this, __assign({\n      type: Shape.HTML,\n      style: __assign({\n        innerHTML: '',\n        className: '',\n        style: ''\n      }, style)\n    }, rest)) || this;\n    _this.cullable.enable = false;\n    return _this;\n  }\n  /**\n   * return wrapper HTMLElement\n   * * <div> in g-webgl/canvas\n   * * <foreignObject> in g-svg\n   */\n\n\n  HTML.prototype.getDomElement = function () {\n    return this.parsedStyle.$el;\n  };\n  /**\n   * override with $el.getBoundingClientRect\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\n   */\n\n\n  HTML.prototype.getBoundingClientRect = function () {\n    return this.parsedStyle.$el.getBoundingClientRect();\n  };\n\n  HTML.prototype.getClientRects = function () {\n    return [this.getBoundingClientRect()];\n  };\n\n  HTML.prototype.getBounds = function () {\n    var _a, _b;\n\n    var clientRect = this.getBoundingClientRect(); // calc context's offset\n    // @ts-ignore\n\n    var canvasRect = (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) === null || _b === void 0 ? void 0 : _b.getContextService().getBoundingClientRect();\n\n    if (canvasRect) {\n      var minX = clientRect.left - canvasRect.left;\n      var minY = clientRect.top - canvasRect.top;\n      var aabb = new AABB();\n      aabb.setMinMax(vec3.fromValues(minX, minY, 0), vec3.fromValues(minX + clientRect.width, minY + clientRect.height, 0));\n      return aabb;\n    }\n\n    return null;\n  };\n\n  HTML.prototype.getLocalBounds = function () {\n    if (this.parentNode) {\n      var parentInvert = mat4.invert(mat4.create(), this.parentNode.getWorldTransform());\n      var bounds = this.getBounds();\n\n      if (!AABB.isEmpty(bounds)) {\n        var localBounds = new AABB();\n        localBounds.setFromTransformedAABB(bounds, parentInvert);\n        return localBounds;\n      }\n    }\n\n    return this.getBounds();\n  };\n\n  return HTML;\n}(DisplayObject);\n\nexport { HTML };"]},"metadata":{},"sourceType":"module"}