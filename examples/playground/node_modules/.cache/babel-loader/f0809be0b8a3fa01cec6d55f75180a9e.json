{"ast":null,"code":"import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport { getBBoxByArray } from './util';\nexport default {\n  /**\n   * 计算多折线的包围盒\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 包围盒\n   */\n  box: function box(points) {\n    var xArr = [];\n    var yArr = [];\n\n    for (var i = 0; i < points.length; i++) {\n      var point = points[i];\n      xArr.push(point[0]);\n      yArr.push(point[1]);\n    }\n\n    return getBBoxByArray(xArr, yArr);\n  },\n\n  /**\n   * 计算多折线的长度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 多条边的长度\n   */\n  length: function length(points) {\n    return lengthOfSegment(points);\n  },\n\n  /**\n   * 根据比例获取多折线的点\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的点\n   */\n  pointAt: function pointAt(points, t) {\n    return pointAtSegments(points, t);\n  },\n\n  /**\n   * 指定点到多折线的距离\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} x 指定点的 x\n   * @param {number} y 指定点的 y\n   * @return {number} 点到多折线的距离\n   */\n  pointDistance: function pointDistance(points, x, y) {\n    return distanceAtSegment(points, x, y);\n  },\n\n  /**\n   * 根据比例获取多折线的切线角度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的角度\n   */\n  tangentAngle: function tangentAngle(points, t) {\n    return angleAtSegments(points, t);\n  }\n};","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g-math/es/polyline.js"],"names":["pointAtSegments","angleAtSegments","distanceAtSegment","lengthOfSegment","getBBoxByArray","box","points","xArr","yArr","i","length","point","push","pointAt","t","pointDistance","x","y","tangentAngle"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,iBAA3C,EAA8DC,eAA9D,QAAqF,YAArF;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,eAAe;AACb;AACF;AACA;AACA;AACA;AACEC,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,MAAb,EAAqB;AACxB,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIE,KAAK,GAAGL,MAAM,CAACG,CAAD,CAAlB;AACAF,MAAAA,IAAI,CAACK,IAAL,CAAUD,KAAK,CAAC,CAAD,CAAf;AACAH,MAAAA,IAAI,CAACI,IAAL,CAAUD,KAAK,CAAC,CAAD,CAAf;AACD;;AAED,WAAOP,cAAc,CAACG,IAAD,EAAOC,IAAP,CAArB;AACD,GAjBY;;AAmBb;AACF;AACA;AACA;AACA;AACEE,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBJ,MAAhB,EAAwB;AAC9B,WAAOH,eAAe,CAACG,MAAD,CAAtB;AACD,GA1BY;;AA4Bb;AACF;AACA;AACA;AACA;AACA;AACEO,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBP,MAAjB,EAAyBQ,CAAzB,EAA4B;AACnC,WAAOd,eAAe,CAACM,MAAD,EAASQ,CAAT,CAAtB;AACD,GApCY;;AAsCb;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBT,MAAvB,EAA+BU,CAA/B,EAAkCC,CAAlC,EAAqC;AAClD,WAAOf,iBAAiB,CAACI,MAAD,EAASU,CAAT,EAAYC,CAAZ,CAAxB;AACD,GA/CY;;AAiDb;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBZ,MAAtB,EAA8BQ,CAA9B,EAAiC;AAC7C,WAAOb,eAAe,CAACK,MAAD,EAASQ,CAAT,CAAtB;AACD;AAzDY,CAAf","sourcesContent":["import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport { getBBoxByArray } from './util';\nexport default {\n  /**\n   * 计算多折线的包围盒\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 包围盒\n   */\n  box: function box(points) {\n    var xArr = [];\n    var yArr = [];\n\n    for (var i = 0; i < points.length; i++) {\n      var point = points[i];\n      xArr.push(point[0]);\n      yArr.push(point[1]);\n    }\n\n    return getBBoxByArray(xArr, yArr);\n  },\n\n  /**\n   * 计算多折线的长度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 多条边的长度\n   */\n  length: function length(points) {\n    return lengthOfSegment(points);\n  },\n\n  /**\n   * 根据比例获取多折线的点\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的点\n   */\n  pointAt: function pointAt(points, t) {\n    return pointAtSegments(points, t);\n  },\n\n  /**\n   * 指定点到多折线的距离\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} x 指定点的 x\n   * @param {number} y 指定点的 y\n   * @return {number} 点到多折线的距离\n   */\n  pointDistance: function pointDistance(points, x, y) {\n    return distanceAtSegment(points, x, y);\n  },\n\n  /**\n   * 根据比例获取多折线的切线角度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的角度\n   */\n  tangentAngle: function tangentAngle(points, t) {\n    return angleAtSegments(points, t);\n  }\n};"]},"metadata":{},"sourceType":"module"}