{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncParallelBailHookCodeFactory extends HookCodeFactory {\n  content(_ref) {\n    let {\n      onError,\n      onResult,\n      onDone\n    } = _ref;\n    let code = \"\";\n    code += `var _results = new Array(${this.options.taps.length});\\n`;\n    code += \"var _checkDone = function() {\\n\";\n    code += \"for(var i = 0; i < _results.length; i++) {\\n\";\n    code += \"var item = _results[i];\\n\";\n    code += \"if(item === undefined) return false;\\n\";\n    code += \"if(item.result !== undefined) {\\n\";\n    code += onResult(\"item.result\");\n    code += \"return true;\\n\";\n    code += \"}\\n\";\n    code += \"if(item.error) {\\n\";\n    code += onError(\"item.error\");\n    code += \"return true;\\n\";\n    code += \"}\\n\";\n    code += \"}\\n\";\n    code += \"return false;\\n\";\n    code += \"}\\n\";\n    code += this.callTapsParallel({\n      onError: (i, err, done, doneBreak) => {\n        let code = \"\";\n        code += `if(${i} < _results.length && ((_results.length = ${i + 1}), (_results[${i}] = { error: ${err} }), _checkDone())) {\\n`;\n        code += doneBreak(true);\n        code += \"} else {\\n\";\n        code += done();\n        code += \"}\\n\";\n        return code;\n      },\n      onResult: (i, result, done, doneBreak) => {\n        let code = \"\";\n        code += `if(${i} < _results.length && (${result} !== undefined && (_results.length = ${i + 1}), (_results[${i}] = { result: ${result} }), _checkDone())) {\\n`;\n        code += doneBreak(true);\n        code += \"} else {\\n\";\n        code += done();\n        code += \"}\\n\";\n        return code;\n      },\n      onTap: (i, run, done, doneBreak) => {\n        let code = \"\";\n\n        if (i > 0) {\n          code += `if(${i} >= _results.length) {\\n`;\n          code += done();\n          code += \"} else {\\n\";\n        }\n\n        code += run();\n        if (i > 0) code += \"}\\n\";\n        return code;\n      },\n      onDone\n    });\n    return code;\n  }\n\n}\n\nconst factory = new AsyncParallelBailHookCodeFactory();\n\nconst COMPILE = function (options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\n\nfunction AsyncParallelBailHook() {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const hook = new Hook(args, name);\n  hook.constructor = AsyncParallelBailHook;\n  hook.compile = COMPILE;\n  hook._call = undefined;\n  hook.call = undefined;\n  return hook;\n}\n\nAsyncParallelBailHook.prototype = null;\nmodule.exports = AsyncParallelBailHook;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/tapable/lib/AsyncParallelBailHook.js"],"names":["Hook","require","HookCodeFactory","AsyncParallelBailHookCodeFactory","content","onError","onResult","onDone","code","options","taps","length","callTapsParallel","i","err","done","doneBreak","result","onTap","run","factory","COMPILE","setup","create","AsyncParallelBailHook","args","name","undefined","hook","constructor","compile","_call","call","prototype","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,gCAAN,SAA+CD,eAA/C,CAA+D;AAC9DE,EAAAA,OAAO,OAAgC;AAAA,QAA/B;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA;AAArB,KAA+B;AACtC,QAAIC,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,IAAK,4BAA2B,KAAKC,OAAL,CAAaC,IAAb,CAAkBC,MAAO,MAA7D;AACAH,IAAAA,IAAI,IAAI,iCAAR;AACAA,IAAAA,IAAI,IAAI,8CAAR;AACAA,IAAAA,IAAI,IAAI,2BAAR;AACAA,IAAAA,IAAI,IAAI,wCAAR;AACAA,IAAAA,IAAI,IAAI,mCAAR;AACAA,IAAAA,IAAI,IAAIF,QAAQ,CAAC,aAAD,CAAhB;AACAE,IAAAA,IAAI,IAAI,gBAAR;AACAA,IAAAA,IAAI,IAAI,KAAR;AACAA,IAAAA,IAAI,IAAI,oBAAR;AACAA,IAAAA,IAAI,IAAIH,OAAO,CAAC,YAAD,CAAf;AACAG,IAAAA,IAAI,IAAI,gBAAR;AACAA,IAAAA,IAAI,IAAI,KAAR;AACAA,IAAAA,IAAI,IAAI,KAAR;AACAA,IAAAA,IAAI,IAAI,iBAAR;AACAA,IAAAA,IAAI,IAAI,KAAR;AACAA,IAAAA,IAAI,IAAI,KAAKI,gBAAL,CAAsB;AAC7BP,MAAAA,OAAO,EAAE,CAACQ,CAAD,EAAIC,GAAJ,EAASC,IAAT,EAAeC,SAAf,KAA6B;AACrC,YAAIR,IAAI,GAAG,EAAX;AACAA,QAAAA,IAAI,IAAK,MAAKK,CAAE,6CAA4CA,CAAC,GAC5D,CAAE,gBAAeA,CAAE,gBAAeC,GAAI,yBADvC;AAEAN,QAAAA,IAAI,IAAIQ,SAAS,CAAC,IAAD,CAAjB;AACAR,QAAAA,IAAI,IAAI,YAAR;AACAA,QAAAA,IAAI,IAAIO,IAAI,EAAZ;AACAP,QAAAA,IAAI,IAAI,KAAR;AACA,eAAOA,IAAP;AACA,OAV4B;AAW7BF,MAAAA,QAAQ,EAAE,CAACO,CAAD,EAAII,MAAJ,EAAYF,IAAZ,EAAkBC,SAAlB,KAAgC;AACzC,YAAIR,IAAI,GAAG,EAAX;AACAA,QAAAA,IAAI,IAAK,MAAKK,CAAE,0BAAyBI,MAAO,wCAAuCJ,CAAC,GACvF,CAAE,gBAAeA,CAAE,iBAAgBI,MAAO,yBAD3C;AAEAT,QAAAA,IAAI,IAAIQ,SAAS,CAAC,IAAD,CAAjB;AACAR,QAAAA,IAAI,IAAI,YAAR;AACAA,QAAAA,IAAI,IAAIO,IAAI,EAAZ;AACAP,QAAAA,IAAI,IAAI,KAAR;AACA,eAAOA,IAAP;AACA,OApB4B;AAqB7BU,MAAAA,KAAK,EAAE,CAACL,CAAD,EAAIM,GAAJ,EAASJ,IAAT,EAAeC,SAAf,KAA6B;AACnC,YAAIR,IAAI,GAAG,EAAX;;AACA,YAAIK,CAAC,GAAG,CAAR,EAAW;AACVL,UAAAA,IAAI,IAAK,MAAKK,CAAE,0BAAhB;AACAL,UAAAA,IAAI,IAAIO,IAAI,EAAZ;AACAP,UAAAA,IAAI,IAAI,YAAR;AACA;;AACDA,QAAAA,IAAI,IAAIW,GAAG,EAAX;AACA,YAAIN,CAAC,GAAG,CAAR,EAAWL,IAAI,IAAI,KAAR;AACX,eAAOA,IAAP;AACA,OA/B4B;AAgC7BD,MAAAA;AAhC6B,KAAtB,CAAR;AAkCA,WAAOC,IAAP;AACA;;AAtD6D;;AAyD/D,MAAMY,OAAO,GAAG,IAAIjB,gCAAJ,EAAhB;;AAEA,MAAMkB,OAAO,GAAG,UAASZ,OAAT,EAAkB;AACjCW,EAAAA,OAAO,CAACE,KAAR,CAAc,IAAd,EAAoBb,OAApB;AACA,SAAOW,OAAO,CAACG,MAAR,CAAed,OAAf,CAAP;AACA,CAHD;;AAKA,SAASe,qBAAT,GAA4D;AAAA,MAA7BC,IAA6B,uEAAtB,EAAsB;AAAA,MAAlBC,IAAkB,uEAAXC,SAAW;AAC3D,QAAMC,IAAI,GAAG,IAAI5B,IAAJ,CAASyB,IAAT,EAAeC,IAAf,CAAb;AACAE,EAAAA,IAAI,CAACC,WAAL,GAAmBL,qBAAnB;AACAI,EAAAA,IAAI,CAACE,OAAL,GAAeT,OAAf;AACAO,EAAAA,IAAI,CAACG,KAAL,GAAaJ,SAAb;AACAC,EAAAA,IAAI,CAACI,IAAL,GAAYL,SAAZ;AACA,SAAOC,IAAP;AACA;;AAEDJ,qBAAqB,CAACS,SAAtB,GAAkC,IAAlC;AAEAC,MAAM,CAACC,OAAP,GAAiBX,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncParallelBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, onDone }) {\n\t\tlet code = \"\";\n\t\tcode += `var _results = new Array(${this.options.taps.length});\\n`;\n\t\tcode += \"var _checkDone = function() {\\n\";\n\t\tcode += \"for(var i = 0; i < _results.length; i++) {\\n\";\n\t\tcode += \"var item = _results[i];\\n\";\n\t\tcode += \"if(item === undefined) return false;\\n\";\n\t\tcode += \"if(item.result !== undefined) {\\n\";\n\t\tcode += onResult(\"item.result\");\n\t\tcode += \"return true;\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += \"if(item.error) {\\n\";\n\t\tcode += onError(\"item.error\");\n\t\tcode += \"return true;\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += \"return false;\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += this.callTapsParallel({\n\t\t\tonError: (i, err, done, doneBreak) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${i} < _results.length && ((_results.length = ${i +\n\t\t\t\t\t1}), (_results[${i}] = { error: ${err} }), _checkDone())) {\\n`;\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += \"} else {\\n\";\n\t\t\t\tcode += done();\n\t\t\t\tcode += \"}\\n\";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonResult: (i, result, done, doneBreak) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${i} < _results.length && (${result} !== undefined && (_results.length = ${i +\n\t\t\t\t\t1}), (_results[${i}] = { result: ${result} }), _checkDone())) {\\n`;\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += \"} else {\\n\";\n\t\t\t\tcode += done();\n\t\t\t\tcode += \"}\\n\";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonTap: (i, run, done, doneBreak) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tcode += `if(${i} >= _results.length) {\\n`;\n\t\t\t\t\tcode += done();\n\t\t\t\t\tcode += \"} else {\\n\";\n\t\t\t\t}\n\t\t\t\tcode += run();\n\t\t\t\tif (i > 0) code += \"}\\n\";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone\n\t\t});\n\t\treturn code;\n\t}\n}\n\nconst factory = new AsyncParallelBailHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncParallelBailHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncParallelBailHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncParallelBailHook.prototype = null;\n\nmodule.exports = AsyncParallelBailHook;\n"]},"metadata":{},"sourceType":"script"}