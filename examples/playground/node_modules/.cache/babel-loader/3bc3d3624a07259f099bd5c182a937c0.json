{"ast":null,"code":"import baseWrapperValue from './_baseWrapperValue.js';\nimport getView from './_getView.js';\nimport isArray from './isArray.js';\n/** Used to indicate the type of lazy iteratees. */\n\nvar LAZY_FILTER_FLAG = 1,\n    LAZY_MAP_FLAG = 2;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMin = Math.min;\n/**\n * Extracts the unwrapped value from its lazy wrapper.\n *\n * @private\n * @name value\n * @memberOf LazyWrapper\n * @returns {*} Returns the unwrapped value.\n */\n\nfunction lazyValue() {\n  var array = this.__wrapped__.value(),\n      dir = this.__dir__,\n      isArr = isArray(array),\n      isRight = dir < 0,\n      arrLength = isArr ? array.length : 0,\n      view = getView(0, arrLength, this.__views__),\n      start = view.start,\n      end = view.end,\n      length = end - start,\n      index = isRight ? end : start - 1,\n      iteratees = this.__iteratees__,\n      iterLength = iteratees.length,\n      resIndex = 0,\n      takeCount = nativeMin(length, this.__takeCount__);\n\n  if (!isArr || !isRight && arrLength == length && takeCount == length) {\n    return baseWrapperValue(array, this.__actions__);\n  }\n\n  var result = [];\n\n  outer: while (length-- && resIndex < takeCount) {\n    index += dir;\n    var iterIndex = -1,\n        value = array[index];\n\n    while (++iterIndex < iterLength) {\n      var data = iteratees[iterIndex],\n          iteratee = data.iteratee,\n          type = data.type,\n          computed = iteratee(value);\n\n      if (type == LAZY_MAP_FLAG) {\n        value = computed;\n      } else if (!computed) {\n        if (type == LAZY_FILTER_FLAG) {\n          continue outer;\n        } else {\n          break outer;\n        }\n      }\n    }\n\n    result[resIndex++] = value;\n  }\n\n  return result;\n}\n\nexport default lazyValue;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/lodash-es/_lazyValue.js"],"names":["baseWrapperValue","getView","isArray","LAZY_FILTER_FLAG","LAZY_MAP_FLAG","nativeMin","Math","min","lazyValue","array","__wrapped__","value","dir","__dir__","isArr","isRight","arrLength","length","view","__views__","start","end","index","iteratees","__iteratees__","iterLength","resIndex","takeCount","__takeCount__","__actions__","result","outer","iterIndex","data","iteratee","type","computed"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,CAAvB;AAAA,IACIC,aAAa,GAAG,CADpB;AAGA;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,GAAqB;AACnB,MAAIC,KAAK,GAAG,KAAKC,WAAL,CAAiBC,KAAjB,EAAZ;AAAA,MACIC,GAAG,GAAG,KAAKC,OADf;AAAA,MAEIC,KAAK,GAAGZ,OAAO,CAACO,KAAD,CAFnB;AAAA,MAGIM,OAAO,GAAGH,GAAG,GAAG,CAHpB;AAAA,MAIII,SAAS,GAAGF,KAAK,GAAGL,KAAK,CAACQ,MAAT,GAAkB,CAJvC;AAAA,MAKIC,IAAI,GAAGjB,OAAO,CAAC,CAAD,EAAIe,SAAJ,EAAe,KAAKG,SAApB,CALlB;AAAA,MAMIC,KAAK,GAAGF,IAAI,CAACE,KANjB;AAAA,MAOIC,GAAG,GAAGH,IAAI,CAACG,GAPf;AAAA,MAQIJ,MAAM,GAAGI,GAAG,GAAGD,KARnB;AAAA,MASIE,KAAK,GAAGP,OAAO,GAAGM,GAAH,GAAUD,KAAK,GAAG,CATrC;AAAA,MAUIG,SAAS,GAAG,KAAKC,aAVrB;AAAA,MAWIC,UAAU,GAAGF,SAAS,CAACN,MAX3B;AAAA,MAYIS,QAAQ,GAAG,CAZf;AAAA,MAaIC,SAAS,GAAGtB,SAAS,CAACY,MAAD,EAAS,KAAKW,aAAd,CAbzB;;AAeA,MAAI,CAACd,KAAD,IAAW,CAACC,OAAD,IAAYC,SAAS,IAAIC,MAAzB,IAAmCU,SAAS,IAAIV,MAA/D,EAAwE;AACtE,WAAOjB,gBAAgB,CAACS,KAAD,EAAQ,KAAKoB,WAAb,CAAvB;AACD;;AACD,MAAIC,MAAM,GAAG,EAAb;;AAEAC,EAAAA,KAAK,EACL,OAAOd,MAAM,MAAMS,QAAQ,GAAGC,SAA9B,EAAyC;AACvCL,IAAAA,KAAK,IAAIV,GAAT;AAEA,QAAIoB,SAAS,GAAG,CAAC,CAAjB;AAAA,QACIrB,KAAK,GAAGF,KAAK,CAACa,KAAD,CADjB;;AAGA,WAAO,EAAEU,SAAF,GAAcP,UAArB,EAAiC;AAC/B,UAAIQ,IAAI,GAAGV,SAAS,CAACS,SAAD,CAApB;AAAA,UACIE,QAAQ,GAAGD,IAAI,CAACC,QADpB;AAAA,UAEIC,IAAI,GAAGF,IAAI,CAACE,IAFhB;AAAA,UAGIC,QAAQ,GAAGF,QAAQ,CAACvB,KAAD,CAHvB;;AAKA,UAAIwB,IAAI,IAAI/B,aAAZ,EAA2B;AACzBO,QAAAA,KAAK,GAAGyB,QAAR;AACD,OAFD,MAEO,IAAI,CAACA,QAAL,EAAe;AACpB,YAAID,IAAI,IAAIhC,gBAAZ,EAA8B;AAC5B,mBAAS4B,KAAT;AACD,SAFD,MAEO;AACL,gBAAMA,KAAN;AACD;AACF;AACF;;AACDD,IAAAA,MAAM,CAACJ,QAAQ,EAAT,CAAN,GAAqBf,KAArB;AACD;;AACD,SAAOmB,MAAP;AACD;;AAED,eAAetB,SAAf","sourcesContent":["import baseWrapperValue from './_baseWrapperValue.js';\nimport getView from './_getView.js';\nimport isArray from './isArray.js';\n\n/** Used to indicate the type of lazy iteratees. */\nvar LAZY_FILTER_FLAG = 1,\n    LAZY_MAP_FLAG = 2;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Extracts the unwrapped value from its lazy wrapper.\n *\n * @private\n * @name value\n * @memberOf LazyWrapper\n * @returns {*} Returns the unwrapped value.\n */\nfunction lazyValue() {\n  var array = this.__wrapped__.value(),\n      dir = this.__dir__,\n      isArr = isArray(array),\n      isRight = dir < 0,\n      arrLength = isArr ? array.length : 0,\n      view = getView(0, arrLength, this.__views__),\n      start = view.start,\n      end = view.end,\n      length = end - start,\n      index = isRight ? end : (start - 1),\n      iteratees = this.__iteratees__,\n      iterLength = iteratees.length,\n      resIndex = 0,\n      takeCount = nativeMin(length, this.__takeCount__);\n\n  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n    return baseWrapperValue(array, this.__actions__);\n  }\n  var result = [];\n\n  outer:\n  while (length-- && resIndex < takeCount) {\n    index += dir;\n\n    var iterIndex = -1,\n        value = array[index];\n\n    while (++iterIndex < iterLength) {\n      var data = iteratees[iterIndex],\n          iteratee = data.iteratee,\n          type = data.type,\n          computed = iteratee(value);\n\n      if (type == LAZY_MAP_FLAG) {\n        value = computed;\n      } else if (!computed) {\n        if (type == LAZY_FILTER_FLAG) {\n          continue outer;\n        } else {\n          break outer;\n        }\n      }\n    }\n    result[resIndex++] = value;\n  }\n  return result;\n}\n\nexport default lazyValue;\n"]},"metadata":{},"sourceType":"module"}