{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { vec3 } from 'gl-matrix';\nimport { singleton, inject } from 'mana-syringe';\nimport { GeometryAABBUpdater } from './interfaces';\nimport { TextService } from '../TextService';\nimport { Shape } from '../../types';\nimport { CSSUnitValue } from '../../css';\n\nvar TextUpdater =\n/** @class */\nfunction () {\n  function TextUpdater() {}\n\n  TextUpdater.prototype.isReadyToMeasure = function (parsedStyle, object) {\n    var text = parsedStyle.text,\n        textAlign = parsedStyle.textAlign,\n        textBaseline = parsedStyle.textBaseline,\n        fontSize = parsedStyle.fontSize,\n        fontStyle = parsedStyle.fontStyle,\n        fontWeight = parsedStyle.fontWeight,\n        fontVariant = parsedStyle.fontVariant;\n    return text && fontSize && fontStyle && fontWeight && fontVariant && textAlign && textBaseline;\n  };\n\n  TextUpdater.prototype.update = function (parsedStyle, object) {\n    var _a, _b;\n\n    var text = parsedStyle.text,\n        textAlign = parsedStyle.textAlign,\n        lineWidth = parsedStyle.lineWidth,\n        textBaseline = parsedStyle.textBaseline,\n        x = parsedStyle.x,\n        y = parsedStyle.y,\n        dx = parsedStyle.dx,\n        dy = parsedStyle.dy;\n    var offscreenCanvas = (((_b = (_a = object === null || object === void 0 ? void 0 : object.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) === null || _b === void 0 ? void 0 : _b.getConfig()) || {}).offscreenCanvas;\n\n    if (!this.isReadyToMeasure(parsedStyle, object)) {\n      // if (!text || !textAlign || !textBaseline ||) {\n      parsedStyle.metrics = {\n        font: '',\n        width: 0,\n        height: 0,\n        lines: [],\n        lineWidths: [],\n        lineHeight: 0,\n        maxLineWidth: 0,\n        fontProperties: {\n          ascent: 0,\n          descent: 0,\n          fontSize: 0\n        },\n        lineMetrics: []\n      };\n      return {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0,\n        offsetX: 0,\n        offsetY: 0\n      };\n    }\n\n    var metrics = this.textService.measureText(text, parsedStyle, offscreenCanvas);\n    parsedStyle.metrics = metrics;\n    var width = metrics.width,\n        height = metrics.height,\n        lineHeight = metrics.lineHeight,\n        fontProperties = metrics.fontProperties; // anchor is left-top by default\n\n    var halfExtents = vec3.fromValues(width / 2, height / 2, 0); // default 'left'\n\n    var anchor = [0, 1];\n    var lineXOffset = 0;\n\n    if (textAlign.value === 'center') {\n      lineXOffset = lineWidth.value / 2;\n      anchor = [0.5, 1];\n    } else if (textAlign.value === 'right' || textAlign.value === 'end') {\n      lineXOffset = lineWidth.value;\n      anchor = [1, 1];\n    }\n\n    var lineYOffset = 0;\n\n    if (textBaseline.value === 'middle') {\n      // eslint-disable-next-line prefer-destructuring\n      lineYOffset = halfExtents[1];\n    } else if (textBaseline.value === 'top' || textBaseline.value === 'hanging') {\n      lineYOffset = halfExtents[1] * 2;\n    } else if (textBaseline.value === 'alphabetic') {\n      lineYOffset = lineHeight - fontProperties.ascent;\n    } else if (textBaseline.value === 'bottom' || textBaseline.value === 'ideographic') {\n      lineYOffset = 0;\n    } // TODO: ideographic & bottom\n\n\n    if (dx) {\n      lineXOffset += dx.value;\n    }\n\n    if (dy) {\n      lineYOffset += dy.value;\n    } // update anchor\n\n\n    parsedStyle.anchor = [new CSSUnitValue(anchor[0]), new CSSUnitValue(anchor[1]), new CSSUnitValue(0)]; // console.log(parsedStyle.anchor);\n    // if (!parsedStyle.transformOrigin) {\n    //   parsedStyle.transformOrigin = [\n    //     // new CSSUnitValue(anchor[0] * 100, '%'),\n    //     // new CSSUnitValue(anchor[1] * 100, '%'),\n    //     new CSSUnitValue(0, '%'),\n    //     new CSSUnitValue(0, '%'),\n    //     new CSSUnitValue(0, '%'),\n    //   ];\n    // }\n\n    return {\n      width: halfExtents[0] * 2,\n      height: halfExtents[1] * 2,\n      x: x.value || 0,\n      y: y.value || 0,\n      offsetX: lineXOffset,\n      offsetY: lineYOffset\n    };\n  };\n\n  __decorate([inject(TextService), __metadata(\"design:type\", TextService)], TextUpdater.prototype, \"textService\", void 0);\n\n  TextUpdater = __decorate([singleton({\n    token: {\n      token: GeometryAABBUpdater,\n      named: Shape.TEXT\n    }\n  })], TextUpdater);\n  return TextUpdater;\n}();\n\nexport { TextUpdater };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/services/aabb/TextUpdater.js"],"names":["__decorate","__metadata","vec3","singleton","inject","GeometryAABBUpdater","TextService","Shape","CSSUnitValue","TextUpdater","prototype","isReadyToMeasure","parsedStyle","object","text","textAlign","textBaseline","fontSize","fontStyle","fontWeight","fontVariant","update","_a","_b","lineWidth","x","y","dx","dy","offscreenCanvas","ownerDocument","defaultView","getConfig","metrics","font","width","height","lines","lineWidths","lineHeight","maxLineWidth","fontProperties","ascent","descent","lineMetrics","offsetX","offsetY","textService","measureText","halfExtents","fromValues","anchor","lineXOffset","value","lineYOffset","token","named","TEXT"],"mappings":"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","sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport { vec3 } from 'gl-matrix';\nimport { singleton, inject } from 'mana-syringe';\nimport { GeometryAABBUpdater } from './interfaces';\nimport { TextService } from '../TextService';\nimport { Shape } from '../../types';\nimport { CSSUnitValue } from '../../css';\n\nvar TextUpdater =\n/** @class */\nfunction () {\n  function TextUpdater() {}\n\n  TextUpdater.prototype.isReadyToMeasure = function (parsedStyle, object) {\n    var text = parsedStyle.text,\n        textAlign = parsedStyle.textAlign,\n        textBaseline = parsedStyle.textBaseline,\n        fontSize = parsedStyle.fontSize,\n        fontStyle = parsedStyle.fontStyle,\n        fontWeight = parsedStyle.fontWeight,\n        fontVariant = parsedStyle.fontVariant;\n    return text && fontSize && fontStyle && fontWeight && fontVariant && textAlign && textBaseline;\n  };\n\n  TextUpdater.prototype.update = function (parsedStyle, object) {\n    var _a, _b;\n\n    var text = parsedStyle.text,\n        textAlign = parsedStyle.textAlign,\n        lineWidth = parsedStyle.lineWidth,\n        textBaseline = parsedStyle.textBaseline,\n        x = parsedStyle.x,\n        y = parsedStyle.y,\n        dx = parsedStyle.dx,\n        dy = parsedStyle.dy;\n    var offscreenCanvas = (((_b = (_a = object === null || object === void 0 ? void 0 : object.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) === null || _b === void 0 ? void 0 : _b.getConfig()) || {}).offscreenCanvas;\n\n    if (!this.isReadyToMeasure(parsedStyle, object)) {\n      // if (!text || !textAlign || !textBaseline ||) {\n      parsedStyle.metrics = {\n        font: '',\n        width: 0,\n        height: 0,\n        lines: [],\n        lineWidths: [],\n        lineHeight: 0,\n        maxLineWidth: 0,\n        fontProperties: {\n          ascent: 0,\n          descent: 0,\n          fontSize: 0\n        },\n        lineMetrics: []\n      };\n      return {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0,\n        offsetX: 0,\n        offsetY: 0\n      };\n    }\n\n    var metrics = this.textService.measureText(text, parsedStyle, offscreenCanvas);\n    parsedStyle.metrics = metrics;\n    var width = metrics.width,\n        height = metrics.height,\n        lineHeight = metrics.lineHeight,\n        fontProperties = metrics.fontProperties; // anchor is left-top by default\n\n    var halfExtents = vec3.fromValues(width / 2, height / 2, 0); // default 'left'\n\n    var anchor = [0, 1];\n    var lineXOffset = 0;\n\n    if (textAlign.value === 'center') {\n      lineXOffset = lineWidth.value / 2;\n      anchor = [0.5, 1];\n    } else if (textAlign.value === 'right' || textAlign.value === 'end') {\n      lineXOffset = lineWidth.value;\n      anchor = [1, 1];\n    }\n\n    var lineYOffset = 0;\n\n    if (textBaseline.value === 'middle') {\n      // eslint-disable-next-line prefer-destructuring\n      lineYOffset = halfExtents[1];\n    } else if (textBaseline.value === 'top' || textBaseline.value === 'hanging') {\n      lineYOffset = halfExtents[1] * 2;\n    } else if (textBaseline.value === 'alphabetic') {\n      lineYOffset = lineHeight - fontProperties.ascent;\n    } else if (textBaseline.value === 'bottom' || textBaseline.value === 'ideographic') {\n      lineYOffset = 0;\n    } // TODO: ideographic & bottom\n\n\n    if (dx) {\n      lineXOffset += dx.value;\n    }\n\n    if (dy) {\n      lineYOffset += dy.value;\n    } // update anchor\n\n\n    parsedStyle.anchor = [new CSSUnitValue(anchor[0]), new CSSUnitValue(anchor[1]), new CSSUnitValue(0)]; // console.log(parsedStyle.anchor);\n    // if (!parsedStyle.transformOrigin) {\n    //   parsedStyle.transformOrigin = [\n    //     // new CSSUnitValue(anchor[0] * 100, '%'),\n    //     // new CSSUnitValue(anchor[1] * 100, '%'),\n    //     new CSSUnitValue(0, '%'),\n    //     new CSSUnitValue(0, '%'),\n    //     new CSSUnitValue(0, '%'),\n    //   ];\n    // }\n\n    return {\n      width: halfExtents[0] * 2,\n      height: halfExtents[1] * 2,\n      x: x.value || 0,\n      y: y.value || 0,\n      offsetX: lineXOffset,\n      offsetY: lineYOffset\n    };\n  };\n\n  __decorate([inject(TextService), __metadata(\"design:type\", TextService)], TextUpdater.prototype, \"textService\", void 0);\n\n  TextUpdater = __decorate([singleton({\n    token: {\n      token: GeometryAABBUpdater,\n      named: Shape.TEXT\n    }\n  })], TextUpdater);\n  return TextUpdater;\n}();\n\nexport { TextUpdater };"]},"metadata":{},"sourceType":"module"}