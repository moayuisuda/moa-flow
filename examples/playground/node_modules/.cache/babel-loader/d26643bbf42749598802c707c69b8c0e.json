{"ast":null,"code":"/**\n * The CSSUnitValue interface of the CSS_Object_Model represents values that contain a single unit type.\n * For example, \"42px\" would be represented by a CSSNumericValue.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSUnitValue\n */\nimport { __extends } from \"tslib\";\nimport { DCHECK } from '../../utils';\nimport { CSSMathInvert } from './CSSMathInvert';\nimport { CSSNumericValue } from './CSSNumericValue';\nimport { CSSNumericValueType } from './CSSNumericValueType';\nimport { CSSStyleValueType, UnitType } from '.';\nimport { CSSStyleValue } from './CSSStyleValue';\n/**\n * Represents numeric values that can be expressed as a single number plus a\n * unit (or a naked number or percentage).\n * @see https://drafts.css-houdini.org/css-typed-om/#cssunitvalue\n */\n\nvar CSSUnitValue =\n/** @class */\nfunction (_super) {\n  __extends(CSSUnitValue, _super);\n\n  function CSSUnitValue(value, unitOrName) {\n    if (unitOrName === void 0) {\n      unitOrName = UnitType.kNumber;\n    }\n\n    var _this = this;\n\n    var unit;\n\n    if (typeof unitOrName === 'string') {\n      unit = CSSUnitValue.unitFromName(unitOrName);\n    } else {\n      unit = unitOrName;\n    }\n\n    DCHECK(CSSUnitValue.isValidUnit(unit));\n    _this = _super.call(this, new CSSNumericValueType(unit)) || this;\n    _this.unit = unit;\n    _this.value = value;\n    return _this;\n  } // static fromCSSValue(value: CSSNumericLiteralValue) {\n  //   let unit = value.type;\n  //   if (unit === UnitType.kInteger) unit = UnitType.kNumber;\n  //   if (!this.isValidUnit(unit)) return null;\n  //   return new CSSUnitValue(value.getDoubleValue(), unit);\n  // }\n\n\n  CSSUnitValue.toCanonicalUnit = function (unit) {\n    return this.canonicalUnitTypeForCategory(this.unitTypeToUnitCategory(unit));\n  };\n\n  CSSUnitValue.toCanonicalUnitIfPossible = function (unit) {\n    var canonical_unit = this.toCanonicalUnit(unit);\n    if (canonical_unit === UnitType.kUnknown) return unit;\n    return canonical_unit;\n  };\n\n  CSSUnitValue.formatInfinityOrNaN = function (number, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    var result = '';\n\n    if (!Number.isFinite(number)) {\n      if (number > 0) result = 'infinity';else result = '-infinity';\n    } else {\n      DCHECK(Number.isNaN(number));\n      result = 'NaN';\n    }\n\n    return result += suffix;\n  };\n\n  CSSUnitValue.formatNumber = function (number, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    return number + suffix;\n  };\n\n  CSSUnitValue.prototype.clone = function () {\n    return new CSSUnitValue(this.value, this.unit);\n  };\n\n  CSSUnitValue.prototype.convertTo = function (target_unit) {\n    if (this.unit === target_unit) {\n      return new CSSUnitValue(this.value, this.unit);\n    } // Instead of defining the scale factors for every unit to every other unit,\n    // we simply convert to the canonical unit and back since we already have\n    // the scale factors for canonical units.\n\n\n    var canonical_unit = CSSUnitValue.toCanonicalUnit(this.unit);\n\n    if (canonical_unit !== CSSUnitValue.toCanonicalUnit(target_unit) || canonical_unit === UnitType.kUnknown) {\n      return null;\n    }\n\n    var scale_factor = CSSStyleValue.conversionToCanonicalUnitsScaleFactor(this.unit) / CSSStyleValue.conversionToCanonicalUnitsScaleFactor(target_unit);\n    return new CSSUnitValue(this.value * scale_factor, target_unit);\n  };\n\n  CSSUnitValue.prototype.equals = function (other) {\n    var other_unit_value = other;\n    return this.value === other_unit_value.value && this.unit === other_unit_value.unit;\n  };\n\n  CSSUnitValue.prototype.getType = function () {\n    return CSSStyleValueType.kUnitType;\n  }; // toCSSValue() {\n  //   return new CSSNumericLiteralValue(this.value, this.unit);\n  // }\n  // // const CSSPrimitiveValue* ToCSSValueWithProperty(CSSPropertyID) const final;\n  // toCalcExpressionNode() {\n  //   return CSSMathExpressionNumericLiteral.create(\n  //     new CSSNumericLiteralValue(this.value, this.unit),\n  //   );\n  // }\n\n\n  CSSUnitValue.prototype.sumValue = function () {\n    var sum = [];\n    var unit_map = {};\n\n    if (this.unit !== UnitType.kNumber) {\n      unit_map[CSSUnitValue.toCanonicalUnitIfPossible(this.unit)] = 1;\n    }\n\n    sum.push({\n      value: this.value * CSSStyleValue.conversionToCanonicalUnitsScaleFactor(this.unit),\n      units: unit_map\n    });\n    return sum;\n  };\n\n  CSSUnitValue.prototype.negate = function () {\n    return new CSSUnitValue(-this.value, this.unit);\n  };\n\n  CSSUnitValue.prototype.invert = function () {\n    if (this.unit === UnitType.kNumber) {\n      if (this.value === 0) return null;\n      return new CSSUnitValue(1.0 / this.value, this.unit);\n    }\n\n    return CSSMathInvert.create(this);\n  };\n\n  CSSUnitValue.prototype.buildCSSText = function (n, p, result) {\n    var text;\n\n    switch (this.unit) {\n      case UnitType.kUnknown:\n        // FIXME\n        break;\n\n      case UnitType.kInteger:\n        text = Number(this.value).toFixed(0);\n        break;\n\n      case UnitType.kNumber:\n      case UnitType.kPercentage:\n      case UnitType.kEms:\n      case UnitType.kQuirkyEms:\n      case UnitType.kExs:\n      case UnitType.kRems:\n      case UnitType.kChs:\n      case UnitType.kPixels:\n      case UnitType.kCentimeters:\n      case UnitType.kDotsPerPixel:\n      case UnitType.kDotsPerInch:\n      case UnitType.kDotsPerCentimeter:\n      case UnitType.kMillimeters:\n      case UnitType.kQuarterMillimeters:\n      case UnitType.kInches:\n      case UnitType.kPoints:\n      case UnitType.kPicas:\n      case UnitType.kUserUnits:\n      case UnitType.kDegrees:\n      case UnitType.kRadians:\n      case UnitType.kGradians:\n      case UnitType.kMilliseconds:\n      case UnitType.kSeconds:\n      case UnitType.kHertz:\n      case UnitType.kKilohertz:\n      case UnitType.kTurns:\n      case UnitType.kFraction:\n      case UnitType.kViewportWidth:\n      case UnitType.kViewportHeight:\n      case UnitType.kViewportInlineSize:\n      case UnitType.kViewportBlockSize:\n      case UnitType.kViewportMin:\n      case UnitType.kViewportMax:\n      case UnitType.kSmallViewportWidth:\n      case UnitType.kSmallViewportHeight:\n      case UnitType.kSmallViewportInlineSize:\n      case UnitType.kSmallViewportBlockSize:\n      case UnitType.kSmallViewportMin:\n      case UnitType.kSmallViewportMax:\n      case UnitType.kLargeViewportWidth:\n      case UnitType.kLargeViewportHeight:\n      case UnitType.kLargeViewportInlineSize:\n      case UnitType.kLargeViewportBlockSize:\n      case UnitType.kLargeViewportMin:\n      case UnitType.kLargeViewportMax:\n      case UnitType.kDynamicViewportWidth:\n      case UnitType.kDynamicViewportHeight:\n      case UnitType.kDynamicViewportInlineSize:\n      case UnitType.kDynamicViewportBlockSize:\n      case UnitType.kDynamicViewportMin:\n      case UnitType.kDynamicViewportMax:\n      case UnitType.kContainerWidth:\n      case UnitType.kContainerHeight:\n      case UnitType.kContainerInlineSize:\n      case UnitType.kContainerBlockSize:\n      case UnitType.kContainerMin:\n      case UnitType.kContainerMax:\n        {\n          var kMinInteger = -999999;\n          var kMaxInteger = 999999;\n          var value = this.value;\n          var unit = CSSUnitValue.unitTypeToString(this.unit);\n\n          if (value < kMinInteger || value > kMaxInteger) {\n            var unit_1 = CSSUnitValue.unitTypeToString(this.unit);\n\n            if (!Number.isFinite(value) || Number.isNaN(value)) {\n              text = CSSUnitValue.formatInfinityOrNaN(value, unit_1);\n            } else {\n              text = CSSUnitValue.formatNumber(value, unit_1);\n            }\n          } else {\n            text = \"\".concat(value).concat(unit);\n          }\n        }\n    }\n\n    result += text;\n    return result;\n  };\n\n  return CSSUnitValue;\n}(CSSNumericValue);\n\nexport { CSSUnitValue };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSUnitValue.js"],"names":["__extends","DCHECK","CSSMathInvert","CSSNumericValue","CSSNumericValueType","CSSStyleValueType","UnitType","CSSStyleValue","CSSUnitValue","_super","value","unitOrName","kNumber","_this","unit","unitFromName","isValidUnit","call","toCanonicalUnit","canonicalUnitTypeForCategory","unitTypeToUnitCategory","toCanonicalUnitIfPossible","canonical_unit","kUnknown","formatInfinityOrNaN","number","suffix","result","Number","isFinite","isNaN","formatNumber","prototype","clone","convertTo","target_unit","scale_factor","conversionToCanonicalUnitsScaleFactor","equals","other","other_unit_value","getType","kUnitType","sumValue","sum","unit_map","push","units","negate","invert","create","buildCSSText","n","p","text","kInteger","toFixed","kPercentage","kEms","kQuirkyEms","kExs","kRems","kChs","kPixels","kCentimeters","kDotsPerPixel","kDotsPerInch","kDotsPerCentimeter","kMillimeters","kQuarterMillimeters","kInches","kPoints","kPicas","kUserUnits","kDegrees","kRadians","kGradians","kMilliseconds","kSeconds","kHertz","kKilohertz","kTurns","kFraction","kViewportWidth","kViewportHeight","kViewportInlineSize","kViewportBlockSize","kViewportMin","kViewportMax","kSmallViewportWidth","kSmallViewportHeight","kSmallViewportInlineSize","kSmallViewportBlockSize","kSmallViewportMin","kSmallViewportMax","kLargeViewportWidth","kLargeViewportHeight","kLargeViewportInlineSize","kLargeViewportBlockSize","kLargeViewportMin","kLargeViewportMax","kDynamicViewportWidth","kDynamicViewportHeight","kDynamicViewportInlineSize","kDynamicViewportBlockSize","kDynamicViewportMin","kDynamicViewportMax","kContainerWidth","kContainerHeight","kContainerInlineSize","kContainerBlockSize","kContainerMin","kContainerMax","kMinInteger","kMaxInteger","unitTypeToString","unit_1","concat"],"mappings":"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","sourcesContent":["/**\n * The CSSUnitValue interface of the CSS_Object_Model represents values that contain a single unit type.\n * For example, \"42px\" would be represented by a CSSNumericValue.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSUnitValue\n */\nimport { __extends } from \"tslib\";\nimport { DCHECK } from '../../utils';\nimport { CSSMathInvert } from './CSSMathInvert';\nimport { CSSNumericValue } from './CSSNumericValue';\nimport { CSSNumericValueType } from './CSSNumericValueType';\nimport { CSSStyleValueType, UnitType } from '.';\nimport { CSSStyleValue } from './CSSStyleValue';\n/**\n * Represents numeric values that can be expressed as a single number plus a\n * unit (or a naked number or percentage).\n * @see https://drafts.css-houdini.org/css-typed-om/#cssunitvalue\n */\n\nvar CSSUnitValue =\n/** @class */\nfunction (_super) {\n  __extends(CSSUnitValue, _super);\n\n  function CSSUnitValue(value, unitOrName) {\n    if (unitOrName === void 0) {\n      unitOrName = UnitType.kNumber;\n    }\n\n    var _this = this;\n\n    var unit;\n\n    if (typeof unitOrName === 'string') {\n      unit = CSSUnitValue.unitFromName(unitOrName);\n    } else {\n      unit = unitOrName;\n    }\n\n    DCHECK(CSSUnitValue.isValidUnit(unit));\n    _this = _super.call(this, new CSSNumericValueType(unit)) || this;\n    _this.unit = unit;\n    _this.value = value;\n    return _this;\n  } // static fromCSSValue(value: CSSNumericLiteralValue) {\n  //   let unit = value.type;\n  //   if (unit === UnitType.kInteger) unit = UnitType.kNumber;\n  //   if (!this.isValidUnit(unit)) return null;\n  //   return new CSSUnitValue(value.getDoubleValue(), unit);\n  // }\n\n\n  CSSUnitValue.toCanonicalUnit = function (unit) {\n    return this.canonicalUnitTypeForCategory(this.unitTypeToUnitCategory(unit));\n  };\n\n  CSSUnitValue.toCanonicalUnitIfPossible = function (unit) {\n    var canonical_unit = this.toCanonicalUnit(unit);\n    if (canonical_unit === UnitType.kUnknown) return unit;\n    return canonical_unit;\n  };\n\n  CSSUnitValue.formatInfinityOrNaN = function (number, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    var result = '';\n\n    if (!Number.isFinite(number)) {\n      if (number > 0) result = 'infinity';else result = '-infinity';\n    } else {\n      DCHECK(Number.isNaN(number));\n      result = 'NaN';\n    }\n\n    return result += suffix;\n  };\n\n  CSSUnitValue.formatNumber = function (number, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    return number + suffix;\n  };\n\n  CSSUnitValue.prototype.clone = function () {\n    return new CSSUnitValue(this.value, this.unit);\n  };\n\n  CSSUnitValue.prototype.convertTo = function (target_unit) {\n    if (this.unit === target_unit) {\n      return new CSSUnitValue(this.value, this.unit);\n    } // Instead of defining the scale factors for every unit to every other unit,\n    // we simply convert to the canonical unit and back since we already have\n    // the scale factors for canonical units.\n\n\n    var canonical_unit = CSSUnitValue.toCanonicalUnit(this.unit);\n\n    if (canonical_unit !== CSSUnitValue.toCanonicalUnit(target_unit) || canonical_unit === UnitType.kUnknown) {\n      return null;\n    }\n\n    var scale_factor = CSSStyleValue.conversionToCanonicalUnitsScaleFactor(this.unit) / CSSStyleValue.conversionToCanonicalUnitsScaleFactor(target_unit);\n    return new CSSUnitValue(this.value * scale_factor, target_unit);\n  };\n\n  CSSUnitValue.prototype.equals = function (other) {\n    var other_unit_value = other;\n    return this.value === other_unit_value.value && this.unit === other_unit_value.unit;\n  };\n\n  CSSUnitValue.prototype.getType = function () {\n    return CSSStyleValueType.kUnitType;\n  }; // toCSSValue() {\n  //   return new CSSNumericLiteralValue(this.value, this.unit);\n  // }\n  // // const CSSPrimitiveValue* ToCSSValueWithProperty(CSSPropertyID) const final;\n  // toCalcExpressionNode() {\n  //   return CSSMathExpressionNumericLiteral.create(\n  //     new CSSNumericLiteralValue(this.value, this.unit),\n  //   );\n  // }\n\n\n  CSSUnitValue.prototype.sumValue = function () {\n    var sum = [];\n    var unit_map = {};\n\n    if (this.unit !== UnitType.kNumber) {\n      unit_map[CSSUnitValue.toCanonicalUnitIfPossible(this.unit)] = 1;\n    }\n\n    sum.push({\n      value: this.value * CSSStyleValue.conversionToCanonicalUnitsScaleFactor(this.unit),\n      units: unit_map\n    });\n    return sum;\n  };\n\n  CSSUnitValue.prototype.negate = function () {\n    return new CSSUnitValue(-this.value, this.unit);\n  };\n\n  CSSUnitValue.prototype.invert = function () {\n    if (this.unit === UnitType.kNumber) {\n      if (this.value === 0) return null;\n      return new CSSUnitValue(1.0 / this.value, this.unit);\n    }\n\n    return CSSMathInvert.create(this);\n  };\n\n  CSSUnitValue.prototype.buildCSSText = function (n, p, result) {\n    var text;\n\n    switch (this.unit) {\n      case UnitType.kUnknown:\n        // FIXME\n        break;\n\n      case UnitType.kInteger:\n        text = Number(this.value).toFixed(0);\n        break;\n\n      case UnitType.kNumber:\n      case UnitType.kPercentage:\n      case UnitType.kEms:\n      case UnitType.kQuirkyEms:\n      case UnitType.kExs:\n      case UnitType.kRems:\n      case UnitType.kChs:\n      case UnitType.kPixels:\n      case UnitType.kCentimeters:\n      case UnitType.kDotsPerPixel:\n      case UnitType.kDotsPerInch:\n      case UnitType.kDotsPerCentimeter:\n      case UnitType.kMillimeters:\n      case UnitType.kQuarterMillimeters:\n      case UnitType.kInches:\n      case UnitType.kPoints:\n      case UnitType.kPicas:\n      case UnitType.kUserUnits:\n      case UnitType.kDegrees:\n      case UnitType.kRadians:\n      case UnitType.kGradians:\n      case UnitType.kMilliseconds:\n      case UnitType.kSeconds:\n      case UnitType.kHertz:\n      case UnitType.kKilohertz:\n      case UnitType.kTurns:\n      case UnitType.kFraction:\n      case UnitType.kViewportWidth:\n      case UnitType.kViewportHeight:\n      case UnitType.kViewportInlineSize:\n      case UnitType.kViewportBlockSize:\n      case UnitType.kViewportMin:\n      case UnitType.kViewportMax:\n      case UnitType.kSmallViewportWidth:\n      case UnitType.kSmallViewportHeight:\n      case UnitType.kSmallViewportInlineSize:\n      case UnitType.kSmallViewportBlockSize:\n      case UnitType.kSmallViewportMin:\n      case UnitType.kSmallViewportMax:\n      case UnitType.kLargeViewportWidth:\n      case UnitType.kLargeViewportHeight:\n      case UnitType.kLargeViewportInlineSize:\n      case UnitType.kLargeViewportBlockSize:\n      case UnitType.kLargeViewportMin:\n      case UnitType.kLargeViewportMax:\n      case UnitType.kDynamicViewportWidth:\n      case UnitType.kDynamicViewportHeight:\n      case UnitType.kDynamicViewportInlineSize:\n      case UnitType.kDynamicViewportBlockSize:\n      case UnitType.kDynamicViewportMin:\n      case UnitType.kDynamicViewportMax:\n      case UnitType.kContainerWidth:\n      case UnitType.kContainerHeight:\n      case UnitType.kContainerInlineSize:\n      case UnitType.kContainerBlockSize:\n      case UnitType.kContainerMin:\n      case UnitType.kContainerMax:\n        {\n          var kMinInteger = -999999;\n          var kMaxInteger = 999999;\n          var value = this.value;\n          var unit = CSSUnitValue.unitTypeToString(this.unit);\n\n          if (value < kMinInteger || value > kMaxInteger) {\n            var unit_1 = CSSUnitValue.unitTypeToString(this.unit);\n\n            if (!Number.isFinite(value) || Number.isNaN(value)) {\n              text = CSSUnitValue.formatInfinityOrNaN(value, unit_1);\n            } else {\n              text = CSSUnitValue.formatNumber(value, unit_1);\n            }\n          } else {\n            text = \"\".concat(value).concat(unit);\n          }\n        }\n    }\n\n    result += text;\n    return result;\n  };\n\n  return CSSUnitValue;\n}(CSSNumericValue);\n\nexport { CSSUnitValue };"]},"metadata":{},"sourceType":"module"}