{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/gl-matrix/esm/mat4.js"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","scale","rotate","rad","axis","len","Math","hypot","s","c","t","b12","b20","b21","b22","EPSILON","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","PI","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub"],"mappings":"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","sourcesContent":["import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;"]},"metadata":{},"sourceType":"module"}