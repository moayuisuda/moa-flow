{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport * as d3 from 'd3-color';\nimport { clamp, isString } from 'lodash-es';\nimport { CSSRGB, CSSGradientValue, GradientPatternType } from '../cssom';\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexPR = /^p\\s*\\(\\s*([axyn])\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\n/**\n * @see https://github.com/WebKit/WebKit/blob/main/Source/WebCore/css/parser/CSSParser.cpp#L97\n */\n\nexport function parseColor(colorStr) {\n  if (colorStr === void 0) {\n    colorStr = '';\n  }\n\n  if (colorStr === 'transparent') {\n    // transparent black\n    return new CSSRGB(0, 0, 0, 0);\n  } else if (colorStr === 'currentColor') {\n    // @see https://github.com/adobe-webplatform/Snap.svg/issues/526\n    colorStr = 'black';\n  }\n\n  var type = colorStr[0];\n\n  if (colorStr[1] === '(' || colorStr[2] === '(') {\n    if (type === 'l') {\n      var parsedLineGradient = parseLineGradient(colorStr);\n\n      if (parsedLineGradient) {\n        return new CSSGradientValue(GradientPatternType.LinearGradient, parsedLineGradient);\n      }\n    } else if (type === 'r') {\n      var parsedRadialGradient = parseRadialGradient(colorStr);\n\n      if (parsedRadialGradient) {\n        if (isString(parsedRadialGradient)) {\n          colorStr = parsedRadialGradient;\n        } else {\n          return new CSSGradientValue(GradientPatternType.RadialGradient, parsedRadialGradient);\n        }\n      }\n    } else if (type === 'p') {\n      var pattern = parsePattern(colorStr);\n\n      if (pattern) {\n        return new CSSGradientValue(GradientPatternType.Pattern, pattern);\n      }\n    }\n  } // constants\n\n\n  var color = d3.color(colorStr);\n  var rgba = [0, 0, 0, 0];\n\n  if (color !== null) {\n    rgba[0] = color.r || 0;\n    rgba[1] = color.g || 0;\n    rgba[2] = color.b || 0;\n    rgba[3] = color.opacity;\n  }\n\n  return new (CSSRGB.bind.apply(CSSRGB, __spreadArray([void 0], __read(rgba), false)))(); // return {\n  //   type: PARSED_COLOR_TYPE.Constant,\n  //   value: rgba,\n  //   formatted:\n  //     // rgba(255,255,255,0) -> [NaN, NaN, NaN, 0]\n  //     // @see https://github.com/d3/d3-color/issues/52\n  //     (color && `rgba(${color.r || 0},${color.g || 0},${color.b || 0},${color.opacity})`) ||\n  //     'rgba(0,0,0,0)',\n  // };\n}\nexport function mergeColors(left, right) {\n  // only support constant value, exclude gradient & pattern\n  if (!(left instanceof CSSRGB) || !(right instanceof CSSRGB)) {\n    return;\n  }\n\n  return [[Number(left.r), Number(left.g), Number(left.b), Number(left.alpha)], [Number(right.r), Number(right.g), Number(right.b), Number(right.alpha)], function (color) {\n    var rgba = color.slice();\n\n    if (rgba[3]) {\n      for (var i = 0; i < 3; i++) {\n        rgba[i] = Math.round(clamp(rgba[i], 0, 255));\n      }\n    }\n\n    rgba[3] = clamp(rgba[3], 0, 1);\n    return \"rgba(\".concat(rgba.join(','), \")\");\n  }];\n}\n\nfunction parsePattern(patternStr) {\n  var arr = regexPR.exec(patternStr);\n\n  if (arr) {\n    var repetition = arr[1];\n    var src = arr[2];\n\n    switch (repetition) {\n      case 'a':\n        repetition = 'repeat';\n        break;\n\n      case 'x':\n        repetition = 'repeat-x';\n        break;\n\n      case 'y':\n        repetition = 'repeat-y';\n        break;\n\n      case 'n':\n        repetition = 'no-repeat';\n        break;\n\n      default:\n        repetition = 'no-repeat';\n    }\n\n    return {\n      src: src,\n      repetition: repetition,\n      hash: patternStr\n    };\n  }\n\n  return null;\n}\n\nfunction parseLineGradient(gradientStr) {\n  var _a;\n\n  var arr = regexLG.exec(gradientStr);\n\n  if (arr) {\n    var angle = parseFloat(arr[1]) % 360 * (Math.PI / 180);\n    var steps = ((_a = arr[2].match(regexColorStop)) === null || _a === void 0 ? void 0 : _a.map(function (stop) {\n      return stop.split(':');\n    })) || [];\n\n    var _b = __read([1, 1], 2),\n        maxX = _b[0],\n        maxY = _b[1];\n\n    var _c = __read([0, 0], 2),\n        minX = _c[0],\n        minY = _c[1];\n\n    var start = void 0;\n    var end = void 0;\n\n    if (angle >= 0 && angle < 1 / 2 * Math.PI) {\n      start = {\n        x: minX,\n        y: minY\n      };\n      end = {\n        x: maxX,\n        y: maxY\n      };\n    } else if (1 / 2 * Math.PI <= angle && angle < Math.PI) {\n      start = {\n        x: maxX,\n        y: minY\n      };\n      end = {\n        x: minX,\n        y: maxY\n      };\n    } else if (Math.PI <= angle && angle < 3 / 2 * Math.PI) {\n      start = {\n        x: maxX,\n        y: maxY\n      };\n      end = {\n        x: minX,\n        y: minY\n      };\n    } else {\n      start = {\n        x: minX,\n        y: maxY\n      };\n      end = {\n        x: maxX,\n        y: minY\n      };\n    }\n\n    var tanTheta = Math.tan(angle);\n    var tanTheta2 = tanTheta * tanTheta;\n    var x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;\n    var y = tanTheta * (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.y;\n    return {\n      x0: start.x,\n      y0: start.y,\n      x1: x,\n      y1: y,\n      steps: steps,\n      hash: gradientStr\n    };\n  }\n\n  return null;\n}\n\nfunction parseRadialGradient(gradientStr) {\n  var _a;\n\n  var arr = regexRG.exec(gradientStr);\n\n  if (arr) {\n    var fx = parseFloat(arr[1]);\n    var fy = parseFloat(arr[2]);\n    var fr = parseFloat(arr[3]);\n    var steps = ((_a = arr[4].match(regexColorStop)) === null || _a === void 0 ? void 0 : _a.map(function (stop) {\n      return stop.split(':');\n    })) || []; // 环半径为0时，默认无渐变，取渐变序列的最后一个颜色\n\n    if (fr === 0) {\n      var colors = arr[4].match(regexColorStop);\n      return colors[colors.length - 1].split(':')[1];\n    }\n\n    return {\n      x0: fx,\n      y0: fy,\n      r0: 0,\n      x1: 0.5,\n      y1: 0.5,\n      r1: fr,\n      steps: steps,\n      hash: gradientStr\n    };\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/parser/color.js"],"names":["__read","__spreadArray","d3","clamp","isString","CSSRGB","CSSGradientValue","GradientPatternType","regexLG","regexRG","regexPR","regexColorStop","parseColor","colorStr","type","parsedLineGradient","parseLineGradient","LinearGradient","parsedRadialGradient","parseRadialGradient","RadialGradient","pattern","parsePattern","Pattern","color","rgba","r","g","b","opacity","bind","apply","mergeColors","left","right","Number","alpha","slice","i","Math","round","concat","join","patternStr","arr","exec","repetition","src","hash","gradientStr","_a","angle","parseFloat","PI","steps","match","map","stop","split","_b","maxX","maxY","_c","minX","minY","start","end","x","y","tanTheta","tan","tanTheta2","x0","y0","x1","y1","fx","fy","fr","colors","length","r0","r1"],"mappings":"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","sourcesContent":["import { __read, __spreadArray } from \"tslib\";\nimport * as d3 from 'd3-color';\nimport { clamp, isString } from 'lodash-es';\nimport { CSSRGB, CSSGradientValue, GradientPatternType } from '../cssom';\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexPR = /^p\\s*\\(\\s*([axyn])\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\n/**\n * @see https://github.com/WebKit/WebKit/blob/main/Source/WebCore/css/parser/CSSParser.cpp#L97\n */\n\nexport function parseColor(colorStr) {\n  if (colorStr === void 0) {\n    colorStr = '';\n  }\n\n  if (colorStr === 'transparent') {\n    // transparent black\n    return new CSSRGB(0, 0, 0, 0);\n  } else if (colorStr === 'currentColor') {\n    // @see https://github.com/adobe-webplatform/Snap.svg/issues/526\n    colorStr = 'black';\n  }\n\n  var type = colorStr[0];\n\n  if (colorStr[1] === '(' || colorStr[2] === '(') {\n    if (type === 'l') {\n      var parsedLineGradient = parseLineGradient(colorStr);\n\n      if (parsedLineGradient) {\n        return new CSSGradientValue(GradientPatternType.LinearGradient, parsedLineGradient);\n      }\n    } else if (type === 'r') {\n      var parsedRadialGradient = parseRadialGradient(colorStr);\n\n      if (parsedRadialGradient) {\n        if (isString(parsedRadialGradient)) {\n          colorStr = parsedRadialGradient;\n        } else {\n          return new CSSGradientValue(GradientPatternType.RadialGradient, parsedRadialGradient);\n        }\n      }\n    } else if (type === 'p') {\n      var pattern = parsePattern(colorStr);\n\n      if (pattern) {\n        return new CSSGradientValue(GradientPatternType.Pattern, pattern);\n      }\n    }\n  } // constants\n\n\n  var color = d3.color(colorStr);\n  var rgba = [0, 0, 0, 0];\n\n  if (color !== null) {\n    rgba[0] = color.r || 0;\n    rgba[1] = color.g || 0;\n    rgba[2] = color.b || 0;\n    rgba[3] = color.opacity;\n  }\n\n  return new (CSSRGB.bind.apply(CSSRGB, __spreadArray([void 0], __read(rgba), false)))(); // return {\n  //   type: PARSED_COLOR_TYPE.Constant,\n  //   value: rgba,\n  //   formatted:\n  //     // rgba(255,255,255,0) -> [NaN, NaN, NaN, 0]\n  //     // @see https://github.com/d3/d3-color/issues/52\n  //     (color && `rgba(${color.r || 0},${color.g || 0},${color.b || 0},${color.opacity})`) ||\n  //     'rgba(0,0,0,0)',\n  // };\n}\nexport function mergeColors(left, right) {\n  // only support constant value, exclude gradient & pattern\n  if (!(left instanceof CSSRGB) || !(right instanceof CSSRGB)) {\n    return;\n  }\n\n  return [[Number(left.r), Number(left.g), Number(left.b), Number(left.alpha)], [Number(right.r), Number(right.g), Number(right.b), Number(right.alpha)], function (color) {\n    var rgba = color.slice();\n\n    if (rgba[3]) {\n      for (var i = 0; i < 3; i++) {\n        rgba[i] = Math.round(clamp(rgba[i], 0, 255));\n      }\n    }\n\n    rgba[3] = clamp(rgba[3], 0, 1);\n    return \"rgba(\".concat(rgba.join(','), \")\");\n  }];\n}\n\nfunction parsePattern(patternStr) {\n  var arr = regexPR.exec(patternStr);\n\n  if (arr) {\n    var repetition = arr[1];\n    var src = arr[2];\n\n    switch (repetition) {\n      case 'a':\n        repetition = 'repeat';\n        break;\n\n      case 'x':\n        repetition = 'repeat-x';\n        break;\n\n      case 'y':\n        repetition = 'repeat-y';\n        break;\n\n      case 'n':\n        repetition = 'no-repeat';\n        break;\n\n      default:\n        repetition = 'no-repeat';\n    }\n\n    return {\n      src: src,\n      repetition: repetition,\n      hash: patternStr\n    };\n  }\n\n  return null;\n}\n\nfunction parseLineGradient(gradientStr) {\n  var _a;\n\n  var arr = regexLG.exec(gradientStr);\n\n  if (arr) {\n    var angle = parseFloat(arr[1]) % 360 * (Math.PI / 180);\n    var steps = ((_a = arr[2].match(regexColorStop)) === null || _a === void 0 ? void 0 : _a.map(function (stop) {\n      return stop.split(':');\n    })) || [];\n\n    var _b = __read([1, 1], 2),\n        maxX = _b[0],\n        maxY = _b[1];\n\n    var _c = __read([0, 0], 2),\n        minX = _c[0],\n        minY = _c[1];\n\n    var start = void 0;\n    var end = void 0;\n\n    if (angle >= 0 && angle < 1 / 2 * Math.PI) {\n      start = {\n        x: minX,\n        y: minY\n      };\n      end = {\n        x: maxX,\n        y: maxY\n      };\n    } else if (1 / 2 * Math.PI <= angle && angle < Math.PI) {\n      start = {\n        x: maxX,\n        y: minY\n      };\n      end = {\n        x: minX,\n        y: maxY\n      };\n    } else if (Math.PI <= angle && angle < 3 / 2 * Math.PI) {\n      start = {\n        x: maxX,\n        y: maxY\n      };\n      end = {\n        x: minX,\n        y: minY\n      };\n    } else {\n      start = {\n        x: minX,\n        y: maxY\n      };\n      end = {\n        x: maxX,\n        y: minY\n      };\n    }\n\n    var tanTheta = Math.tan(angle);\n    var tanTheta2 = tanTheta * tanTheta;\n    var x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;\n    var y = tanTheta * (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.y;\n    return {\n      x0: start.x,\n      y0: start.y,\n      x1: x,\n      y1: y,\n      steps: steps,\n      hash: gradientStr\n    };\n  }\n\n  return null;\n}\n\nfunction parseRadialGradient(gradientStr) {\n  var _a;\n\n  var arr = regexRG.exec(gradientStr);\n\n  if (arr) {\n    var fx = parseFloat(arr[1]);\n    var fy = parseFloat(arr[2]);\n    var fr = parseFloat(arr[3]);\n    var steps = ((_a = arr[4].match(regexColorStop)) === null || _a === void 0 ? void 0 : _a.map(function (stop) {\n      return stop.split(':');\n    })) || []; // 环半径为0时，默认无渐变，取渐变序列的最后一个颜色\n\n    if (fr === 0) {\n      var colors = arr[4].match(regexColorStop);\n      return colors[colors.length - 1].split(':')[1];\n    }\n\n    return {\n      x0: fx,\n      y0: fy,\n      r0: 0,\n      x1: 0.5,\n      y1: 0.5,\n      r1: fr,\n      steps: steps,\n      hash: gradientStr\n    };\n  }\n\n  return null;\n}"]},"metadata":{},"sourceType":"module"}