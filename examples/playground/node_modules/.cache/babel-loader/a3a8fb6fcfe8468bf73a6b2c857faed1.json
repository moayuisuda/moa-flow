{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef } from 'react';\nimport raf from \"rc-util/es/raf\";\nimport useState from \"rc-util/es/hooks/useState\";\n/**\n * State generate. Return a `setState` but it will flush all state with one render to save perf.\n * This is not a realization of `unstable_batchedUpdates`.\n */\n\nexport function useBatchFrameState() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      forceUpdate = _useState2[1];\n\n  var statesRef = useRef([]);\n  var walkingIndex = 0;\n  var beforeFrameId = 0;\n\n  function createState(defaultValue) {\n    var myIndex = walkingIndex;\n    walkingIndex += 1; // Fill value if not exist yet\n\n    if (statesRef.current.length < myIndex + 1) {\n      statesRef.current[myIndex] = defaultValue;\n    } // Return filled as `setState`\n\n\n    var value = statesRef.current[myIndex];\n\n    function setValue(val) {\n      statesRef.current[myIndex] = typeof val === 'function' ? val(statesRef.current[myIndex]) : val;\n      raf.cancel(beforeFrameId); // Flush with batch\n\n      beforeFrameId = raf(function () {\n        forceUpdate({}, true);\n      });\n    }\n\n    return [value, setValue];\n  }\n\n  return createState;\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/rc-overflow/es/hooks/useBatchFrameState.js"],"names":["_slicedToArray","useRef","raf","useState","useBatchFrameState","_useState","_useState2","forceUpdate","statesRef","walkingIndex","beforeFrameId","createState","defaultValue","myIndex","current","length","value","setValue","val","cancel"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC,MAAIC,SAAS,GAAGF,QAAQ,CAAC,EAAD,CAAxB;AAAA,MACIG,UAAU,GAAGN,cAAc,CAACK,SAAD,EAAY,CAAZ,CAD/B;AAAA,MAEIE,WAAW,GAAGD,UAAU,CAAC,CAAD,CAF5B;;AAIA,MAAIE,SAAS,GAAGP,MAAM,CAAC,EAAD,CAAtB;AACA,MAAIQ,YAAY,GAAG,CAAnB;AACA,MAAIC,aAAa,GAAG,CAApB;;AAEA,WAASC,WAAT,CAAqBC,YAArB,EAAmC;AACjC,QAAIC,OAAO,GAAGJ,YAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB,CAFiC,CAEd;;AAEnB,QAAID,SAAS,CAACM,OAAV,CAAkBC,MAAlB,GAA2BF,OAAO,GAAG,CAAzC,EAA4C;AAC1CL,MAAAA,SAAS,CAACM,OAAV,CAAkBD,OAAlB,IAA6BD,YAA7B;AACD,KANgC,CAM/B;;;AAGF,QAAII,KAAK,GAAGR,SAAS,CAACM,OAAV,CAAkBD,OAAlB,CAAZ;;AAEA,aAASI,QAAT,CAAkBC,GAAlB,EAAuB;AACrBV,MAAAA,SAAS,CAACM,OAAV,CAAkBD,OAAlB,IAA6B,OAAOK,GAAP,KAAe,UAAf,GAA4BA,GAAG,CAACV,SAAS,CAACM,OAAV,CAAkBD,OAAlB,CAAD,CAA/B,GAA8DK,GAA3F;AACAhB,MAAAA,GAAG,CAACiB,MAAJ,CAAWT,aAAX,EAFqB,CAEM;;AAE3BA,MAAAA,aAAa,GAAGR,GAAG,CAAC,YAAY;AAC9BK,QAAAA,WAAW,CAAC,EAAD,EAAK,IAAL,CAAX;AACD,OAFkB,CAAnB;AAGD;;AAED,WAAO,CAACS,KAAD,EAAQC,QAAR,CAAP;AACD;;AAED,SAAON,WAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef } from 'react';\nimport raf from \"rc-util/es/raf\";\nimport useState from \"rc-util/es/hooks/useState\";\n/**\n * State generate. Return a `setState` but it will flush all state with one render to save perf.\n * This is not a realization of `unstable_batchedUpdates`.\n */\n\nexport function useBatchFrameState() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      forceUpdate = _useState2[1];\n\n  var statesRef = useRef([]);\n  var walkingIndex = 0;\n  var beforeFrameId = 0;\n\n  function createState(defaultValue) {\n    var myIndex = walkingIndex;\n    walkingIndex += 1; // Fill value if not exist yet\n\n    if (statesRef.current.length < myIndex + 1) {\n      statesRef.current[myIndex] = defaultValue;\n    } // Return filled as `setState`\n\n\n    var value = statesRef.current[myIndex];\n\n    function setValue(val) {\n      statesRef.current[myIndex] = typeof val === 'function' ? val(statesRef.current[myIndex]) : val;\n      raf.cancel(beforeFrameId); // Flush with batch\n\n      beforeFrameId = raf(function () {\n        forceUpdate({}, true);\n      });\n    }\n\n    return [value, setValue];\n  }\n\n  return createState;\n}"]},"metadata":{},"sourceType":"module"}