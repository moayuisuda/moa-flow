{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Shape } from '@antv/g';\nimport { singleton } from 'mana-syringe';\nimport { isNil } from 'lodash-es';\nimport { StyleRenderer } from './interfaces';\n\nvar DefaultRenderer =\n/** @class */\nfunction () {\n  function DefaultRenderer() {}\n\n  DefaultRenderer.prototype.hash = function (parsedStyle) {\n    // const { fill, opacity, fillOpacity, stroke, strokeOpacity, lineWidth, lineCap, lineJoin } =\n    //   parsedStyle;\n    // return fill + opacity + fillOpacity + stroke + strokeOpacity + lineWidth + lineCap + lineJoin;\n    return '';\n  };\n\n  DefaultRenderer.prototype.render = function (context, parsedStyle) {\n    var fill = parsedStyle.fill,\n        opacity = parsedStyle.opacity,\n        fillOpacity = parsedStyle.fillOpacity,\n        stroke = parsedStyle.stroke,\n        strokeOpacity = parsedStyle.strokeOpacity,\n        lineWidth = parsedStyle.lineWidth,\n        lineCap = parsedStyle.lineCap,\n        lineJoin = parsedStyle.lineJoin,\n        shadowColor = parsedStyle.shadowColor,\n        filter = parsedStyle.filter,\n        miterLimit = parsedStyle.miterLimit;\n    var hasFill = !isNil(fill);\n    var hasStroke = !isNil(stroke);\n    var isFillTransparent = fill.alpha === 0;\n\n    if (hasFill) {\n      if (!isNil(fillOpacity) && fillOpacity.value !== 1) {\n        context.globalAlpha = fillOpacity.value;\n        context.fill();\n        context.globalAlpha = opacity.value;\n      } else {\n        context.fill();\n      }\n    }\n\n    if (hasStroke) {\n      if (lineWidth && lineWidth.value > 0) {\n        var applyOpacity = !isNil(strokeOpacity) && strokeOpacity.value !== 1;\n\n        if (applyOpacity) {\n          context.globalAlpha = strokeOpacity.value;\n        }\n\n        context.lineWidth = lineWidth.value;\n\n        if (!isNil(miterLimit)) {\n          context.miterLimit = miterLimit;\n        }\n\n        if (!isNil(lineCap)) {\n          context.lineCap = lineCap.value;\n        }\n\n        if (!isNil(lineJoin)) {\n          context.lineJoin = lineJoin.value;\n        }\n\n        var oldShadowBlur = void 0;\n        var oldShadowColor = void 0;\n        var oldFilter = void 0;\n        var hasShadowColor = !isNil(shadowColor);\n        var hasFilter = !isNil(filter);\n\n        if (hasShadowColor) {\n          // prevent inner shadow when drawing stroke, toggle shadowBlur & filter(drop-shadow)\n          // save shadow blur\n          oldShadowBlur = context.shadowBlur;\n          oldShadowColor = context.shadowColor;\n\n          if (!isNil(oldShadowBlur)) {\n            context.shadowColor = 'transparent';\n            context.shadowBlur = 0;\n          }\n        }\n\n        if (hasFilter) {\n          // save drop-shadow filter\n          oldFilter = context.filter;\n\n          if (!isNil(oldFilter) && oldFilter.indexOf('drop-shadow') > -1) {\n            context.filter = oldFilter.replace(/drop-shadow\\([^)]*\\)/, '').trim() || 'none';\n          }\n        }\n\n        var drawStroke = hasFill && !isFillTransparent;\n\n        if (drawStroke) {\n          context.stroke();\n        } // restore shadow blur\n\n\n        if (hasShadowColor) {\n          context.shadowColor = oldShadowColor;\n          context.shadowBlur = oldShadowBlur;\n        } // restore filters\n\n\n        if (hasFilter) {\n          context.filter = oldFilter;\n        }\n\n        if (!drawStroke) {\n          context.stroke();\n        }\n      }\n    }\n  };\n\n  DefaultRenderer = __decorate([singleton({\n    token: [{\n      token: StyleRenderer,\n      named: Shape.CIRCLE\n    }, {\n      token: StyleRenderer,\n      named: Shape.ELLIPSE\n    }, {\n      token: StyleRenderer,\n      named: Shape.RECT\n    }, {\n      token: StyleRenderer,\n      named: Shape.LINE\n    }, {\n      token: StyleRenderer,\n      named: Shape.POLYLINE\n    }, {\n      token: StyleRenderer,\n      named: Shape.POLYGON\n    }, {\n      token: StyleRenderer,\n      named: Shape.PATH\n    }]\n  })], DefaultRenderer);\n  return DefaultRenderer;\n}();\n\nexport { DefaultRenderer };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g-plugin-canvas-renderer/es/shapes/styles/Default.js"],"names":["__decorate","Shape","singleton","isNil","StyleRenderer","DefaultRenderer","prototype","hash","parsedStyle","render","context","fill","opacity","fillOpacity","stroke","strokeOpacity","lineWidth","lineCap","lineJoin","shadowColor","filter","miterLimit","hasFill","hasStroke","isFillTransparent","alpha","value","globalAlpha","applyOpacity","oldShadowBlur","oldShadowColor","oldFilter","hasShadowColor","hasFilter","shadowBlur","indexOf","replace","trim","drawStroke","token","named","CIRCLE","ELLIPSE","RECT","LINE","POLYLINE","POLYGON","PATH"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,aAAT,QAA8B,cAA9B;;AAEA,IAAIC,eAAe;AACnB;AACA,YAAY;AACV,WAASA,eAAT,GAA2B,CAAE;;AAE7BA,EAAAA,eAAe,CAACC,SAAhB,CAA0BC,IAA1B,GAAiC,UAAUC,WAAV,EAAuB;AACtD;AACA;AACA;AACA,WAAO,EAAP;AACD,GALD;;AAOAH,EAAAA,eAAe,CAACC,SAAhB,CAA0BG,MAA1B,GAAmC,UAAUC,OAAV,EAAmBF,WAAnB,EAAgC;AACjE,QAAIG,IAAI,GAAGH,WAAW,CAACG,IAAvB;AAAA,QACIC,OAAO,GAAGJ,WAAW,CAACI,OAD1B;AAAA,QAEIC,WAAW,GAAGL,WAAW,CAACK,WAF9B;AAAA,QAGIC,MAAM,GAAGN,WAAW,CAACM,MAHzB;AAAA,QAIIC,aAAa,GAAGP,WAAW,CAACO,aAJhC;AAAA,QAKIC,SAAS,GAAGR,WAAW,CAACQ,SAL5B;AAAA,QAMIC,OAAO,GAAGT,WAAW,CAACS,OAN1B;AAAA,QAOIC,QAAQ,GAAGV,WAAW,CAACU,QAP3B;AAAA,QAQIC,WAAW,GAAGX,WAAW,CAACW,WAR9B;AAAA,QASIC,MAAM,GAAGZ,WAAW,CAACY,MATzB;AAAA,QAUIC,UAAU,GAAGb,WAAW,CAACa,UAV7B;AAWA,QAAIC,OAAO,GAAG,CAACnB,KAAK,CAACQ,IAAD,CAApB;AACA,QAAIY,SAAS,GAAG,CAACpB,KAAK,CAACW,MAAD,CAAtB;AACA,QAAIU,iBAAiB,GAAGb,IAAI,CAACc,KAAL,KAAe,CAAvC;;AAEA,QAAIH,OAAJ,EAAa;AACX,UAAI,CAACnB,KAAK,CAACU,WAAD,CAAN,IAAuBA,WAAW,CAACa,KAAZ,KAAsB,CAAjD,EAAoD;AAClDhB,QAAAA,OAAO,CAACiB,WAAR,GAAsBd,WAAW,CAACa,KAAlC;AACAhB,QAAAA,OAAO,CAACC,IAAR;AACAD,QAAAA,OAAO,CAACiB,WAAR,GAAsBf,OAAO,CAACc,KAA9B;AACD,OAJD,MAIO;AACLhB,QAAAA,OAAO,CAACC,IAAR;AACD;AACF;;AAED,QAAIY,SAAJ,EAAe;AACb,UAAIP,SAAS,IAAIA,SAAS,CAACU,KAAV,GAAkB,CAAnC,EAAsC;AACpC,YAAIE,YAAY,GAAG,CAACzB,KAAK,CAACY,aAAD,CAAN,IAAyBA,aAAa,CAACW,KAAd,KAAwB,CAApE;;AAEA,YAAIE,YAAJ,EAAkB;AAChBlB,UAAAA,OAAO,CAACiB,WAAR,GAAsBZ,aAAa,CAACW,KAApC;AACD;;AAEDhB,QAAAA,OAAO,CAACM,SAAR,GAAoBA,SAAS,CAACU,KAA9B;;AAEA,YAAI,CAACvB,KAAK,CAACkB,UAAD,CAAV,EAAwB;AACtBX,UAAAA,OAAO,CAACW,UAAR,GAAqBA,UAArB;AACD;;AAED,YAAI,CAAClB,KAAK,CAACc,OAAD,CAAV,EAAqB;AACnBP,UAAAA,OAAO,CAACO,OAAR,GAAkBA,OAAO,CAACS,KAA1B;AACD;;AAED,YAAI,CAACvB,KAAK,CAACe,QAAD,CAAV,EAAsB;AACpBR,UAAAA,OAAO,CAACQ,QAAR,GAAmBA,QAAQ,CAACQ,KAA5B;AACD;;AAED,YAAIG,aAAa,GAAG,KAAK,CAAzB;AACA,YAAIC,cAAc,GAAG,KAAK,CAA1B;AACA,YAAIC,SAAS,GAAG,KAAK,CAArB;AACA,YAAIC,cAAc,GAAG,CAAC7B,KAAK,CAACgB,WAAD,CAA3B;AACA,YAAIc,SAAS,GAAG,CAAC9B,KAAK,CAACiB,MAAD,CAAtB;;AAEA,YAAIY,cAAJ,EAAoB;AAClB;AACA;AACAH,UAAAA,aAAa,GAAGnB,OAAO,CAACwB,UAAxB;AACAJ,UAAAA,cAAc,GAAGpB,OAAO,CAACS,WAAzB;;AAEA,cAAI,CAAChB,KAAK,CAAC0B,aAAD,CAAV,EAA2B;AACzBnB,YAAAA,OAAO,CAACS,WAAR,GAAsB,aAAtB;AACAT,YAAAA,OAAO,CAACwB,UAAR,GAAqB,CAArB;AACD;AACF;;AAED,YAAID,SAAJ,EAAe;AACb;AACAF,UAAAA,SAAS,GAAGrB,OAAO,CAACU,MAApB;;AAEA,cAAI,CAACjB,KAAK,CAAC4B,SAAD,CAAN,IAAqBA,SAAS,CAACI,OAAV,CAAkB,aAAlB,IAAmC,CAAC,CAA7D,EAAgE;AAC9DzB,YAAAA,OAAO,CAACU,MAAR,GAAiBW,SAAS,CAACK,OAAV,CAAkB,sBAAlB,EAA0C,EAA1C,EAA8CC,IAA9C,MAAwD,MAAzE;AACD;AACF;;AAED,YAAIC,UAAU,GAAGhB,OAAO,IAAI,CAACE,iBAA7B;;AAEA,YAAIc,UAAJ,EAAgB;AACd5B,UAAAA,OAAO,CAACI,MAAR;AACD,SApDmC,CAoDlC;;;AAGF,YAAIkB,cAAJ,EAAoB;AAClBtB,UAAAA,OAAO,CAACS,WAAR,GAAsBW,cAAtB;AACApB,UAAAA,OAAO,CAACwB,UAAR,GAAqBL,aAArB;AACD,SA1DmC,CA0DlC;;;AAGF,YAAII,SAAJ,EAAe;AACbvB,UAAAA,OAAO,CAACU,MAAR,GAAiBW,SAAjB;AACD;;AAED,YAAI,CAACO,UAAL,EAAiB;AACf5B,UAAAA,OAAO,CAACI,MAAR;AACD;AACF;AACF;AACF,GAjGD;;AAmGAT,EAAAA,eAAe,GAAGL,UAAU,CAAC,CAACE,SAAS,CAAC;AACtCqC,IAAAA,KAAK,EAAE,CAAC;AACNA,MAAAA,KAAK,EAAEnC,aADD;AAENoC,MAAAA,KAAK,EAAEvC,KAAK,CAACwC;AAFP,KAAD,EAGJ;AACDF,MAAAA,KAAK,EAAEnC,aADN;AAEDoC,MAAAA,KAAK,EAAEvC,KAAK,CAACyC;AAFZ,KAHI,EAMJ;AACDH,MAAAA,KAAK,EAAEnC,aADN;AAEDoC,MAAAA,KAAK,EAAEvC,KAAK,CAAC0C;AAFZ,KANI,EASJ;AACDJ,MAAAA,KAAK,EAAEnC,aADN;AAEDoC,MAAAA,KAAK,EAAEvC,KAAK,CAAC2C;AAFZ,KATI,EAYJ;AACDL,MAAAA,KAAK,EAAEnC,aADN;AAEDoC,MAAAA,KAAK,EAAEvC,KAAK,CAAC4C;AAFZ,KAZI,EAeJ;AACDN,MAAAA,KAAK,EAAEnC,aADN;AAEDoC,MAAAA,KAAK,EAAEvC,KAAK,CAAC6C;AAFZ,KAfI,EAkBJ;AACDP,MAAAA,KAAK,EAAEnC,aADN;AAEDoC,MAAAA,KAAK,EAAEvC,KAAK,CAAC8C;AAFZ,KAlBI;AAD+B,GAAD,CAAV,CAAD,EAuBvB1C,eAvBuB,CAA5B;AAwBA,SAAOA,eAAP;AACD,CAtID,EAFA;;AA0IA,SAASA,eAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Shape } from '@antv/g';\nimport { singleton } from 'mana-syringe';\nimport { isNil } from 'lodash-es';\nimport { StyleRenderer } from './interfaces';\n\nvar DefaultRenderer =\n/** @class */\nfunction () {\n  function DefaultRenderer() {}\n\n  DefaultRenderer.prototype.hash = function (parsedStyle) {\n    // const { fill, opacity, fillOpacity, stroke, strokeOpacity, lineWidth, lineCap, lineJoin } =\n    //   parsedStyle;\n    // return fill + opacity + fillOpacity + stroke + strokeOpacity + lineWidth + lineCap + lineJoin;\n    return '';\n  };\n\n  DefaultRenderer.prototype.render = function (context, parsedStyle) {\n    var fill = parsedStyle.fill,\n        opacity = parsedStyle.opacity,\n        fillOpacity = parsedStyle.fillOpacity,\n        stroke = parsedStyle.stroke,\n        strokeOpacity = parsedStyle.strokeOpacity,\n        lineWidth = parsedStyle.lineWidth,\n        lineCap = parsedStyle.lineCap,\n        lineJoin = parsedStyle.lineJoin,\n        shadowColor = parsedStyle.shadowColor,\n        filter = parsedStyle.filter,\n        miterLimit = parsedStyle.miterLimit;\n    var hasFill = !isNil(fill);\n    var hasStroke = !isNil(stroke);\n    var isFillTransparent = fill.alpha === 0;\n\n    if (hasFill) {\n      if (!isNil(fillOpacity) && fillOpacity.value !== 1) {\n        context.globalAlpha = fillOpacity.value;\n        context.fill();\n        context.globalAlpha = opacity.value;\n      } else {\n        context.fill();\n      }\n    }\n\n    if (hasStroke) {\n      if (lineWidth && lineWidth.value > 0) {\n        var applyOpacity = !isNil(strokeOpacity) && strokeOpacity.value !== 1;\n\n        if (applyOpacity) {\n          context.globalAlpha = strokeOpacity.value;\n        }\n\n        context.lineWidth = lineWidth.value;\n\n        if (!isNil(miterLimit)) {\n          context.miterLimit = miterLimit;\n        }\n\n        if (!isNil(lineCap)) {\n          context.lineCap = lineCap.value;\n        }\n\n        if (!isNil(lineJoin)) {\n          context.lineJoin = lineJoin.value;\n        }\n\n        var oldShadowBlur = void 0;\n        var oldShadowColor = void 0;\n        var oldFilter = void 0;\n        var hasShadowColor = !isNil(shadowColor);\n        var hasFilter = !isNil(filter);\n\n        if (hasShadowColor) {\n          // prevent inner shadow when drawing stroke, toggle shadowBlur & filter(drop-shadow)\n          // save shadow blur\n          oldShadowBlur = context.shadowBlur;\n          oldShadowColor = context.shadowColor;\n\n          if (!isNil(oldShadowBlur)) {\n            context.shadowColor = 'transparent';\n            context.shadowBlur = 0;\n          }\n        }\n\n        if (hasFilter) {\n          // save drop-shadow filter\n          oldFilter = context.filter;\n\n          if (!isNil(oldFilter) && oldFilter.indexOf('drop-shadow') > -1) {\n            context.filter = oldFilter.replace(/drop-shadow\\([^)]*\\)/, '').trim() || 'none';\n          }\n        }\n\n        var drawStroke = hasFill && !isFillTransparent;\n\n        if (drawStroke) {\n          context.stroke();\n        } // restore shadow blur\n\n\n        if (hasShadowColor) {\n          context.shadowColor = oldShadowColor;\n          context.shadowBlur = oldShadowBlur;\n        } // restore filters\n\n\n        if (hasFilter) {\n          context.filter = oldFilter;\n        }\n\n        if (!drawStroke) {\n          context.stroke();\n        }\n      }\n    }\n  };\n\n  DefaultRenderer = __decorate([singleton({\n    token: [{\n      token: StyleRenderer,\n      named: Shape.CIRCLE\n    }, {\n      token: StyleRenderer,\n      named: Shape.ELLIPSE\n    }, {\n      token: StyleRenderer,\n      named: Shape.RECT\n    }, {\n      token: StyleRenderer,\n      named: Shape.LINE\n    }, {\n      token: StyleRenderer,\n      named: Shape.POLYLINE\n    }, {\n      token: StyleRenderer,\n      named: Shape.POLYGON\n    }, {\n      token: StyleRenderer,\n      named: Shape.PATH\n    }]\n  })], DefaultRenderer);\n  return DefaultRenderer;\n}();\n\nexport { DefaultRenderer };"]},"metadata":{},"sourceType":"module"}