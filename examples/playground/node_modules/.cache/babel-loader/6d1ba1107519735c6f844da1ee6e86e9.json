{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\n/**\n * implements morph animation with cubic splitting\n * @see http://thednp.github.io/kute.js/svgCubicMorph.html\n */\n\nimport { Cubic as CubicUtil } from '@antv/g-math';\nimport { vec3 } from 'gl-matrix';\nimport { Shape } from '../types';\n\nfunction midPoint(a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var bx = b[0];\n  var by = b[1];\n  return [ax + (bx - ax) * t, ay + (by - ay) * t];\n}\n\nfunction splitCubic(pts, t) {\n  if (t === void 0) {\n    t = 0.5;\n  }\n\n  var p0 = pts.slice(0, 2);\n  var p1 = pts.slice(2, 4);\n  var p2 = pts.slice(4, 6);\n  var p3 = pts.slice(6, 8);\n  var p4 = midPoint(p0, p1, t);\n  var p5 = midPoint(p1, p2, t);\n  var p6 = midPoint(p2, p3, t);\n  var p7 = midPoint(p4, p5, t);\n  var p8 = midPoint(p5, p6, t);\n  var p9 = midPoint(p7, p8, t);\n  return [// @ts-ignore\n  ['C'].concat(p4, p7, p9), // @ts-ignore\n  ['C'].concat(p8, p6, p3)];\n}\n\nfunction getCurveArray(segments) {\n  return segments.map(function (segment, i, pathArray) {\n    // @ts-ignore\n    var segmentData = i && pathArray[i - 1].slice(-2).concat(segment.slice(1)); // @ts-ignore\n\n    var curveLength = i ? CubicUtil.length.apply(CubicUtil, __spreadArray([], __read(segmentData), false)) : 0;\n    var subsegs;\n\n    if (i) {\n      // must be [segment,segment]\n      subsegs = curveLength ? splitCubic(segmentData) : [segment, segment];\n    } else {\n      subsegs = [segment];\n    }\n\n    return {\n      s: segment,\n      ss: subsegs,\n      l: curveLength\n    };\n  });\n}\n\nexport function equalizeSegments(path1, path2, TL) {\n  var c1 = getCurveArray(path1);\n  var c2 = getCurveArray(path2);\n  var L1 = c1.length;\n  var L2 = c2.length;\n  var l1 = c1.filter(function (x) {\n    return x.l;\n  }).length;\n  var l2 = c2.filter(function (x) {\n    return x.l;\n  }).length;\n  var m1 = c1.filter(function (x) {\n    return x.l;\n  }).reduce(function (a, _a) {\n    var l = _a.l;\n    return a + l;\n  }, 0) / l1 || 0;\n  var m2 = c2.filter(function (x) {\n    return x.l;\n  }).reduce(function (a, _a) {\n    var l = _a.l;\n    return a + l;\n  }, 0) / l2 || 0;\n  var tl = TL || Math.max(L1, L2);\n  var mm = [m1, m2];\n  var dif = [tl - L1, tl - L2];\n  var canSplit = 0;\n  var result = [c1, c2].map(function (x, i) {\n    // @ts-ignore\n    return x.l === tl ? x.map(function (y) {\n      return y.s;\n    }) : x.map(function (y, j) {\n      canSplit = j && dif[i] && y.l >= mm[i];\n      dif[i] -= canSplit ? 1 : 0;\n      return canSplit ? y.ss : [y.s];\n    }).flat();\n  });\n  return result[0].length === result[1].length ? result : equalizeSegments(result[0], result[1], tl);\n}\nexport function getDrawDirection(pathArray) {\n  return getPathArea(pathArray) >= 0;\n}\n\nfunction getCubicSegArea(x0, y0, x1, y1, x2, y2, x3, y3) {\n  // https://stackoverflow.com/a/15845996\n  return 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2) + y1 * (x0 - x2) - x1 * (y0 - y2) + y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;\n}\n\nexport function getPathArea(pathArray) {\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  var len = 0;\n  return pathArray.map(function (seg) {\n    var _a;\n\n    switch (seg[0]) {\n      case 'M':\n      case 'Z':\n        mx = seg[0] === 'M' ? seg[1] : mx;\n        my = seg[0] === 'M' ? seg[2] : my;\n        x = mx;\n        y = my;\n        return 0;\n\n      default:\n        // @ts-ignore\n        len = getCubicSegArea.apply(0, [x, y].concat(seg.slice(1)));\n        _a = __read(seg.slice(-2), 2), x = _a[0], y = _a[1];\n        return len;\n    }\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n} // reverse CURVE based pathArray segments only\n\nexport function reverseCurve(pathArray) {\n  var rotatedCurve = pathArray.slice(1).map(function (x, i, curveOnly) {\n    // @ts-ignore\n    return !i ? pathArray[0].slice(1).concat(x.slice(1)) : curveOnly[i - 1].slice(-2).concat(x.slice(1));\n  }) // @ts-ignore\n  .map(function (x) {\n    return x.map(function (y, i) {\n      return x[x.length - i - 2 * (1 - i % 2)];\n    });\n  }).reverse(); // @ts-ignore\n\n  return [['M'].concat(rotatedCurve[0].slice(0, 2))].concat(rotatedCurve.map(function (x) {\n    return ['C'].concat(x.slice(2));\n  }));\n}\nexport function clonePath(pathArray) {\n  // @ts-ignore\n  return pathArray.map(function (x) {\n    if (Array.isArray(x)) {\n      // @ts-ignore\n      return clonePath(x);\n    }\n\n    return !Number.isNaN(+x) ? +x : x;\n  });\n}\n\nfunction getRotations(a) {\n  var segCount = a.length;\n  var pointCount = segCount - 1;\n  return a.map(function (f, idx) {\n    return a.map(function (p, i) {\n      var oldSegIdx = idx + i;\n      var seg;\n\n      if (i === 0 || a[oldSegIdx] && a[oldSegIdx][0] === 'M') {\n        seg = a[oldSegIdx]; // @ts-ignore\n\n        return ['M'].concat(seg.slice(-2));\n      }\n\n      if (oldSegIdx >= segCount) oldSegIdx -= pointCount;\n      return a[oldSegIdx];\n    });\n  });\n}\n\nfunction distanceSquareRoot(a, b) {\n  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\n}\n\nexport function getRotatedCurve(a, b) {\n  var segCount = a.length - 1;\n  var lineLengths = [];\n  var computedIndex = 0;\n  var sumLensSqrd = 0;\n  var rotations = getRotations(a);\n  rotations.forEach(function (r, i) {\n    a.slice(1).forEach(function (s, j) {\n      // @ts-ignore\n      sumLensSqrd += distanceSquareRoot(a[(i + j) % segCount].slice(-2), b[j % segCount].slice(-2));\n    });\n    lineLengths[i] = sumLensSqrd;\n    sumLensSqrd = 0;\n  });\n  computedIndex = lineLengths.indexOf(Math.min.apply(null, lineLengths));\n  return rotations[computedIndex];\n}\n\nfunction commandsToPathString(commands, localTransform, anchor, parsedStyle) {\n  var _a = parsedStyle.defX,\n      defX = _a === void 0 ? 0 : _a,\n      _b = parsedStyle.defY,\n      defY = _b === void 0 ? 0 : _b;\n  return commands.reduce(function (prev, cur) {\n    var path = '';\n\n    if (cur[0] === 'M' || cur[0] === 'L') {\n      var p = vec3.fromValues(cur[1] - defX, cur[2] - defY, 0);\n      vec3.transformMat4(p, p, localTransform);\n      path = \"\".concat(cur[0]).concat(p[0], \",\").concat(p[1]);\n    } else if (cur[0] === 'Z') {\n      path = cur[0];\n    } else if (cur[0] === 'C') {\n      var p1 = vec3.fromValues(cur[1] - defX, cur[2] - defY, 0);\n      var p2 = vec3.fromValues(cur[3] - defX, cur[4] - defY, 0);\n      var p3 = vec3.fromValues(cur[5] - defX, cur[6] - defY, 0);\n      vec3.transformMat4(p1, p1, localTransform);\n      vec3.transformMat4(p2, p2, localTransform);\n      vec3.transformMat4(p3, p3, localTransform);\n      path = \"\".concat(cur[0]).concat(p1[0], \",\").concat(p1[1], \",\").concat(p2[0], \",\").concat(p2[1], \",\").concat(p3[0], \",\").concat(p3[1]);\n    } else if (cur[0] === 'A') {\n      var c = vec3.fromValues(cur[6] - defX, cur[7] - defY, 0);\n      vec3.transformMat4(c, c, localTransform);\n      path = \"\".concat(cur[0]).concat(cur[1], \",\").concat(cur[2], \",\").concat(cur[3], \",\").concat(cur[4], \",\").concat(cur[5], \",\").concat(c[0], \",\").concat(c[1]);\n    }\n\n    return prev += path;\n  }, '');\n}\n\nfunction lineToCommands(x1, y1, x2, y2) {\n  return [['M', x1, y1], ['L', x2, y2]];\n}\n\nfunction ellipseToCommands(rx, ry, cx, cy) {\n  var factor = (-1 + Math.sqrt(2)) / 3 * 4;\n  var dx = rx * factor;\n  var dy = ry * factor;\n  var left = cx - rx;\n  var right = cx + rx;\n  var top = cy - ry;\n  var bottom = cy + ry;\n  return [['M', left, cy], ['C', left, cy - dy, cx - dx, top, cx, top], ['C', cx + dx, top, right, cy - dy, right, cy], ['C', right, cy + dy, cx + dx, bottom, cx, bottom], ['C', cx - dx, bottom, left, cy + dy, left, cy], ['Z']];\n}\n\nfunction polygonToCommands(points) {\n  return points.map(function (point, i) {\n    return [i === 0 ? 'M' : 'L', point[0], point[1]];\n  });\n}\n\nfunction rectToCommands(width, height, x, y, radius) {\n  // @see https://gist.github.com/danielpquinn/dd966af424030d47e476\n  if (radius) {\n    return [['M', x, radius + y], ['A', radius, radius, 0, 0, 1, radius + x, y], ['L', width - radius + x, y], ['A', radius, radius, 0, 0, 1, width + x, radius + y], ['L', width + x, height - radius + y], ['A', radius, radius, 0, 0, 1, width - radius + x, height + y], ['L', radius + x, height + y], ['A', radius, radius, 0, 0, 1, x, height - radius + y], ['Z']];\n  }\n\n  return [['M', x, y], ['L', x + width, y], ['L', x + width, y + height], ['L', x, y + height], ['Z']];\n}\n/**\n * convert object to path, should account for:\n * * transform & origin\n * * anchor\n * * lineWidth\n */\n\n\nexport function convertToPath(object) {\n  var localTransform = object.getLocalTransform();\n  var anchor = object.style.anchor;\n  var commands = [];\n\n  switch (object.nodeName) {\n    case Shape.LINE:\n      var _a = object.parsedStyle,\n          x1 = _a.x1,\n          y1 = _a.y1,\n          x2 = _a.x2,\n          y2 = _a.y2;\n      commands = lineToCommands(x1.value, y1.value, x2.value, y2.value);\n      break;\n\n    case Shape.CIRCLE:\n      {\n        var _b = object.parsedStyle,\n            r = _b.r,\n            x_1 = _b.x,\n            y_1 = _b.y;\n        commands = ellipseToCommands(r.value, r.value, x_1.value, y_1.value);\n        break;\n      }\n\n    case Shape.ELLIPSE:\n      {\n        var _c = object.parsedStyle,\n            rx = _c.rx,\n            ry = _c.ry,\n            x_2 = _c.x,\n            y_2 = _c.y;\n        commands = ellipseToCommands(rx.value, ry.value, x_2.value, y_2.value);\n        break;\n      }\n\n    case Shape.POLYLINE:\n    case Shape.POLYGON:\n      var points = object.parsedStyle.points;\n      commands = polygonToCommands(points.points);\n      break;\n\n    case Shape.RECT:\n      var _d = object.parsedStyle,\n          width = _d.width,\n          height = _d.height,\n          x = _d.x,\n          y = _d.y,\n          radius = _d.radius;\n      commands = rectToCommands(width.value, height.value, x.value, y.value, (radius === null || radius === void 0 ? void 0 : radius.value) || 0);\n      break;\n\n    case Shape.PATH:\n      commands = object.parsedStyle.path.curve;\n      break;\n  }\n\n  if (commands.length) {\n    return commandsToPathString(commands, localTransform, anchor, object.parsedStyle);\n  }\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/utils/path.js"],"names":["__read","__spreadArray","Cubic","CubicUtil","vec3","Shape","midPoint","a","b","t","ax","ay","bx","by","splitCubic","pts","p0","slice","p1","p2","p3","p4","p5","p6","p7","p8","p9","concat","getCurveArray","segments","map","segment","i","pathArray","segmentData","curveLength","length","apply","subsegs","s","ss","l","equalizeSegments","path1","path2","TL","c1","c2","L1","L2","l1","filter","x","l2","m1","reduce","_a","m2","tl","Math","max","mm","dif","canSplit","result","y","j","flat","getDrawDirection","getPathArea","getCubicSegArea","x0","y0","x1","y1","x2","y2","x3","y3","mx","my","len","seg","reverseCurve","rotatedCurve","curveOnly","reverse","clonePath","Array","isArray","Number","isNaN","getRotations","segCount","pointCount","f","idx","p","oldSegIdx","distanceSquareRoot","sqrt","getRotatedCurve","lineLengths","computedIndex","sumLensSqrd","rotations","forEach","r","indexOf","min","commandsToPathString","commands","localTransform","anchor","parsedStyle","defX","_b","defY","prev","cur","path","fromValues","transformMat4","c","lineToCommands","ellipseToCommands","rx","ry","cx","cy","factor","dx","dy","left","right","top","bottom","polygonToCommands","points","point","rectToCommands","width","height","radius","convertToPath","object","getLocalTransform","style","nodeName","LINE","value","CIRCLE","x_1","y_1","ELLIPSE","_c","x_2","y_2","POLYLINE","POLYGON","RECT","_d","PATH","curve"],"mappings":"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","sourcesContent":["import { __read, __spreadArray } from \"tslib\";\n/**\n * implements morph animation with cubic splitting\n * @see http://thednp.github.io/kute.js/svgCubicMorph.html\n */\n\nimport { Cubic as CubicUtil } from '@antv/g-math';\nimport { vec3 } from 'gl-matrix';\nimport { Shape } from '../types';\n\nfunction midPoint(a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var bx = b[0];\n  var by = b[1];\n  return [ax + (bx - ax) * t, ay + (by - ay) * t];\n}\n\nfunction splitCubic(pts, t) {\n  if (t === void 0) {\n    t = 0.5;\n  }\n\n  var p0 = pts.slice(0, 2);\n  var p1 = pts.slice(2, 4);\n  var p2 = pts.slice(4, 6);\n  var p3 = pts.slice(6, 8);\n  var p4 = midPoint(p0, p1, t);\n  var p5 = midPoint(p1, p2, t);\n  var p6 = midPoint(p2, p3, t);\n  var p7 = midPoint(p4, p5, t);\n  var p8 = midPoint(p5, p6, t);\n  var p9 = midPoint(p7, p8, t);\n  return [// @ts-ignore\n  ['C'].concat(p4, p7, p9), // @ts-ignore\n  ['C'].concat(p8, p6, p3)];\n}\n\nfunction getCurveArray(segments) {\n  return segments.map(function (segment, i, pathArray) {\n    // @ts-ignore\n    var segmentData = i && pathArray[i - 1].slice(-2).concat(segment.slice(1)); // @ts-ignore\n\n    var curveLength = i ? CubicUtil.length.apply(CubicUtil, __spreadArray([], __read(segmentData), false)) : 0;\n    var subsegs;\n\n    if (i) {\n      // must be [segment,segment]\n      subsegs = curveLength ? splitCubic(segmentData) : [segment, segment];\n    } else {\n      subsegs = [segment];\n    }\n\n    return {\n      s: segment,\n      ss: subsegs,\n      l: curveLength\n    };\n  });\n}\n\nexport function equalizeSegments(path1, path2, TL) {\n  var c1 = getCurveArray(path1);\n  var c2 = getCurveArray(path2);\n  var L1 = c1.length;\n  var L2 = c2.length;\n  var l1 = c1.filter(function (x) {\n    return x.l;\n  }).length;\n  var l2 = c2.filter(function (x) {\n    return x.l;\n  }).length;\n  var m1 = c1.filter(function (x) {\n    return x.l;\n  }).reduce(function (a, _a) {\n    var l = _a.l;\n    return a + l;\n  }, 0) / l1 || 0;\n  var m2 = c2.filter(function (x) {\n    return x.l;\n  }).reduce(function (a, _a) {\n    var l = _a.l;\n    return a + l;\n  }, 0) / l2 || 0;\n  var tl = TL || Math.max(L1, L2);\n  var mm = [m1, m2];\n  var dif = [tl - L1, tl - L2];\n  var canSplit = 0;\n  var result = [c1, c2].map(function (x, i) {\n    // @ts-ignore\n    return x.l === tl ? x.map(function (y) {\n      return y.s;\n    }) : x.map(function (y, j) {\n      canSplit = j && dif[i] && y.l >= mm[i];\n      dif[i] -= canSplit ? 1 : 0;\n      return canSplit ? y.ss : [y.s];\n    }).flat();\n  });\n  return result[0].length === result[1].length ? result : equalizeSegments(result[0], result[1], tl);\n}\nexport function getDrawDirection(pathArray) {\n  return getPathArea(pathArray) >= 0;\n}\n\nfunction getCubicSegArea(x0, y0, x1, y1, x2, y2, x3, y3) {\n  // https://stackoverflow.com/a/15845996\n  return 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2) + y1 * (x0 - x2) - x1 * (y0 - y2) + y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;\n}\n\nexport function getPathArea(pathArray) {\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  var len = 0;\n  return pathArray.map(function (seg) {\n    var _a;\n\n    switch (seg[0]) {\n      case 'M':\n      case 'Z':\n        mx = seg[0] === 'M' ? seg[1] : mx;\n        my = seg[0] === 'M' ? seg[2] : my;\n        x = mx;\n        y = my;\n        return 0;\n\n      default:\n        // @ts-ignore\n        len = getCubicSegArea.apply(0, [x, y].concat(seg.slice(1)));\n        _a = __read(seg.slice(-2), 2), x = _a[0], y = _a[1];\n        return len;\n    }\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n} // reverse CURVE based pathArray segments only\n\nexport function reverseCurve(pathArray) {\n  var rotatedCurve = pathArray.slice(1).map(function (x, i, curveOnly) {\n    // @ts-ignore\n    return !i ? pathArray[0].slice(1).concat(x.slice(1)) : curveOnly[i - 1].slice(-2).concat(x.slice(1));\n  }) // @ts-ignore\n  .map(function (x) {\n    return x.map(function (y, i) {\n      return x[x.length - i - 2 * (1 - i % 2)];\n    });\n  }).reverse(); // @ts-ignore\n\n  return [['M'].concat(rotatedCurve[0].slice(0, 2))].concat(rotatedCurve.map(function (x) {\n    return ['C'].concat(x.slice(2));\n  }));\n}\nexport function clonePath(pathArray) {\n  // @ts-ignore\n  return pathArray.map(function (x) {\n    if (Array.isArray(x)) {\n      // @ts-ignore\n      return clonePath(x);\n    }\n\n    return !Number.isNaN(+x) ? +x : x;\n  });\n}\n\nfunction getRotations(a) {\n  var segCount = a.length;\n  var pointCount = segCount - 1;\n  return a.map(function (f, idx) {\n    return a.map(function (p, i) {\n      var oldSegIdx = idx + i;\n      var seg;\n\n      if (i === 0 || a[oldSegIdx] && a[oldSegIdx][0] === 'M') {\n        seg = a[oldSegIdx]; // @ts-ignore\n\n        return ['M'].concat(seg.slice(-2));\n      }\n\n      if (oldSegIdx >= segCount) oldSegIdx -= pointCount;\n      return a[oldSegIdx];\n    });\n  });\n}\n\nfunction distanceSquareRoot(a, b) {\n  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\n}\n\nexport function getRotatedCurve(a, b) {\n  var segCount = a.length - 1;\n  var lineLengths = [];\n  var computedIndex = 0;\n  var sumLensSqrd = 0;\n  var rotations = getRotations(a);\n  rotations.forEach(function (r, i) {\n    a.slice(1).forEach(function (s, j) {\n      // @ts-ignore\n      sumLensSqrd += distanceSquareRoot(a[(i + j) % segCount].slice(-2), b[j % segCount].slice(-2));\n    });\n    lineLengths[i] = sumLensSqrd;\n    sumLensSqrd = 0;\n  });\n  computedIndex = lineLengths.indexOf(Math.min.apply(null, lineLengths));\n  return rotations[computedIndex];\n}\n\nfunction commandsToPathString(commands, localTransform, anchor, parsedStyle) {\n  var _a = parsedStyle.defX,\n      defX = _a === void 0 ? 0 : _a,\n      _b = parsedStyle.defY,\n      defY = _b === void 0 ? 0 : _b;\n  return commands.reduce(function (prev, cur) {\n    var path = '';\n\n    if (cur[0] === 'M' || cur[0] === 'L') {\n      var p = vec3.fromValues(cur[1] - defX, cur[2] - defY, 0);\n      vec3.transformMat4(p, p, localTransform);\n      path = \"\".concat(cur[0]).concat(p[0], \",\").concat(p[1]);\n    } else if (cur[0] === 'Z') {\n      path = cur[0];\n    } else if (cur[0] === 'C') {\n      var p1 = vec3.fromValues(cur[1] - defX, cur[2] - defY, 0);\n      var p2 = vec3.fromValues(cur[3] - defX, cur[4] - defY, 0);\n      var p3 = vec3.fromValues(cur[5] - defX, cur[6] - defY, 0);\n      vec3.transformMat4(p1, p1, localTransform);\n      vec3.transformMat4(p2, p2, localTransform);\n      vec3.transformMat4(p3, p3, localTransform);\n      path = \"\".concat(cur[0]).concat(p1[0], \",\").concat(p1[1], \",\").concat(p2[0], \",\").concat(p2[1], \",\").concat(p3[0], \",\").concat(p3[1]);\n    } else if (cur[0] === 'A') {\n      var c = vec3.fromValues(cur[6] - defX, cur[7] - defY, 0);\n      vec3.transformMat4(c, c, localTransform);\n      path = \"\".concat(cur[0]).concat(cur[1], \",\").concat(cur[2], \",\").concat(cur[3], \",\").concat(cur[4], \",\").concat(cur[5], \",\").concat(c[0], \",\").concat(c[1]);\n    }\n\n    return prev += path;\n  }, '');\n}\n\nfunction lineToCommands(x1, y1, x2, y2) {\n  return [['M', x1, y1], ['L', x2, y2]];\n}\n\nfunction ellipseToCommands(rx, ry, cx, cy) {\n  var factor = (-1 + Math.sqrt(2)) / 3 * 4;\n  var dx = rx * factor;\n  var dy = ry * factor;\n  var left = cx - rx;\n  var right = cx + rx;\n  var top = cy - ry;\n  var bottom = cy + ry;\n  return [['M', left, cy], ['C', left, cy - dy, cx - dx, top, cx, top], ['C', cx + dx, top, right, cy - dy, right, cy], ['C', right, cy + dy, cx + dx, bottom, cx, bottom], ['C', cx - dx, bottom, left, cy + dy, left, cy], ['Z']];\n}\n\nfunction polygonToCommands(points) {\n  return points.map(function (point, i) {\n    return [i === 0 ? 'M' : 'L', point[0], point[1]];\n  });\n}\n\nfunction rectToCommands(width, height, x, y, radius) {\n  // @see https://gist.github.com/danielpquinn/dd966af424030d47e476\n  if (radius) {\n    return [['M', x, radius + y], ['A', radius, radius, 0, 0, 1, radius + x, y], ['L', width - radius + x, y], ['A', radius, radius, 0, 0, 1, width + x, radius + y], ['L', width + x, height - radius + y], ['A', radius, radius, 0, 0, 1, width - radius + x, height + y], ['L', radius + x, height + y], ['A', radius, radius, 0, 0, 1, x, height - radius + y], ['Z']];\n  }\n\n  return [['M', x, y], ['L', x + width, y], ['L', x + width, y + height], ['L', x, y + height], ['Z']];\n}\n/**\n * convert object to path, should account for:\n * * transform & origin\n * * anchor\n * * lineWidth\n */\n\n\nexport function convertToPath(object) {\n  var localTransform = object.getLocalTransform();\n  var anchor = object.style.anchor;\n  var commands = [];\n\n  switch (object.nodeName) {\n    case Shape.LINE:\n      var _a = object.parsedStyle,\n          x1 = _a.x1,\n          y1 = _a.y1,\n          x2 = _a.x2,\n          y2 = _a.y2;\n      commands = lineToCommands(x1.value, y1.value, x2.value, y2.value);\n      break;\n\n    case Shape.CIRCLE:\n      {\n        var _b = object.parsedStyle,\n            r = _b.r,\n            x_1 = _b.x,\n            y_1 = _b.y;\n        commands = ellipseToCommands(r.value, r.value, x_1.value, y_1.value);\n        break;\n      }\n\n    case Shape.ELLIPSE:\n      {\n        var _c = object.parsedStyle,\n            rx = _c.rx,\n            ry = _c.ry,\n            x_2 = _c.x,\n            y_2 = _c.y;\n        commands = ellipseToCommands(rx.value, ry.value, x_2.value, y_2.value);\n        break;\n      }\n\n    case Shape.POLYLINE:\n    case Shape.POLYGON:\n      var points = object.parsedStyle.points;\n      commands = polygonToCommands(points.points);\n      break;\n\n    case Shape.RECT:\n      var _d = object.parsedStyle,\n          width = _d.width,\n          height = _d.height,\n          x = _d.x,\n          y = _d.y,\n          radius = _d.radius;\n      commands = rectToCommands(width.value, height.value, x.value, y.value, (radius === null || radius === void 0 ? void 0 : radius.value) || 0);\n      break;\n\n    case Shape.PATH:\n      commands = object.parsedStyle.path.curve;\n      break;\n  }\n\n  if (commands.length) {\n    return commandsToPathString(commands, localTransform, anchor, object.parsedStyle);\n  }\n}"]},"metadata":{},"sourceType":"module"}