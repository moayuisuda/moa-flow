{"ast":null,"code":"export function hasAddon(props) {\n  return !!(props.addonBefore || props.addonAfter);\n}\nexport function hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n}\nexport function resolveOnChange(target, e, onChange, targetValue) {\n  if (!onChange) {\n    return;\n  }\n\n  var event = e;\n\n  if (e.type === 'click') {\n    // Clone a new target for event.\n    // Avoid the following usage, the setQuery method gets the original value.\n    //\n    // const [query, setQuery] = React.useState('');\n    // <Input\n    //   allowClear\n    //   value={query}\n    //   onChange={(e)=> {\n    //     setQuery((prevStatus) => e.target.value);\n    //   }}\n    // />\n    var currentTarget = target.cloneNode(true); // click clear icon\n\n    event = Object.create(e, {\n      target: {\n        value: currentTarget\n      },\n      currentTarget: {\n        value: currentTarget\n      }\n    });\n    currentTarget.value = '';\n    onChange(event);\n    return;\n  } // Trigger by composition event, this means we need force change the input value\n\n\n  if (targetValue !== undefined) {\n    event = Object.create(e, {\n      target: {\n        value: target\n      },\n      currentTarget: {\n        value: target\n      }\n    });\n    target.value = targetValue;\n    onChange(event);\n    return;\n  }\n\n  onChange(event);\n}\nexport function triggerFocus(element, option) {\n  if (!element) return;\n  element.focus(option); // Selection content\n\n  var _ref = option || {},\n      cursor = _ref.cursor;\n\n  if (cursor) {\n    var len = element.value.length;\n\n    switch (cursor) {\n      case 'start':\n        element.setSelectionRange(0, 0);\n        break;\n\n      case 'end':\n        element.setSelectionRange(len, len);\n        break;\n\n      default:\n        element.setSelectionRange(0, len);\n    }\n  }\n}\nexport function fixControlledValue(value) {\n  if (typeof value === 'undefined' || value === null) {\n    return '';\n  }\n\n  return String(value);\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/rc-input/es/utils/commonUtils.js"],"names":["hasAddon","props","addonBefore","addonAfter","hasPrefixSuffix","prefix","suffix","allowClear","resolveOnChange","target","e","onChange","targetValue","event","type","currentTarget","cloneNode","Object","create","value","undefined","triggerFocus","element","option","focus","_ref","cursor","len","length","setSelectionRange","fixControlledValue","String"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAO,CAAC,EAAEA,KAAK,CAACC,WAAN,IAAqBD,KAAK,CAACE,UAA7B,CAAR;AACD;AACD,OAAO,SAASC,eAAT,CAAyBH,KAAzB,EAAgC;AACrC,SAAO,CAAC,EAAEA,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACK,MAAtB,IAAgCL,KAAK,CAACM,UAAxC,CAAR;AACD;AACD,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,CAAjC,EAAoCC,QAApC,EAA8CC,WAA9C,EAA2D;AAChE,MAAI,CAACD,QAAL,EAAe;AACb;AACD;;AAED,MAAIE,KAAK,GAAGH,CAAZ;;AAEA,MAAIA,CAAC,CAACI,IAAF,KAAW,OAAf,EAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIC,aAAa,GAAGN,MAAM,CAACO,SAAP,CAAiB,IAAjB,CAApB,CAZsB,CAYsB;;AAE5CH,IAAAA,KAAK,GAAGI,MAAM,CAACC,MAAP,CAAcR,CAAd,EAAiB;AACvBD,MAAAA,MAAM,EAAE;AACNU,QAAAA,KAAK,EAAEJ;AADD,OADe;AAIvBA,MAAAA,aAAa,EAAE;AACbI,QAAAA,KAAK,EAAEJ;AADM;AAJQ,KAAjB,CAAR;AAQAA,IAAAA,aAAa,CAACI,KAAd,GAAsB,EAAtB;AACAR,IAAAA,QAAQ,CAACE,KAAD,CAAR;AACA;AACD,GAhC+D,CAgC9D;;;AAGF,MAAID,WAAW,KAAKQ,SAApB,EAA+B;AAC7BP,IAAAA,KAAK,GAAGI,MAAM,CAACC,MAAP,CAAcR,CAAd,EAAiB;AACvBD,MAAAA,MAAM,EAAE;AACNU,QAAAA,KAAK,EAAEV;AADD,OADe;AAIvBM,MAAAA,aAAa,EAAE;AACbI,QAAAA,KAAK,EAAEV;AADM;AAJQ,KAAjB,CAAR;AAQAA,IAAAA,MAAM,CAACU,KAAP,GAAeP,WAAf;AACAD,IAAAA,QAAQ,CAACE,KAAD,CAAR;AACA;AACD;;AAEDF,EAAAA,QAAQ,CAACE,KAAD,CAAR;AACD;AACD,OAAO,SAASQ,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC;AAC5C,MAAI,CAACD,OAAL,EAAc;AACdA,EAAAA,OAAO,CAACE,KAAR,CAAcD,MAAd,EAF4C,CAErB;;AAEvB,MAAIE,IAAI,GAAGF,MAAM,IAAI,EAArB;AAAA,MACIG,MAAM,GAAGD,IAAI,CAACC,MADlB;;AAGA,MAAIA,MAAJ,EAAY;AACV,QAAIC,GAAG,GAAGL,OAAO,CAACH,KAAR,CAAcS,MAAxB;;AAEA,YAAQF,MAAR;AACE,WAAK,OAAL;AACEJ,QAAAA,OAAO,CAACO,iBAAR,CAA0B,CAA1B,EAA6B,CAA7B;AACA;;AAEF,WAAK,KAAL;AACEP,QAAAA,OAAO,CAACO,iBAAR,CAA0BF,GAA1B,EAA+BA,GAA/B;AACA;;AAEF;AACEL,QAAAA,OAAO,CAACO,iBAAR,CAA0B,CAA1B,EAA6BF,GAA7B;AAVJ;AAYD;AACF;AACD,OAAO,SAASG,kBAAT,CAA4BX,KAA5B,EAAmC;AACxC,MAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA9C,EAAoD;AAClD,WAAO,EAAP;AACD;;AAED,SAAOY,MAAM,CAACZ,KAAD,CAAb;AACD","sourcesContent":["export function hasAddon(props) {\n  return !!(props.addonBefore || props.addonAfter);\n}\nexport function hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n}\nexport function resolveOnChange(target, e, onChange, targetValue) {\n  if (!onChange) {\n    return;\n  }\n\n  var event = e;\n\n  if (e.type === 'click') {\n    // Clone a new target for event.\n    // Avoid the following usage, the setQuery method gets the original value.\n    //\n    // const [query, setQuery] = React.useState('');\n    // <Input\n    //   allowClear\n    //   value={query}\n    //   onChange={(e)=> {\n    //     setQuery((prevStatus) => e.target.value);\n    //   }}\n    // />\n    var currentTarget = target.cloneNode(true); // click clear icon\n\n    event = Object.create(e, {\n      target: {\n        value: currentTarget\n      },\n      currentTarget: {\n        value: currentTarget\n      }\n    });\n    currentTarget.value = '';\n    onChange(event);\n    return;\n  } // Trigger by composition event, this means we need force change the input value\n\n\n  if (targetValue !== undefined) {\n    event = Object.create(e, {\n      target: {\n        value: target\n      },\n      currentTarget: {\n        value: target\n      }\n    });\n    target.value = targetValue;\n    onChange(event);\n    return;\n  }\n\n  onChange(event);\n}\nexport function triggerFocus(element, option) {\n  if (!element) return;\n  element.focus(option); // Selection content\n\n  var _ref = option || {},\n      cursor = _ref.cursor;\n\n  if (cursor) {\n    var len = element.value.length;\n\n    switch (cursor) {\n      case 'start':\n        element.setSelectionRange(0, 0);\n        break;\n\n      case 'end':\n        element.setSelectionRange(len, len);\n        break;\n\n      default:\n        element.setSelectionRange(0, len);\n    }\n  }\n}\nexport function fixControlledValue(value) {\n  if (typeof value === 'undefined' || value === null) {\n    return '';\n  }\n\n  return String(value);\n}"]},"metadata":{},"sourceType":"module"}