{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFunctionName = exports.getBaseClassDependencyCount = exports.getDependencies = void 0;\n\nvar inject_1 = require(\"../annotation/inject\");\n\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nvar serialization_1 = require(\"../utils/serialization\");\n\nObject.defineProperty(exports, \"getFunctionName\", {\n  enumerable: true,\n  get: function () {\n    return serialization_1.getFunctionName;\n  }\n});\n\nvar target_1 = require(\"./target\");\n\nfunction getDependencies(metadataReader, func) {\n  var constructorName = serialization_1.getFunctionName(func);\n  var targets = getTargets(metadataReader, constructorName, func, false);\n  return targets;\n}\n\nexports.getDependencies = getDependencies;\n\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\n  var metadata = metadataReader.getConstructorMetadata(func);\n  var serviceIdentifiers = metadata.compilerGeneratedMetadata;\n\n  if (serviceIdentifiers === undefined) {\n    var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n    throw new Error(msg);\n  }\n\n  var constructorArgsMetadata = metadata.userGeneratedMetadata;\n  var keys = Object.keys(constructorArgsMetadata);\n  var hasUserDeclaredUnknownInjections = func.length === 0 && keys.length > 0;\n  var hasOptionalParameters = keys.length > func.length;\n  var iterations = hasUserDeclaredUnknownInjections || hasOptionalParameters ? keys.length : func.length;\n  var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\n  var propertyTargets = getClassPropsAsTargets(metadataReader, func);\n\n  var targets = __spreadArray(__spreadArray([], constructorTargets), propertyTargets);\n\n  return targets;\n}\n\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\n  var targetMetadata = constructorArgsMetadata[index.toString()] || [];\n  var metadata = formatTargetMetadata(targetMetadata);\n  var isManaged = metadata.unmanaged !== true;\n  var serviceIdentifier = serviceIdentifiers[index];\n  var injectIdentifier = metadata.inject || metadata.multiInject;\n  serviceIdentifier = injectIdentifier ? injectIdentifier : serviceIdentifier;\n\n  if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {\n    serviceIdentifier = serviceIdentifier.unwrap();\n  }\n\n  if (isManaged) {\n    var isObject = serviceIdentifier === Object;\n    var isFunction = serviceIdentifier === Function;\n    var isUndefined = serviceIdentifier === undefined;\n    var isUnknownType = isObject || isFunction || isUndefined;\n\n    if (!isBaseClass && isUnknownType) {\n      var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\n      throw new Error(msg);\n    }\n\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\n    target.metadata = targetMetadata;\n    return target;\n  }\n\n  return null;\n}\n\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\n  var targets = [];\n\n  for (var i = 0; i < iterations; i++) {\n    var index = i;\n    var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\n\n    if (target !== null) {\n      targets.push(target);\n    }\n  }\n\n  return targets;\n}\n\nfunction getClassPropsAsTargets(metadataReader, constructorFunc) {\n  var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n  var targets = [];\n  var keys = Object.keys(classPropsMetadata);\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    var targetMetadata = classPropsMetadata[key];\n    var metadata = formatTargetMetadata(classPropsMetadata[key]);\n    var targetName = metadata.targetName || key;\n    var serviceIdentifier = metadata.inject || metadata.multiInject;\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);\n    target.metadata = targetMetadata;\n    targets.push(target);\n  }\n\n  var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);\n    targets = __spreadArray(__spreadArray([], targets), baseTargets);\n  }\n\n  return targets;\n}\n\nfunction getBaseClassDependencyCount(metadataReader, func) {\n  var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    var baseConstructorName = serialization_1.getFunctionName(baseConstructor);\n    var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n    var metadata = targets.map(function (t) {\n      return t.metadata.filter(function (m) {\n        return m.key === METADATA_KEY.UNMANAGED_TAG;\n      });\n    });\n    var unmanagedCount = [].concat.apply([], metadata).length;\n    var dependencyCount = targets.length - unmanagedCount;\n\n    if (dependencyCount > 0) {\n      return dependencyCount;\n    } else {\n      return getBaseClassDependencyCount(metadataReader, baseConstructor);\n    }\n  } else {\n    return 0;\n  }\n}\n\nexports.getBaseClassDependencyCount = getBaseClassDependencyCount;\n\nfunction formatTargetMetadata(targetMetadata) {\n  var targetMetadataMap = {};\n  targetMetadata.forEach(function (m) {\n    targetMetadataMap[m.key.toString()] = m.value;\n  });\n  return {\n    inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n    multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n    targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n    unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n  };\n}","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","serialization_1","getDependencies","metadataReader","func","constructorName","targets","getTargets","exports","isBaseClass","metadata","getConstructorMetadata","serviceIdentifiers","compilerGeneratedMetadata","undefined","msg","ERROR_MSGS","MISSING_INJECTABLE_ANNOTATION","Error","constructorArgsMetadata","userGeneratedMetadata","keys","hasUserDeclaredUnknownInjections","length","hasOptionalParameters","iterations","constructorTargets","getConstructorArgsAsTargets","propertyTargets","getClassPropsAsTargets","getConstructorArgsAsTarget","index","targetMetadata","toString","formatTargetMetadata","isManaged","unmanaged","serviceIdentifier","injectIdentifier","inject","multiInject","inject_1","unwrap","isObject","isFunction","Function","isUndefined","isUnknownType","MISSING_INJECT_ANNOTATION","target","target_1","literal_types_1","ConstructorArgument","targetName","i","push","constructorFunc","classPropsMetadata","getPropertiesMetadata","_i","key","ClassProperty","baseConstructor","getPrototypeOf","prototype","constructor","baseTargets","getBaseClassDependencyCount","baseConstructorName","map","t","filter","m","METADATA_KEY","UNMANAGED_TAG","unmanagedCount","concat","apply","dependencyCount","targetMetadataMap","forEach","value","INJECT_TAG","MULTI_INJECT_TAG","NAME_TAG"],"sources":["../../src/planning/reflection_utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}