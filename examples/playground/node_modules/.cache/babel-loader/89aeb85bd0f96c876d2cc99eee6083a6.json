{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncSeriesHookCodeFactory extends HookCodeFactory {\n  content(_ref) {\n    let {\n      onError,\n      onDone\n    } = _ref;\n    return this.callTapsSeries({\n      onError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n      onDone\n    });\n  }\n\n}\n\nconst factory = new AsyncSeriesHookCodeFactory();\n\nconst COMPILE = function (options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\n\nfunction AsyncSeriesHook() {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const hook = new Hook(args, name);\n  hook.constructor = AsyncSeriesHook;\n  hook.compile = COMPILE;\n  hook._call = undefined;\n  hook.call = undefined;\n  return hook;\n}\n\nAsyncSeriesHook.prototype = null;\nmodule.exports = AsyncSeriesHook;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/tapable/lib/AsyncSeriesHook.js"],"names":["Hook","require","HookCodeFactory","AsyncSeriesHookCodeFactory","content","onError","onDone","callTapsSeries","i","err","next","doneBreak","factory","COMPILE","options","setup","create","AsyncSeriesHook","args","name","undefined","hook","constructor","compile","_call","call","prototype","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,0BAAN,SAAyCD,eAAzC,CAAyD;AACxDE,EAAAA,OAAO,OAAsB;AAAA,QAArB;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAqB;AAC5B,WAAO,KAAKC,cAAL,CAAoB;AAC1BF,MAAAA,OAAO,EAAE,CAACG,CAAD,EAAIC,GAAJ,EAASC,IAAT,EAAeC,SAAf,KAA6BN,OAAO,CAACI,GAAD,CAAP,GAAeE,SAAS,CAAC,IAAD,CADpC;AAE1BL,MAAAA;AAF0B,KAApB,CAAP;AAIA;;AANuD;;AASzD,MAAMM,OAAO,GAAG,IAAIT,0BAAJ,EAAhB;;AAEA,MAAMU,OAAO,GAAG,UAASC,OAAT,EAAkB;AACjCF,EAAAA,OAAO,CAACG,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,SAAOF,OAAO,CAACI,MAAR,CAAeF,OAAf,CAAP;AACA,CAHD;;AAKA,SAASG,eAAT,GAAsD;AAAA,MAA7BC,IAA6B,uEAAtB,EAAsB;AAAA,MAAlBC,IAAkB,uEAAXC,SAAW;AACrD,QAAMC,IAAI,GAAG,IAAIrB,IAAJ,CAASkB,IAAT,EAAeC,IAAf,CAAb;AACAE,EAAAA,IAAI,CAACC,WAAL,GAAmBL,eAAnB;AACAI,EAAAA,IAAI,CAACE,OAAL,GAAeV,OAAf;AACAQ,EAAAA,IAAI,CAACG,KAAL,GAAaJ,SAAb;AACAC,EAAAA,IAAI,CAACI,IAAL,GAAYL,SAAZ;AACA,SAAOC,IAAP;AACA;;AAEDJ,eAAe,CAACS,SAAhB,GAA4B,IAA5B;AAEAC,MAAM,CAACC,OAAP,GAAiBX,eAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncSeriesHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncSeriesHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncSeriesHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncSeriesHook.prototype = null;\n\nmodule.exports = AsyncSeriesHook;\n"]},"metadata":{},"sourceType":"script"}