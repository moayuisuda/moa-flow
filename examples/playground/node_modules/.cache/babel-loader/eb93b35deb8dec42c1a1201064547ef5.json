{"ast":null,"code":"import { r as reactDom } from '../../_virtual/index.js';\nimport './cjs/react-dom.production.min.js';\nimport './cjs/react-dom.development.js';\nimport { __exports as reactDom_production_min } from '../../_virtual/react-dom.production.min.js';\nimport { __exports as reactDom_development } from '../../_virtual/react-dom.development.js';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  reactDom.exports = reactDom_production_min;\n} else {\n  reactDom.exports = reactDom_development;\n}\n\nvar ReactDOM = reactDom.exports;\nexport { ReactDOM as default };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/packages/flow/lib/node_modules/react-dom/index.js"],"names":["r","reactDom","__exports","reactDom_production_min","reactDom_development","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","process","env","NODE_ENV","Error","err","console","error","exports","ReactDOM","default"],"mappings":"AAAA,SAASA,CAAC,IAAIC,QAAd,QAA8B,yBAA9B;AACA,OAAO,mCAAP;AACA,OAAO,gCAAP;AACA,SAASC,SAAS,IAAIC,uBAAtB,QAAqD,4CAArD;AACA,SAASD,SAAS,IAAIE,oBAAtB,QAAkD,yCAAlD;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,MACE,OAAOC,8BAAP,KAA0C,WAA1C,IACA,OAAOA,8BAA8B,CAACD,QAAtC,KAAmD,UAFrD,EAGE;AACA;AACD;;AACD,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM,IAAIC,KAAJ,CAAU,KAAV,CAAN;AACD;;AACD,MAAI;AACF;AACAJ,IAAAA,8BAA8B,CAACD,QAA/B,CAAwCA,QAAxC;AACD,GAHD,CAGE,OAAOM,GAAP,EAAY;AACZ;AACA;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF;;AAED,IAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACAJ,EAAAA,QAAQ;AACRJ,EAAAA,QAAQ,CAACa,OAAT,GAAmBX,uBAAnB;AACD,CALD,MAKO;AACLF,EAAAA,QAAQ,CAACa,OAAT,GAAmBV,oBAAnB;AACD;;AAED,IAAIW,QAAQ,GAAGd,QAAQ,CAACa,OAAxB;AAEA,SAASC,QAAQ,IAAIC,OAArB","sourcesContent":["import { r as reactDom } from '../../_virtual/index.js';\nimport './cjs/react-dom.production.min.js';\nimport './cjs/react-dom.development.js';\nimport { __exports as reactDom_production_min } from '../../_virtual/react-dom.production.min.js';\nimport { __exports as reactDom_development } from '../../_virtual/react-dom.development.js';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  reactDom.exports = reactDom_production_min;\n} else {\n  reactDom.exports = reactDom_development;\n}\n\nvar ReactDOM = reactDom.exports;\n\nexport { ReactDOM as default };\n"]},"metadata":{},"sourceType":"module"}