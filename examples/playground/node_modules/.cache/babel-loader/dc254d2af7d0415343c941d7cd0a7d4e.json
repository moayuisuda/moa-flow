{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CSSNumericValue } from './CSSNumericValue';\n/**\n * The CSSMathValue interface of the CSS_Object_Model a base class for classes representing complex numeric values.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSMathValue\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_math_value.idl\n */\n\nvar CSSMathValue =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathValue, _super);\n\n  function CSSMathValue() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // From CSSNumericValue\n\n\n  CSSMathValue.prototype.isUnitValue = function () {\n    return false;\n  };\n\n  return CSSMathValue;\n}(CSSNumericValue);\n\nexport { CSSMathValue };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSMathValue.js"],"names":["__extends","CSSNumericValue","CSSMathValue","_super","apply","arguments","prototype","isUnitValue"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,YAAY;AAChB;AACA,UAAUC,MAAV,EAAkB;AAChBH,EAAAA,SAAS,CAACE,YAAD,EAAeC,MAAf,CAAT;;AAEA,WAASD,YAAT,GAAwB;AACtB,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACD,GALe,CAKd;;;AAGFH,EAAAA,YAAY,CAACI,SAAb,CAAuBC,WAAvB,GAAqC,YAAY;AAC/C,WAAO,KAAP;AACD,GAFD;;AAIA,SAAOL,YAAP;AACD,CAbD,CAaED,eAbF,CAFA;;AAiBA,SAASC,YAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { CSSNumericValue } from './CSSNumericValue';\n/**\n * The CSSMathValue interface of the CSS_Object_Model a base class for classes representing complex numeric values.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSMathValue\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_math_value.idl\n */\n\nvar CSSMathValue =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathValue, _super);\n\n  function CSSMathValue() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // From CSSNumericValue\n\n\n  CSSMathValue.prototype.isUnitValue = function () {\n    return false;\n  };\n\n  return CSSMathValue;\n}(CSSNumericValue);\n\nexport { CSSMathValue };"]},"metadata":{},"sourceType":"module"}