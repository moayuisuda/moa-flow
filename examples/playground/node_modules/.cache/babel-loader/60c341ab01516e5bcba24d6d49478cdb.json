{"ast":null,"code":"import { __read } from \"tslib\";\nimport { vec3 } from 'gl-matrix';\nimport { Plane } from './Plane';\nexport var Mask;\n\n(function (Mask) {\n  Mask[Mask[\"OUTSIDE\"] = 4294967295] = \"OUTSIDE\";\n  Mask[Mask[\"INSIDE\"] = 0] = \"INSIDE\";\n  Mask[Mask[\"INDETERMINATE\"] = 2147483647] = \"INDETERMINATE\";\n})(Mask || (Mask = {}));\n\nvar Frustum =\n/** @class */\nfunction () {\n  function Frustum(planes) {\n    this.planes = [];\n\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (var i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n  /**\n   * extract 6 planes from projectionMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   */\n\n\n  Frustum.prototype.extractFromVPMatrix = function (projectionMatrix) {\n    // @ts-ignore\n    var _a = __read(projectionMatrix, 16),\n        m0 = _a[0],\n        m1 = _a[1],\n        m2 = _a[2],\n        m3 = _a[3],\n        m4 = _a[4],\n        m5 = _a[5],\n        m6 = _a[6],\n        m7 = _a[7],\n        m8 = _a[8],\n        m9 = _a[9],\n        m10 = _a[10],\n        m11 = _a[11],\n        m12 = _a[12],\n        m13 = _a[13],\n        m14 = _a[14],\n        m15 = _a[15]; // right\n\n\n    vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n    this.planes[0].distance = m15 - m12; // left\n\n    vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n    this.planes[1].distance = m15 + m12; // bottom\n\n    vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n    this.planes[2].distance = m15 + m13; // top\n\n    vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n    this.planes[3].distance = m15 - m13; // far\n\n    vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n    this.planes[4].distance = m15 - m14; // near\n\n    vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n    this.planes[5].distance = m15 + m14;\n    this.planes.forEach(function (plane) {\n      plane.normalize();\n      plane.updatePNVertexFlag();\n    });\n  };\n\n  return Frustum;\n}();\n\nexport { Frustum };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/shapes/Frustum.js"],"names":["__read","vec3","Plane","Mask","Frustum","planes","i","push","prototype","extractFromVPMatrix","projectionMatrix","_a","m0","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","set","normal","distance","forEach","plane","normalize","updatePNVertexFlag"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAO,IAAIC,IAAJ;;AAEP,CAAC,UAAUA,IAAV,EAAgB;AACfA,EAAAA,IAAI,CAACA,IAAI,CAAC,SAAD,CAAJ,GAAkB,UAAnB,CAAJ,GAAqC,SAArC;AACAA,EAAAA,IAAI,CAACA,IAAI,CAAC,QAAD,CAAJ,GAAiB,CAAlB,CAAJ,GAA2B,QAA3B;AACAA,EAAAA,IAAI,CAACA,IAAI,CAAC,eAAD,CAAJ,GAAwB,UAAzB,CAAJ,GAA2C,eAA3C;AACD,CAJD,EAIGA,IAAI,KAAKA,IAAI,GAAG,EAAZ,CAJP;;AAMA,IAAIC,OAAO;AACX;AACA,YAAY;AACV,WAASA,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAKA,MAAL,GAAc,EAAd;;AAEA,QAAIA,MAAJ,EAAY;AACV,WAAKA,MAAL,GAAcA,MAAd;AACD,KAFD,MAEO;AACL,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,aAAKD,MAAL,CAAYE,IAAZ,CAAiB,IAAIL,KAAJ,EAAjB;AACD;AACF;AACF;AACD;AACF;AACA;AACA;;;AAGEE,EAAAA,OAAO,CAACI,SAAR,CAAkBC,mBAAlB,GAAwC,UAAUC,gBAAV,EAA4B;AAClE;AACA,QAAIC,EAAE,GAAGX,MAAM,CAACU,gBAAD,EAAmB,EAAnB,CAAf;AAAA,QACIE,EAAE,GAAGD,EAAE,CAAC,CAAD,CADX;AAAA,QAEIE,EAAE,GAAGF,EAAE,CAAC,CAAD,CAFX;AAAA,QAGIG,EAAE,GAAGH,EAAE,CAAC,CAAD,CAHX;AAAA,QAIII,EAAE,GAAGJ,EAAE,CAAC,CAAD,CAJX;AAAA,QAKIK,EAAE,GAAGL,EAAE,CAAC,CAAD,CALX;AAAA,QAMIM,EAAE,GAAGN,EAAE,CAAC,CAAD,CANX;AAAA,QAOIO,EAAE,GAAGP,EAAE,CAAC,CAAD,CAPX;AAAA,QAQIQ,EAAE,GAAGR,EAAE,CAAC,CAAD,CARX;AAAA,QASIS,EAAE,GAAGT,EAAE,CAAC,CAAD,CATX;AAAA,QAUIU,EAAE,GAAGV,EAAE,CAAC,CAAD,CAVX;AAAA,QAWIW,GAAG,GAAGX,EAAE,CAAC,EAAD,CAXZ;AAAA,QAYIY,GAAG,GAAGZ,EAAE,CAAC,EAAD,CAZZ;AAAA,QAaIa,GAAG,GAAGb,EAAE,CAAC,EAAD,CAbZ;AAAA,QAcIc,GAAG,GAAGd,EAAE,CAAC,EAAD,CAdZ;AAAA,QAeIe,GAAG,GAAGf,EAAE,CAAC,EAAD,CAfZ;AAAA,QAgBIgB,GAAG,GAAGhB,EAAE,CAAC,EAAD,CAhBZ,CAFkE,CAkBhD;;;AAGlBV,IAAAA,IAAI,CAAC2B,GAAL,CAAS,KAAKvB,MAAL,CAAY,CAAZ,EAAewB,MAAxB,EAAgCd,EAAE,GAAGH,EAArC,EAAyCO,EAAE,GAAGH,EAA9C,EAAkDO,GAAG,GAAGH,EAAxD;AACA,SAAKf,MAAL,CAAY,CAAZ,EAAeyB,QAAf,GAA0BH,GAAG,GAAGH,GAAhC,CAtBkE,CAsB7B;;AAErCvB,IAAAA,IAAI,CAAC2B,GAAL,CAAS,KAAKvB,MAAL,CAAY,CAAZ,EAAewB,MAAxB,EAAgCd,EAAE,GAAGH,EAArC,EAAyCO,EAAE,GAAGH,EAA9C,EAAkDO,GAAG,GAAGH,EAAxD;AACA,SAAKf,MAAL,CAAY,CAAZ,EAAeyB,QAAf,GAA0BH,GAAG,GAAGH,GAAhC,CAzBkE,CAyB7B;;AAErCvB,IAAAA,IAAI,CAAC2B,GAAL,CAAS,KAAKvB,MAAL,CAAY,CAAZ,EAAewB,MAAxB,EAAgCd,EAAE,GAAGF,EAArC,EAAyCM,EAAE,GAAGF,EAA9C,EAAkDM,GAAG,GAAGF,EAAxD;AACA,SAAKhB,MAAL,CAAY,CAAZ,EAAeyB,QAAf,GAA0BH,GAAG,GAAGF,GAAhC,CA5BkE,CA4B7B;;AAErCxB,IAAAA,IAAI,CAAC2B,GAAL,CAAS,KAAKvB,MAAL,CAAY,CAAZ,EAAewB,MAAxB,EAAgCd,EAAE,GAAGF,EAArC,EAAyCM,EAAE,GAAGF,EAA9C,EAAkDM,GAAG,GAAGF,EAAxD;AACA,SAAKhB,MAAL,CAAY,CAAZ,EAAeyB,QAAf,GAA0BH,GAAG,GAAGF,GAAhC,CA/BkE,CA+B7B;;AAErCxB,IAAAA,IAAI,CAAC2B,GAAL,CAAS,KAAKvB,MAAL,CAAY,CAAZ,EAAewB,MAAxB,EAAgCd,EAAE,GAAGD,EAArC,EAAyCK,EAAE,GAAGD,EAA9C,EAAkDK,GAAG,GAAGD,GAAxD;AACA,SAAKjB,MAAL,CAAY,CAAZ,EAAeyB,QAAf,GAA0BH,GAAG,GAAGD,GAAhC,CAlCkE,CAkC7B;;AAErCzB,IAAAA,IAAI,CAAC2B,GAAL,CAAS,KAAKvB,MAAL,CAAY,CAAZ,EAAewB,MAAxB,EAAgCd,EAAE,GAAGD,EAArC,EAAyCK,EAAE,GAAGD,EAA9C,EAAkDK,GAAG,GAAGD,GAAxD;AACA,SAAKjB,MAAL,CAAY,CAAZ,EAAeyB,QAAf,GAA0BH,GAAG,GAAGD,GAAhC;AACA,SAAKrB,MAAL,CAAY0B,OAAZ,CAAoB,UAAUC,KAAV,EAAiB;AACnCA,MAAAA,KAAK,CAACC,SAAN;AACAD,MAAAA,KAAK,CAACE,kBAAN;AACD,KAHD;AAID,GA1CD;;AA4CA,SAAO9B,OAAP;AACD,CA/DD,EAFA;;AAmEA,SAASA,OAAT","sourcesContent":["import { __read } from \"tslib\";\nimport { vec3 } from 'gl-matrix';\nimport { Plane } from './Plane';\nexport var Mask;\n\n(function (Mask) {\n  Mask[Mask[\"OUTSIDE\"] = 4294967295] = \"OUTSIDE\";\n  Mask[Mask[\"INSIDE\"] = 0] = \"INSIDE\";\n  Mask[Mask[\"INDETERMINATE\"] = 2147483647] = \"INDETERMINATE\";\n})(Mask || (Mask = {}));\n\nvar Frustum =\n/** @class */\nfunction () {\n  function Frustum(planes) {\n    this.planes = [];\n\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (var i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n  /**\n   * extract 6 planes from projectionMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   */\n\n\n  Frustum.prototype.extractFromVPMatrix = function (projectionMatrix) {\n    // @ts-ignore\n    var _a = __read(projectionMatrix, 16),\n        m0 = _a[0],\n        m1 = _a[1],\n        m2 = _a[2],\n        m3 = _a[3],\n        m4 = _a[4],\n        m5 = _a[5],\n        m6 = _a[6],\n        m7 = _a[7],\n        m8 = _a[8],\n        m9 = _a[9],\n        m10 = _a[10],\n        m11 = _a[11],\n        m12 = _a[12],\n        m13 = _a[13],\n        m14 = _a[14],\n        m15 = _a[15]; // right\n\n\n    vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n    this.planes[0].distance = m15 - m12; // left\n\n    vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n    this.planes[1].distance = m15 + m12; // bottom\n\n    vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n    this.planes[2].distance = m15 + m13; // top\n\n    vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n    this.planes[3].distance = m15 - m13; // far\n\n    vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n    this.planes[4].distance = m15 - m14; // near\n\n    vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n    this.planes[5].distance = m15 + m14;\n    this.planes.forEach(function (plane) {\n      plane.normalize();\n      plane.updatePNVertexFlag();\n    });\n  };\n\n  return Frustum;\n}();\n\nexport { Frustum };"]},"metadata":{},"sourceType":"module"}