{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveInstance = void 0;\n\nvar error_msgs_1 = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nfunction _injectProperties(instance, childRequests, resolveRequest) {\n  var propertyInjectionsRequests = childRequests.filter(function (childRequest) {\n    return childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty;\n  });\n  var propertyInjections = propertyInjectionsRequests.map(resolveRequest);\n  propertyInjectionsRequests.forEach(function (r, index) {\n    var propertyName = \"\";\n    propertyName = r.target.name.value();\n    var injection = propertyInjections[index];\n    instance[propertyName] = injection;\n  });\n  return instance;\n}\n\nfunction _createInstance(Func, injections) {\n  return new (Func.bind.apply(Func, __spreadArray([void 0], injections)))();\n}\n\nfunction _postConstruct(constr, result) {\n  if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\n    var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\n\n    try {\n      result[data.value]();\n    } catch (e) {\n      throw new Error(error_msgs_1.POST_CONSTRUCT_ERROR(constr.name, e.message));\n    }\n  }\n}\n\nfunction resolveInstance(constr, childRequests, resolveRequest) {\n  var result = null;\n\n  if (childRequests.length > 0) {\n    var constructorInjectionsRequests = childRequests.filter(function (childRequest) {\n      return childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument;\n    });\n    var constructorInjections = constructorInjectionsRequests.map(resolveRequest);\n    result = _createInstance(constr, constructorInjections);\n    result = _injectProperties(result, childRequests, resolveRequest);\n  } else {\n    result = new constr();\n  }\n\n  _postConstruct(constr, result);\n\n  return result;\n}\n\nexports.resolveInstance = resolveInstance;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA,SAASA,iBAAT,CACIC,QADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAGoD;AAGhD,MAAMC,0BAA0B,GAAGF,aAAa,CAACG,MAAd,CAAqB,UAACC,YAAD,EAAiC;AACrF,WACIA,YAAY,CAACC,MAAb,KAAwB,IAAxB,IACAD,YAAY,CAACC,MAAb,CAAoBC,IAApB,KAA6BC,+BAAeC,aAFhD;AAGC,GAJ8B,CAAnC;AAMA,MAAMC,kBAAkB,GAAGP,0BAA0B,CAACQ,GAA3B,CAA+BT,cAA/B,CAA3B;AAEAC,4BAA0B,CAACS,OAA3B,CAAmC,UAACC,CAAD,EAAwBC,KAAxB,EAAqC;AACpE,QAAIC,YAAY,GAAG,EAAnB;AACAA,gBAAY,GAAGF,CAAC,CAACP,MAAF,CAASU,IAAT,CAAcC,KAAd,EAAf;AACA,QAAMC,SAAS,GAAGR,kBAAkB,CAACI,KAAD,CAApC;AACAd,YAAQ,CAACe,YAAD,CAAR,GAAyBG,SAAzB;AACH,GALD;AAOA,SAAOlB,QAAP;AAEH;;AAED,SAASmB,eAAT,CAAyBC,IAAzB,EAAwDC,UAAxD,EAA4E;AACxE,cAAWD,IAAI,KAAJ,CAAIE,KAAJ,OAAIC,wBAAIF,UAAJ,CAAJ,CAAX;AACH;;AAED,SAASG,cAAT,CAAwBC,MAAxB,EAAyDC,MAAzD,EAAoE;AAChE,MAAIC,OAAO,CAACC,WAAR,CAAoBC,YAAY,CAACC,cAAjC,EAAiDL,MAAjD,CAAJ,EAA8D;AAC1D,QAAMM,IAAI,GAAaJ,OAAO,CAACK,WAAR,CAAoBH,YAAY,CAACC,cAAjC,EAAiDL,MAAjD,CAAvB;;AACA,QAAI;AACAC,YAAM,CAACK,IAAI,CAACd,KAAN,CAAN;AACH,KAFD,CAEE,OAAOgB,CAAP,EAAU;AACR,YAAM,IAAIC,KAAJ,CAAUC,kCAAqBV,MAAM,CAACT,IAA5B,EAAkCiB,CAAC,CAACG,OAApC,CAAV,CAAN;AACH;AACJ;AACJ;;AAED,SAASC,eAAT,CACIZ,MADJ,EAEIxB,aAFJ,EAGIC,cAHJ,EAGoD;AAGhD,MAAIwB,MAAM,GAAQ,IAAlB;;AAEA,MAAIzB,aAAa,CAACqC,MAAd,GAAuB,CAA3B,EAA8B;AAE1B,QAAMC,6BAA6B,GAAGtC,aAAa,CAACG,MAAd,CAAqB,UAACC,YAAD,EAAiC;AACxF,aAACA,YAAY,CAACC,MAAb,KAAwB,IAAxB,IAAgCD,YAAY,CAACC,MAAb,CAAoBC,IAApB,KAA6BC,+BAAegC,mBAA7E;AAAiG,KAD/D,CAAtC;AAGA,QAAMC,qBAAqB,GAAGF,6BAA6B,CAAC5B,GAA9B,CAAkCT,cAAlC,CAA9B;AAEAwB,UAAM,GAAGP,eAAe,CAACM,MAAD,EAASgB,qBAAT,CAAxB;AACAf,UAAM,GAAG3B,iBAAiB,CAAC2B,MAAD,EAASzB,aAAT,EAAwBC,cAAxB,CAA1B;AAEH,GAVD,MAUO;AACHwB,UAAM,GAAG,IAAID,MAAJ,EAAT;AACH;;AACDD,gBAAc,CAACC,MAAD,EAASC,MAAT,CAAd;;AAEA,SAAOA,MAAP;AACH;;AAEQgB","names":["_injectProperties","instance","childRequests","resolveRequest","propertyInjectionsRequests","filter","childRequest","target","type","literal_types_1","ClassProperty","propertyInjections","map","forEach","r","index","propertyName","name","value","injection","_createInstance","Func","injections","apply","__spreadArray","_postConstruct","constr","result","Reflect","hasMetadata","METADATA_KEY","POST_CONSTRUCT","data","getMetadata","e","Error","error_msgs_1","message","resolveInstance","length","constructorInjectionsRequests","ConstructorArgument","constructorInjections","exports"],"sources":["../../src/resolution/instantiation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}