{"ast":null,"code":"import { each, isArray, isString } from 'lodash-es';\nvar regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/gi;\nvar regexDot = /[^\\s\\,]+/gi;\n\nfunction parsePath(p) {\n  var path = p || [];\n\n  if (isArray(path)) {\n    return path;\n  }\n\n  if (isString(path)) {\n    path = path.match(regexTags);\n    each(path, function (item, index) {\n      // @ts-ignore\n      item = item.match(regexDot);\n\n      if (item[0].length > 1) {\n        var tag = item[0].charAt(0); // @ts-ignore\n\n        item.splice(1, 0, item[0].substr(1)); // @ts-ignore\n\n        item[0] = tag;\n      } // @ts-ignore\n\n\n      each(item, function (sub, i) {\n        // @ts-ignore\n        if (!isNaN(sub)) {\n          // @ts-ignore\n          item[i] = +sub;\n        }\n      }); // @ts-ignore\n\n      path[index] = item;\n    });\n    return path;\n  }\n}\n\nexport default parsePath;","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,QAAwC,WAAxC;AAEA,IAAMC,SAAS,GAAG,gCAAlB;AACA,IAAMC,QAAQ,GAAG,YAAjB;;AAEA,SAASC,SAAT,CAAmBC,CAAnB,EAA4B;AAC1B,MAAIC,IAAI,GAAGD,CAAC,IAAK,EAAjB;;AACA,MAAIL,OAAO,CAACM,IAAD,CAAX,EAAmB;AACjB,WAAOA,IAAP;AACD;;AAED,MAAIL,QAAQ,CAACK,IAAD,CAAZ,EAAoB;AAClBA,QAAI,GAAGA,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAP;AACAH,QAAI,CAACO,IAAD,EAAO,UAACE,IAAD,EAAOC,KAAP,EAAY;AACrB;AACAD,UAAI,GAAGA,IAAI,CAACD,KAAL,CAAWJ,QAAX,CAAP;;AACA,UAAIK,IAAI,CAAC,CAAD,CAAJ,CAAQE,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAMC,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAR,CAAe,CAAf,CAAZ,CADsB,CAEtB;;AACAJ,YAAI,CAACK,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkBL,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,CAAe,CAAf,CAAlB,EAHsB,CAItB;;AACAN,YAAI,CAAC,CAAD,CAAJ,GAAUG,GAAV;AACD,OAToB,CAUrB;;;AACAZ,UAAI,CAACS,IAAD,EAAO,UAAUO,GAAV,EAAeC,CAAf,EAAgB;AACzB;AACA,YAAI,CAACC,KAAK,CAACF,GAAD,CAAV,EAAiB;AACf;AACAP,cAAI,CAACQ,CAAD,CAAJ,GAAU,CAACD,GAAX;AACD;AACF,OANG,CAAJ,CAXqB,CAkBrB;;AACAT,UAAI,CAACG,KAAD,CAAJ,GAAcD,IAAd;AACD,KApBG,CAAJ;AAqBA,WAAOF,IAAP;AACD;AACF;;AAED,eAAeF,SAAf","names":["each","isArray","isString","regexTags","regexDot","parsePath","p","path","match","item","index","length","tag","charAt","splice","substr","sub","i","isNaN"],"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/path-util/src/parse-path.ts"],"sourcesContent":["import { each, isArray, isString } from 'lodash-es';\n\nconst regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/gi;\nconst regexDot = /[^\\s\\,]+/gi;\n\nfunction parsePath(p: string): string[] {\n  let path = p || ([] as string | string[]);\n  if (isArray(path)) {\n    return path;\n  }\n\n  if (isString(path)) {\n    path = path.match(regexTags);\n    each(path, (item, index) => {\n      // @ts-ignore\n      item = item.match(regexDot);\n      if (item[0].length > 1) {\n        const tag = item[0].charAt(0);\n        // @ts-ignore\n        item.splice(1, 0, item[0].substr(1));\n        // @ts-ignore\n        item[0] = tag;\n      }\n      // @ts-ignore\n      each(item, function (sub, i) {\n        // @ts-ignore\n        if (!isNaN(sub)) {\n          // @ts-ignore\n          item[i] = +sub;\n        }\n      });\n      // @ts-ignore\n      path[index] = item;\n    });\n    return path;\n  }\n}\n\nexport default parsePath;\n"]},"metadata":{},"sourceType":"module"}