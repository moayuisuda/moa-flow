{"ast":null,"code":"import { __read } from \"tslib\";\nimport { distance, piMod } from './util';\nimport ellipse from './ellipse'; // 偏导数 x\n\nfunction derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n  return -1 * rx * Math.cos(xRotation) * Math.sin(angle) - ry * Math.sin(xRotation) * Math.cos(angle);\n} // 偏导数 y\n\n\nfunction derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n  return -1 * rx * Math.sin(xRotation) * Math.sin(angle) + ry * Math.cos(xRotation) * Math.cos(angle);\n} // x 的极值\n\n\nfunction xExtrema(rx, ry, xRotation) {\n  return Math.atan(-ry / rx * Math.tan(xRotation));\n} // y 的极值\n\n\nfunction yExtrema(rx, ry, xRotation) {\n  return Math.atan(ry / (rx * Math.tan(xRotation)));\n} // 根据角度求 x 坐标\n\n\nfunction xAt(cx, cy, rx, ry, xRotation, angle) {\n  return rx * Math.cos(xRotation) * Math.cos(angle) - ry * Math.sin(xRotation) * Math.sin(angle) + cx;\n} // 根据角度求 y 坐标\n\n\nfunction yAt(cx, cy, rx, ry, xRotation, angle) {\n  return rx * Math.sin(xRotation) * Math.cos(angle) + ry * Math.cos(xRotation) * Math.sin(angle) + cy;\n} // 获取点在椭圆上的角度\n\n\nfunction getAngle(rx, ry, x0, y0) {\n  var angle = Math.atan2(y0 * rx, x0 * ry); // 转换到 0 - 2PI 内\n\n  return (angle + Math.PI * 2) % (Math.PI * 2);\n} // 根据角度获取，x,y\n\n\nfunction getPoint(rx, ry, angle) {\n  return {\n    x: rx * Math.cos(angle),\n    y: ry * Math.sin(angle)\n  };\n} // 旋转\n\n\nfunction rotate(x, y, angle) {\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  return [x * cos - y * sin, x * sin + y * cos];\n}\n\nexport default {\n  /**\n   * 计算包围盒\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   * @return {object} 包围盒对象\n   */\n  box: function box(cx, cy, rx, ry, xRotation, startAngle, endAngle) {\n    var xDim = xExtrema(rx, ry, xRotation);\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var xs = [startAngle, endAngle];\n\n    for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n      var xAngle = xDim + i;\n\n      if (startAngle < endAngle) {\n        if (startAngle < xAngle && xAngle < endAngle) {\n          xs.push(xAngle);\n        }\n      } else {\n        if (endAngle < xAngle && xAngle < startAngle) {\n          xs.push(xAngle);\n        }\n      }\n    }\n\n    for (var i = 0; i < xs.length; i++) {\n      var x = xAt(cx, cy, rx, ry, xRotation, xs[i]);\n\n      if (x < minX) {\n        minX = x;\n      }\n\n      if (x > maxX) {\n        maxX = x;\n      }\n    }\n\n    var yDim = yExtrema(rx, ry, xRotation);\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var ys = [startAngle, endAngle];\n\n    for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n      var yAngle = yDim + i;\n\n      if (startAngle < endAngle) {\n        if (startAngle < yAngle && yAngle < endAngle) {\n          ys.push(yAngle);\n        }\n      } else {\n        if (endAngle < yAngle && yAngle < startAngle) {\n          ys.push(yAngle);\n        }\n      }\n    }\n\n    for (var i = 0; i < ys.length; i++) {\n      var y = yAt(cx, cy, rx, ry, xRotation, ys[i]);\n\n      if (y < minY) {\n        minY = y;\n      }\n\n      if (y > maxY) {\n        maxY = y;\n      }\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  },\n\n  /**\n   * 获取圆弧的长度，计算圆弧长度时不考虑旋转角度，\n   * 仅跟 rx, ry, startAngle, endAngle 相关\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   */\n  length: function length(cx, cy, rx, ry, xRotation, startAngle, endAngle) {},\n\n  /**\n   * 获取指定点到圆弧的最近距离的点\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   * @param {number} x0         指定点的 x\n   * @param {number} y0         指定点的 y\n   * @return {object} 到指定点最近距离的点\n   */\n  nearestPoint: function nearestPoint(cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n    // 将最近距离问题转换成到椭圆中心 0,0 没有旋转的椭圆问题\n    var relativeVector = rotate(x0 - cx, y0 - cy, -xRotation);\n\n    var _a = __read(relativeVector, 2),\n        x1 = _a[0],\n        y1 = _a[1]; // 计算点到椭圆的最近的点\n\n\n    var relativePoint = ellipse.nearestPoint(0, 0, rx, ry, x1, y1); // 获取点在椭圆上的角度\n\n    var angle = getAngle(rx, ry, relativePoint.x, relativePoint.y); // 点没有在圆弧上\n\n    if (angle < startAngle) {\n      // 小于起始圆弧\n      relativePoint = getPoint(rx, ry, startAngle);\n    } else if (angle > endAngle) {\n      // 大于结束圆弧\n      relativePoint = getPoint(rx, ry, endAngle);\n    } // 旋转到 xRotation 的角度\n\n\n    var vector = rotate(relativePoint.x, relativePoint.y, xRotation);\n    return {\n      x: vector[0] + cx,\n      y: vector[1] + cy\n    };\n  },\n  pointDistance: function pointDistance(cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n    var nearestPoint = this.nearestPoint(cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0);\n    return distance(nearestPoint.x, nearestPoint.y, x0, y0);\n  },\n  pointAt: function pointAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n    var angle = (endAngle - startAngle) * t + startAngle;\n    return {\n      x: xAt(cx, cy, rx, ry, xRotation, angle),\n      y: yAt(cx, cy, rx, ry, xRotation, angle)\n    };\n  },\n  tangentAngle: function tangentAngle(cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n    var angle = (endAngle - startAngle) * t + startAngle;\n    var dx = derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    var dy = derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    return piMod(Math.atan2(dy, dx));\n  }\n};","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g-math/es/arc.js"],"names":["__read","distance","piMod","ellipse","derivativeXAt","cx","cy","rx","ry","xRotation","startAngle","endAngle","angle","Math","cos","sin","derivativeYAt","xExtrema","atan","tan","yExtrema","xAt","yAt","getAngle","x0","y0","atan2","PI","getPoint","x","y","rotate","box","xDim","minX","Infinity","maxX","xs","i","xAngle","push","length","yDim","minY","maxY","ys","yAngle","width","height","nearestPoint","relativeVector","_a","x1","y1","relativePoint","vector","pointDistance","pointAt","t","tangentAngle","dx","dy"],"mappings":"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","sourcesContent":["import { __read } from \"tslib\";\nimport { distance, piMod } from './util';\nimport ellipse from './ellipse'; // 偏导数 x\n\nfunction derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n  return -1 * rx * Math.cos(xRotation) * Math.sin(angle) - ry * Math.sin(xRotation) * Math.cos(angle);\n} // 偏导数 y\n\n\nfunction derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n  return -1 * rx * Math.sin(xRotation) * Math.sin(angle) + ry * Math.cos(xRotation) * Math.cos(angle);\n} // x 的极值\n\n\nfunction xExtrema(rx, ry, xRotation) {\n  return Math.atan(-ry / rx * Math.tan(xRotation));\n} // y 的极值\n\n\nfunction yExtrema(rx, ry, xRotation) {\n  return Math.atan(ry / (rx * Math.tan(xRotation)));\n} // 根据角度求 x 坐标\n\n\nfunction xAt(cx, cy, rx, ry, xRotation, angle) {\n  return rx * Math.cos(xRotation) * Math.cos(angle) - ry * Math.sin(xRotation) * Math.sin(angle) + cx;\n} // 根据角度求 y 坐标\n\n\nfunction yAt(cx, cy, rx, ry, xRotation, angle) {\n  return rx * Math.sin(xRotation) * Math.cos(angle) + ry * Math.cos(xRotation) * Math.sin(angle) + cy;\n} // 获取点在椭圆上的角度\n\n\nfunction getAngle(rx, ry, x0, y0) {\n  var angle = Math.atan2(y0 * rx, x0 * ry); // 转换到 0 - 2PI 内\n\n  return (angle + Math.PI * 2) % (Math.PI * 2);\n} // 根据角度获取，x,y\n\n\nfunction getPoint(rx, ry, angle) {\n  return {\n    x: rx * Math.cos(angle),\n    y: ry * Math.sin(angle)\n  };\n} // 旋转\n\n\nfunction rotate(x, y, angle) {\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  return [x * cos - y * sin, x * sin + y * cos];\n}\n\nexport default {\n  /**\n   * 计算包围盒\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   * @return {object} 包围盒对象\n   */\n  box: function box(cx, cy, rx, ry, xRotation, startAngle, endAngle) {\n    var xDim = xExtrema(rx, ry, xRotation);\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var xs = [startAngle, endAngle];\n\n    for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n      var xAngle = xDim + i;\n\n      if (startAngle < endAngle) {\n        if (startAngle < xAngle && xAngle < endAngle) {\n          xs.push(xAngle);\n        }\n      } else {\n        if (endAngle < xAngle && xAngle < startAngle) {\n          xs.push(xAngle);\n        }\n      }\n    }\n\n    for (var i = 0; i < xs.length; i++) {\n      var x = xAt(cx, cy, rx, ry, xRotation, xs[i]);\n\n      if (x < minX) {\n        minX = x;\n      }\n\n      if (x > maxX) {\n        maxX = x;\n      }\n    }\n\n    var yDim = yExtrema(rx, ry, xRotation);\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var ys = [startAngle, endAngle];\n\n    for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n      var yAngle = yDim + i;\n\n      if (startAngle < endAngle) {\n        if (startAngle < yAngle && yAngle < endAngle) {\n          ys.push(yAngle);\n        }\n      } else {\n        if (endAngle < yAngle && yAngle < startAngle) {\n          ys.push(yAngle);\n        }\n      }\n    }\n\n    for (var i = 0; i < ys.length; i++) {\n      var y = yAt(cx, cy, rx, ry, xRotation, ys[i]);\n\n      if (y < minY) {\n        minY = y;\n      }\n\n      if (y > maxY) {\n        maxY = y;\n      }\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  },\n\n  /**\n   * 获取圆弧的长度，计算圆弧长度时不考虑旋转角度，\n   * 仅跟 rx, ry, startAngle, endAngle 相关\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   */\n  length: function length(cx, cy, rx, ry, xRotation, startAngle, endAngle) {},\n\n  /**\n   * 获取指定点到圆弧的最近距离的点\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   * @param {number} x0         指定点的 x\n   * @param {number} y0         指定点的 y\n   * @return {object} 到指定点最近距离的点\n   */\n  nearestPoint: function nearestPoint(cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n    // 将最近距离问题转换成到椭圆中心 0,0 没有旋转的椭圆问题\n    var relativeVector = rotate(x0 - cx, y0 - cy, -xRotation);\n\n    var _a = __read(relativeVector, 2),\n        x1 = _a[0],\n        y1 = _a[1]; // 计算点到椭圆的最近的点\n\n\n    var relativePoint = ellipse.nearestPoint(0, 0, rx, ry, x1, y1); // 获取点在椭圆上的角度\n\n    var angle = getAngle(rx, ry, relativePoint.x, relativePoint.y); // 点没有在圆弧上\n\n    if (angle < startAngle) {\n      // 小于起始圆弧\n      relativePoint = getPoint(rx, ry, startAngle);\n    } else if (angle > endAngle) {\n      // 大于结束圆弧\n      relativePoint = getPoint(rx, ry, endAngle);\n    } // 旋转到 xRotation 的角度\n\n\n    var vector = rotate(relativePoint.x, relativePoint.y, xRotation);\n    return {\n      x: vector[0] + cx,\n      y: vector[1] + cy\n    };\n  },\n  pointDistance: function pointDistance(cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n    var nearestPoint = this.nearestPoint(cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0);\n    return distance(nearestPoint.x, nearestPoint.y, x0, y0);\n  },\n  pointAt: function pointAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n    var angle = (endAngle - startAngle) * t + startAngle;\n    return {\n      x: xAt(cx, cy, rx, ry, xRotation, angle),\n      y: yAt(cx, cy, rx, ry, xRotation, angle)\n    };\n  },\n  tangentAngle: function tangentAngle(cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n    var angle = (endAngle - startAngle) * t + startAngle;\n    var dx = derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    var dy = derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    return piMod(Math.atan2(dy, dx));\n  }\n};"]},"metadata":{},"sourceType":"module"}