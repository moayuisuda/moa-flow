{"ast":null,"code":"import { __extends, __read, __spreadArray, __values } from \"tslib\";\nimport { DCHECK } from '../../utils';\nimport { CSSStyleValue } from './CSSStyleValue';\nimport { UnitType, CSSStyleValueType, BaseType, baseTypeToString, CSSUnitValue, CSSMathOperator, CSSMathInvert, CSSMathMax, CSSMathMin, CSSMathNegate, CSSMathSum, CSSMathProduct } from '.';\n/**\n * CSSNumericValue is the base class for numeric and length typed CSS Values.\n * @see https://drafts.css-houdini.org/css-typed-om/#numeric-objects\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.idl\n */\n\nvar CSSNumericValue =\n/** @class */\nfunction (_super) {\n  __extends(CSSNumericValue, _super);\n\n  function CSSNumericValue(type_) {\n    var _this = _super.call(this) || this;\n\n    _this.type_ = type_;\n    return _this;\n  }\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#296\n   */\n\n\n  CSSNumericValue.fromNumberish = function (value) {\n    if (typeof value === 'number') {\n      return new CSSUnitValue(value, UnitType.kNumber);\n    }\n\n    return value;\n  };\n\n  CSSNumericValue.fromPercentish = function (value) {\n    if (typeof value === 'number') {\n      return new CSSUnitValue(value * 100, UnitType.kPercentage);\n    }\n\n    return value;\n  };\n\n  CSSNumericValue.prototype.getType = function () {\n    return CSSStyleValueType.kUnknownType;\n  }; // toCSSValue() {\n  //   return null;\n  // }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/equals\n   */\n\n\n  CSSNumericValue.prototype.equals = function () {\n    var _this = this;\n\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    return values.every(function (value) {\n      return _this.equals(value);\n    });\n  };\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#439\n   */\n\n\n  CSSNumericValue.prototype.add = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kSumType, values, this); // eg. 1px + 2px = 3px\n\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kAdd);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathSum.create(values);\n  };\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#452\n   */\n\n\n  CSSNumericValue.prototype.sub = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    values = values.map(function (value) {\n      return value.negate();\n    });\n    prependValueForArithmetic(CSSStyleValueType.kSumType, values, this); // eg. 3px - 2px = 1px\n\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kAdd);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathSum.create(values);\n  };\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/mul\n   */\n\n\n  CSSNumericValue.prototype.mul = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kProductType, values, this);\n    var unitValue = maybeMultiplyAsUnitValue(values);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathProduct.create(values);\n  };\n  /**\n   * eg. calc(24px / 4%)\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/div\n   */\n\n\n  CSSNumericValue.prototype.div = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    values = values.map(function (value) {\n      return value.invert();\n    });\n    prependValueForArithmetic(CSSStyleValueType.kProductType, values, this);\n    var unitValue = maybeMultiplyAsUnitValue(values);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathProduct.create(values);\n  };\n\n  CSSNumericValue.prototype.min = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kMinType, values, this);\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kMin);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathMin.create(values);\n  };\n\n  CSSNumericValue.prototype.max = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kMaxType, values, this);\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kMax);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathMax.create(values);\n  };\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/to\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#331\n   */\n\n\n  CSSNumericValue.prototype.to = function (unitOrName) {\n    var sum = this.sumValue();\n    if (sum.length === 0 || sum.length !== 1) return null;\n    var value = cssNumericSumValueEntryToUnitValue(sum[0]);\n    if (!value) return null;\n    var unit;\n\n    if (typeof unitOrName === 'string') {\n      unit = CSSUnitValue.unitFromName(unitOrName);\n    } else {\n      unit = unitOrName;\n    }\n\n    return value.convertTo(unit);\n  };\n  /**\n   * converts the object's value to a CSSMathSum object to values of the specified unit.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/toSum\n   */\n\n\n  CSSNumericValue.prototype.toSum = function () {\n    var e_1, _a, e_2, _b, e_3, _c;\n\n    var unit_strings = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      unit_strings[_i] = arguments[_i];\n    }\n\n    try {\n      for (var unit_strings_1 = __values(unit_strings), unit_strings_1_1 = unit_strings_1.next(); !unit_strings_1_1.done; unit_strings_1_1 = unit_strings_1.next()) {\n        var unit_string = unit_strings_1_1.value;\n\n        if (!CSSNumericValue.isValidUnit(CSSNumericValue.unitFromName(unit_string))) {\n          return null;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (unit_strings_1_1 && !unit_strings_1_1.done && (_a = unit_strings_1.return)) _a.call(unit_strings_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var sum = this.sumValue();\n\n    if (!sum.length) {\n      return null;\n    }\n\n    var values = [];\n\n    try {\n      for (var sum_1 = __values(sum), sum_1_1 = sum_1.next(); !sum_1_1.done; sum_1_1 = sum_1.next()) {\n        var term = sum_1_1.value;\n        var value = cssNumericSumValueEntryToUnitValue(term);\n\n        if (!value) {\n          return null;\n        }\n\n        values.push(value);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (sum_1_1 && !sum_1_1.done && (_b = sum_1.return)) _b.call(sum_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    if (unit_strings.length === 0) {\n      values.sort(function (a, b) {\n        return a.unit - b.unit;\n      }); // We got 'values' from a sum value, so it must be a valid CSSMathSum.\n\n      var result_1 = CSSMathSum.create(values);\n      DCHECK(!!result_1);\n      return result_1;\n    }\n\n    var result = [];\n\n    var _loop_1 = function _loop_1(unit_string) {\n      var target_unit = CSSNumericValue.unitFromName(unit_string);\n      DCHECK(CSSNumericValue.isValidUnit(target_unit)); // Collect all the terms that are compatible with this unit.\n      // We mark used terms as null so we don't use them again.\n\n      var total_value = values.reduce(function (cur_sum, value, i) {\n        if (value) {\n          var unit_value = value;\n          var converted_value = unit_value.convertTo(target_unit);\n\n          if (converted_value) {\n            cur_sum += converted_value.value;\n            values[i] = null;\n          }\n        }\n\n        return cur_sum;\n      }, 0);\n      result.push(new CSSUnitValue(total_value, target_unit));\n    };\n\n    try {\n      for (var unit_strings_2 = __values(unit_strings), unit_strings_2_1 = unit_strings_2.next(); !unit_strings_2_1.done; unit_strings_2_1 = unit_strings_2.next()) {\n        var unit_string = unit_strings_2_1.value;\n\n        _loop_1(unit_string);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (unit_strings_2_1 && !unit_strings_2_1.done && (_c = unit_strings_2.return)) _c.call(unit_strings_2);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (values.some(function (v) {\n      return !!v;\n    })) {\n      throw new Error('There were leftover terms that were not converted');\n    }\n\n    return CSSMathSum.create(result);\n  };\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/type\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#414\n   */\n\n\n  CSSNumericValue.prototype.type = function () {\n    var type = {\n      length: 0,\n      angle: 0,\n      time: 0,\n      frequency: 0,\n      resolution: 0,\n      flex: 0,\n      percent: 0,\n      percentHint: 'length'\n    };\n    var exponent = this.type_.exponent(BaseType.kLength);\n\n    if (exponent) {\n      type.length = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kAngle);\n\n    if (exponent) {\n      type.angle = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kTime);\n\n    if (exponent) {\n      type.time = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kFrequency);\n\n    if (exponent) {\n      type.frequency = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kResolution);\n\n    if (exponent) {\n      type.resolution = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kFlex);\n\n    if (exponent) {\n      type.flex = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kPercent);\n\n    if (exponent) {\n      type.percent = exponent;\n    }\n\n    if (this.type_.hasPercentHint) {\n      type.percentHint = baseTypeToString(this.type_.percentHint);\n    }\n\n    return type;\n  };\n\n  CSSNumericValue.isValidUnit = function (unit) {\n    if (unit === UnitType.kUserUnits) return false;\n    if (unit === UnitType.kNumber || unit == UnitType.kPercentage || this.isLength(unit) || this.isAngle(unit) || this.isTime(unit) || this.isFrequency(unit) || this.isResolution(unit) || this.isFlex(unit)) return true;\n    return false;\n  };\n\n  CSSNumericValue.prototype.negate = function () {\n    return CSSMathNegate.create(this);\n  };\n\n  CSSNumericValue.prototype.invert = function () {\n    return CSSMathInvert.create(this);\n  };\n\n  return CSSNumericValue;\n}(CSSStyleValue);\n\nexport { CSSNumericValue };\n\nfunction cssNumberishesToNumericValues(values) {\n  return values.map(CSSNumericValue.fromNumberish);\n}\n\nfunction prependValueForArithmetic(type, values, value) {\n  DCHECK(!!value);\n\n  if (value.getType() === type) {\n    values.unshift.apply(values, __spreadArray([], __read(value.numericValues()), false));\n  } else {\n    values.unshift(value);\n  }\n}\n\nfunction cssNumericSumValueEntryToUnitValue(term) {\n  if (Object.keys(term.units).length === 0) {\n    return new CSSUnitValue(term.value);\n  }\n\n  if (Object.keys(term.units).length === 1 && term.units[Object.keys(term.units)[0]] === 1) {\n    return new CSSUnitValue(term.value, Number(Object.keys(term.units)[0]));\n  }\n\n  return null;\n}\n\nfunction maybeSimplifyAsUnitValue(values, operator) {\n  DCHECK(!!values.length);\n  var first_unit_value = values[0] instanceof CSSUnitValue ? values[0] : null;\n  if (!first_unit_value) return null;\n  var final_value = first_unit_value.value;\n\n  for (var i = 1; i < values.length; i++) {\n    var unit_value = values[i] instanceof CSSUnitValue ? values[i] : null;\n    if (!unit_value || unit_value.unit !== first_unit_value.unit) return null;\n\n    if (operator === CSSMathOperator.kAdd) {\n      final_value += unit_value.value;\n    } else if (operator === CSSMathOperator.kMax) {\n      final_value = Math.max(final_value, unit_value.value);\n    } else if (operator === CSSMathOperator.kMin) {\n      final_value = Math.min(final_value, unit_value.value);\n    }\n  }\n\n  return new CSSUnitValue(final_value, first_unit_value.unit);\n}\n\nfunction maybeMultiplyAsUnitValue(values) {\n  DCHECK(!!values.length); // We are allowed one unit value with type other than kNumber.\n\n  var unit_other_than_number = UnitType.kNumber;\n  var final_value = 1.0;\n\n  for (var i = 0; i < values.length; i++) {\n    var unit_value = values[i] instanceof CSSUnitValue ? values[i] : null;\n    if (!unit_value) return null;\n\n    if (unit_value.unit !== UnitType.kNumber) {\n      if (unit_other_than_number !== UnitType.kNumber) return null;\n      unit_other_than_number = unit_value.unit;\n    }\n\n    final_value *= unit_value.value;\n  }\n\n  return new CSSUnitValue(final_value, unit_other_than_number);\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSNumericValue.js"],"names":["__extends","__read","__spreadArray","__values","DCHECK","CSSStyleValue","UnitType","CSSStyleValueType","BaseType","baseTypeToString","CSSUnitValue","CSSMathOperator","CSSMathInvert","CSSMathMax","CSSMathMin","CSSMathNegate","CSSMathSum","CSSMathProduct","CSSNumericValue","_super","type_","_this","call","fromNumberish","value","kNumber","fromPercentish","kPercentage","prototype","getType","kUnknownType","equals","numberishes","_i","arguments","length","values","cssNumberishesToNumericValues","every","add","prependValueForArithmetic","kSumType","unitValue","maybeSimplifyAsUnitValue","kAdd","create","sub","map","negate","mul","kProductType","maybeMultiplyAsUnitValue","div","invert","min","kMinType","kMin","max","kMaxType","kMax","to","unitOrName","sum","sumValue","cssNumericSumValueEntryToUnitValue","unit","unitFromName","convertTo","toSum","e_1","_a","e_2","_b","e_3","_c","unit_strings","unit_strings_1","unit_strings_1_1","next","done","unit_string","isValidUnit","e_1_1","error","return","sum_1","sum_1_1","term","push","e_2_1","sort","a","b","result_1","result","_loop_1","target_unit","total_value","reduce","cur_sum","i","unit_value","converted_value","unit_strings_2","unit_strings_2_1","e_3_1","some","v","Error","type","angle","time","frequency","resolution","flex","percent","percentHint","exponent","kLength","kAngle","kTime","kFrequency","kResolution","kFlex","kPercent","hasPercentHint","kUserUnits","isLength","isAngle","isTime","isFrequency","isResolution","isFlex","unshift","apply","numericValues","Object","keys","units","Number","operator","first_unit_value","final_value","Math","unit_other_than_number"],"mappings":"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","sourcesContent":["import { __extends, __read, __spreadArray, __values } from \"tslib\";\nimport { DCHECK } from '../../utils';\nimport { CSSStyleValue } from './CSSStyleValue';\nimport { UnitType, CSSStyleValueType, BaseType, baseTypeToString, CSSUnitValue, CSSMathOperator, CSSMathInvert, CSSMathMax, CSSMathMin, CSSMathNegate, CSSMathSum, CSSMathProduct } from '.';\n/**\n * CSSNumericValue is the base class for numeric and length typed CSS Values.\n * @see https://drafts.css-houdini.org/css-typed-om/#numeric-objects\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.idl\n */\n\nvar CSSNumericValue =\n/** @class */\nfunction (_super) {\n  __extends(CSSNumericValue, _super);\n\n  function CSSNumericValue(type_) {\n    var _this = _super.call(this) || this;\n\n    _this.type_ = type_;\n    return _this;\n  }\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#296\n   */\n\n\n  CSSNumericValue.fromNumberish = function (value) {\n    if (typeof value === 'number') {\n      return new CSSUnitValue(value, UnitType.kNumber);\n    }\n\n    return value;\n  };\n\n  CSSNumericValue.fromPercentish = function (value) {\n    if (typeof value === 'number') {\n      return new CSSUnitValue(value * 100, UnitType.kPercentage);\n    }\n\n    return value;\n  };\n\n  CSSNumericValue.prototype.getType = function () {\n    return CSSStyleValueType.kUnknownType;\n  }; // toCSSValue() {\n  //   return null;\n  // }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/equals\n   */\n\n\n  CSSNumericValue.prototype.equals = function () {\n    var _this = this;\n\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    return values.every(function (value) {\n      return _this.equals(value);\n    });\n  };\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#439\n   */\n\n\n  CSSNumericValue.prototype.add = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kSumType, values, this); // eg. 1px + 2px = 3px\n\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kAdd);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathSum.create(values);\n  };\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#452\n   */\n\n\n  CSSNumericValue.prototype.sub = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    values = values.map(function (value) {\n      return value.negate();\n    });\n    prependValueForArithmetic(CSSStyleValueType.kSumType, values, this); // eg. 3px - 2px = 1px\n\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kAdd);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathSum.create(values);\n  };\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/mul\n   */\n\n\n  CSSNumericValue.prototype.mul = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kProductType, values, this);\n    var unitValue = maybeMultiplyAsUnitValue(values);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathProduct.create(values);\n  };\n  /**\n   * eg. calc(24px / 4%)\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/div\n   */\n\n\n  CSSNumericValue.prototype.div = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    values = values.map(function (value) {\n      return value.invert();\n    });\n    prependValueForArithmetic(CSSStyleValueType.kProductType, values, this);\n    var unitValue = maybeMultiplyAsUnitValue(values);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathProduct.create(values);\n  };\n\n  CSSNumericValue.prototype.min = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kMinType, values, this);\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kMin);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathMin.create(values);\n  };\n\n  CSSNumericValue.prototype.max = function () {\n    var numberishes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      numberishes[_i] = arguments[_i];\n    }\n\n    var values = cssNumberishesToNumericValues(numberishes);\n    prependValueForArithmetic(CSSStyleValueType.kMaxType, values, this);\n    var unitValue = maybeSimplifyAsUnitValue(values, CSSMathOperator.kMax);\n\n    if (unitValue) {\n      return unitValue;\n    }\n\n    return CSSMathMax.create(values);\n  };\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/to\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#331\n   */\n\n\n  CSSNumericValue.prototype.to = function (unitOrName) {\n    var sum = this.sumValue();\n    if (sum.length === 0 || sum.length !== 1) return null;\n    var value = cssNumericSumValueEntryToUnitValue(sum[0]);\n    if (!value) return null;\n    var unit;\n\n    if (typeof unitOrName === 'string') {\n      unit = CSSUnitValue.unitFromName(unitOrName);\n    } else {\n      unit = unitOrName;\n    }\n\n    return value.convertTo(unit);\n  };\n  /**\n   * converts the object's value to a CSSMathSum object to values of the specified unit.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/toSum\n   */\n\n\n  CSSNumericValue.prototype.toSum = function () {\n    var e_1, _a, e_2, _b, e_3, _c;\n\n    var unit_strings = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      unit_strings[_i] = arguments[_i];\n    }\n\n    try {\n      for (var unit_strings_1 = __values(unit_strings), unit_strings_1_1 = unit_strings_1.next(); !unit_strings_1_1.done; unit_strings_1_1 = unit_strings_1.next()) {\n        var unit_string = unit_strings_1_1.value;\n\n        if (!CSSNumericValue.isValidUnit(CSSNumericValue.unitFromName(unit_string))) {\n          return null;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (unit_strings_1_1 && !unit_strings_1_1.done && (_a = unit_strings_1.return)) _a.call(unit_strings_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var sum = this.sumValue();\n\n    if (!sum.length) {\n      return null;\n    }\n\n    var values = [];\n\n    try {\n      for (var sum_1 = __values(sum), sum_1_1 = sum_1.next(); !sum_1_1.done; sum_1_1 = sum_1.next()) {\n        var term = sum_1_1.value;\n        var value = cssNumericSumValueEntryToUnitValue(term);\n\n        if (!value) {\n          return null;\n        }\n\n        values.push(value);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (sum_1_1 && !sum_1_1.done && (_b = sum_1.return)) _b.call(sum_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    if (unit_strings.length === 0) {\n      values.sort(function (a, b) {\n        return a.unit - b.unit;\n      }); // We got 'values' from a sum value, so it must be a valid CSSMathSum.\n\n      var result_1 = CSSMathSum.create(values);\n      DCHECK(!!result_1);\n      return result_1;\n    }\n\n    var result = [];\n\n    var _loop_1 = function _loop_1(unit_string) {\n      var target_unit = CSSNumericValue.unitFromName(unit_string);\n      DCHECK(CSSNumericValue.isValidUnit(target_unit)); // Collect all the terms that are compatible with this unit.\n      // We mark used terms as null so we don't use them again.\n\n      var total_value = values.reduce(function (cur_sum, value, i) {\n        if (value) {\n          var unit_value = value;\n          var converted_value = unit_value.convertTo(target_unit);\n\n          if (converted_value) {\n            cur_sum += converted_value.value;\n            values[i] = null;\n          }\n        }\n\n        return cur_sum;\n      }, 0);\n      result.push(new CSSUnitValue(total_value, target_unit));\n    };\n\n    try {\n      for (var unit_strings_2 = __values(unit_strings), unit_strings_2_1 = unit_strings_2.next(); !unit_strings_2_1.done; unit_strings_2_1 = unit_strings_2.next()) {\n        var unit_string = unit_strings_2_1.value;\n\n        _loop_1(unit_string);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (unit_strings_2_1 && !unit_strings_2_1.done && (_c = unit_strings_2.return)) _c.call(unit_strings_2);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (values.some(function (v) {\n      return !!v;\n    })) {\n      throw new Error('There were leftover terms that were not converted');\n    }\n\n    return CSSMathSum.create(result);\n  };\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue/type\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.cc#414\n   */\n\n\n  CSSNumericValue.prototype.type = function () {\n    var type = {\n      length: 0,\n      angle: 0,\n      time: 0,\n      frequency: 0,\n      resolution: 0,\n      flex: 0,\n      percent: 0,\n      percentHint: 'length'\n    };\n    var exponent = this.type_.exponent(BaseType.kLength);\n\n    if (exponent) {\n      type.length = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kAngle);\n\n    if (exponent) {\n      type.angle = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kTime);\n\n    if (exponent) {\n      type.time = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kFrequency);\n\n    if (exponent) {\n      type.frequency = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kResolution);\n\n    if (exponent) {\n      type.resolution = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kFlex);\n\n    if (exponent) {\n      type.flex = exponent;\n    }\n\n    exponent = this.type_.exponent(BaseType.kPercent);\n\n    if (exponent) {\n      type.percent = exponent;\n    }\n\n    if (this.type_.hasPercentHint) {\n      type.percentHint = baseTypeToString(this.type_.percentHint);\n    }\n\n    return type;\n  };\n\n  CSSNumericValue.isValidUnit = function (unit) {\n    if (unit === UnitType.kUserUnits) return false;\n    if (unit === UnitType.kNumber || unit == UnitType.kPercentage || this.isLength(unit) || this.isAngle(unit) || this.isTime(unit) || this.isFrequency(unit) || this.isResolution(unit) || this.isFlex(unit)) return true;\n    return false;\n  };\n\n  CSSNumericValue.prototype.negate = function () {\n    return CSSMathNegate.create(this);\n  };\n\n  CSSNumericValue.prototype.invert = function () {\n    return CSSMathInvert.create(this);\n  };\n\n  return CSSNumericValue;\n}(CSSStyleValue);\n\nexport { CSSNumericValue };\n\nfunction cssNumberishesToNumericValues(values) {\n  return values.map(CSSNumericValue.fromNumberish);\n}\n\nfunction prependValueForArithmetic(type, values, value) {\n  DCHECK(!!value);\n\n  if (value.getType() === type) {\n    values.unshift.apply(values, __spreadArray([], __read(value.numericValues()), false));\n  } else {\n    values.unshift(value);\n  }\n}\n\nfunction cssNumericSumValueEntryToUnitValue(term) {\n  if (Object.keys(term.units).length === 0) {\n    return new CSSUnitValue(term.value);\n  }\n\n  if (Object.keys(term.units).length === 1 && term.units[Object.keys(term.units)[0]] === 1) {\n    return new CSSUnitValue(term.value, Number(Object.keys(term.units)[0]));\n  }\n\n  return null;\n}\n\nfunction maybeSimplifyAsUnitValue(values, operator) {\n  DCHECK(!!values.length);\n  var first_unit_value = values[0] instanceof CSSUnitValue ? values[0] : null;\n  if (!first_unit_value) return null;\n  var final_value = first_unit_value.value;\n\n  for (var i = 1; i < values.length; i++) {\n    var unit_value = values[i] instanceof CSSUnitValue ? values[i] : null;\n    if (!unit_value || unit_value.unit !== first_unit_value.unit) return null;\n\n    if (operator === CSSMathOperator.kAdd) {\n      final_value += unit_value.value;\n    } else if (operator === CSSMathOperator.kMax) {\n      final_value = Math.max(final_value, unit_value.value);\n    } else if (operator === CSSMathOperator.kMin) {\n      final_value = Math.min(final_value, unit_value.value);\n    }\n  }\n\n  return new CSSUnitValue(final_value, first_unit_value.unit);\n}\n\nfunction maybeMultiplyAsUnitValue(values) {\n  DCHECK(!!values.length); // We are allowed one unit value with type other than kNumber.\n\n  var unit_other_than_number = UnitType.kNumber;\n  var final_value = 1.0;\n\n  for (var i = 0; i < values.length; i++) {\n    var unit_value = values[i] instanceof CSSUnitValue ? values[i] : null;\n    if (!unit_value) return null;\n\n    if (unit_value.unit !== UnitType.kNumber) {\n      if (unit_other_than_number !== UnitType.kNumber) return null;\n      unit_other_than_number = unit_value.unit;\n    }\n\n    final_value *= unit_value.value;\n  }\n\n  return new CSSUnitValue(final_value, unit_other_than_number);\n}"]},"metadata":{},"sourceType":"module"}