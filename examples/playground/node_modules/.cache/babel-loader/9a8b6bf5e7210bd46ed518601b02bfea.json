{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { singleton } from 'mana-syringe';\n/**\n * used in following scenes:\n * - g `ctx.measureText`\n * - g-plugin-canvas-picker `ctx.isPointInPath`\n * - g-plugin-webgl-renderer `ctx.createLinearGradient` and generate texture\n */\n\nvar OffscreenCanvasCreator =\n/** @class */\nfunction () {\n  function OffscreenCanvasCreator() {}\n\n  OffscreenCanvasCreator.prototype.getOrCreateCanvas = function (offscreenCanvas) {\n    if (this.canvas) {\n      return this.canvas;\n    } // user-defined offscreen canvas\n\n\n    if (offscreenCanvas) {\n      this.canvas = offscreenCanvas;\n      this.context = this.canvas.getContext('2d');\n    } else {\n      try {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        this.canvas = new window.OffscreenCanvas(0, 0);\n        this.context = this.canvas.getContext('2d');\n\n        if (!this.context || !this.context.measureText) {\n          this.canvas = document.createElement('canvas');\n          this.context = this.canvas.getContext('2d');\n        }\n      } catch (ex) {\n        this.canvas = document.createElement('canvas');\n        this.context = this.canvas.getContext('2d');\n      }\n    }\n\n    this.canvas.width = 10;\n    this.canvas.height = 10;\n    return this.canvas;\n  };\n\n  OffscreenCanvasCreator.prototype.getOrCreateContext = function (offscreenCanvas) {\n    if (this.context) {\n      return this.context;\n    }\n\n    this.getOrCreateCanvas(offscreenCanvas);\n    return this.context;\n  };\n\n  OffscreenCanvasCreator = __decorate([singleton()], OffscreenCanvasCreator);\n  return OffscreenCanvasCreator;\n}();\n\nexport { OffscreenCanvasCreator };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/services/OffscreenCanvasCreator.js"],"names":["__decorate","singleton","OffscreenCanvasCreator","prototype","getOrCreateCanvas","offscreenCanvas","canvas","context","getContext","window","OffscreenCanvas","measureText","document","createElement","ex","width","height","getOrCreateContext"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,sBAAsB;AAC1B;AACA,YAAY;AACV,WAASA,sBAAT,GAAkC,CAAE;;AAEpCA,EAAAA,sBAAsB,CAACC,SAAvB,CAAiCC,iBAAjC,GAAqD,UAAUC,eAAV,EAA2B;AAC9E,QAAI,KAAKC,MAAT,EAAiB;AACf,aAAO,KAAKA,MAAZ;AACD,KAH6E,CAG5E;;;AAGF,QAAID,eAAJ,EAAqB;AACnB,WAAKC,MAAL,GAAcD,eAAd;AACA,WAAKE,OAAL,GAAe,KAAKD,MAAL,CAAYE,UAAZ,CAAuB,IAAvB,CAAf;AACD,KAHD,MAGO;AACL,UAAI;AACF;AACA,aAAKF,MAAL,GAAc,IAAIG,MAAM,CAACC,eAAX,CAA2B,CAA3B,EAA8B,CAA9B,CAAd;AACA,aAAKH,OAAL,GAAe,KAAKD,MAAL,CAAYE,UAAZ,CAAuB,IAAvB,CAAf;;AAEA,YAAI,CAAC,KAAKD,OAAN,IAAiB,CAAC,KAAKA,OAAL,CAAaI,WAAnC,EAAgD;AAC9C,eAAKL,MAAL,GAAcM,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,eAAKN,OAAL,GAAe,KAAKD,MAAL,CAAYE,UAAZ,CAAuB,IAAvB,CAAf;AACD;AACF,OATD,CASE,OAAOM,EAAP,EAAW;AACX,aAAKR,MAAL,GAAcM,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,aAAKN,OAAL,GAAe,KAAKD,MAAL,CAAYE,UAAZ,CAAuB,IAAvB,CAAf;AACD;AACF;;AAED,SAAKF,MAAL,CAAYS,KAAZ,GAAoB,EAApB;AACA,SAAKT,MAAL,CAAYU,MAAZ,GAAqB,EAArB;AACA,WAAO,KAAKV,MAAZ;AACD,GA5BD;;AA8BAJ,EAAAA,sBAAsB,CAACC,SAAvB,CAAiCc,kBAAjC,GAAsD,UAAUZ,eAAV,EAA2B;AAC/E,QAAI,KAAKE,OAAT,EAAkB;AAChB,aAAO,KAAKA,OAAZ;AACD;;AAED,SAAKH,iBAAL,CAAuBC,eAAvB;AACA,WAAO,KAAKE,OAAZ;AACD,GAPD;;AASAL,EAAAA,sBAAsB,GAAGF,UAAU,CAAC,CAACC,SAAS,EAAV,CAAD,EAAgBC,sBAAhB,CAAnC;AACA,SAAOA,sBAAP;AACD,CA5CD,EAFA;;AAgDA,SAASA,sBAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { singleton } from 'mana-syringe';\n/**\n * used in following scenes:\n * - g `ctx.measureText`\n * - g-plugin-canvas-picker `ctx.isPointInPath`\n * - g-plugin-webgl-renderer `ctx.createLinearGradient` and generate texture\n */\n\nvar OffscreenCanvasCreator =\n/** @class */\nfunction () {\n  function OffscreenCanvasCreator() {}\n\n  OffscreenCanvasCreator.prototype.getOrCreateCanvas = function (offscreenCanvas) {\n    if (this.canvas) {\n      return this.canvas;\n    } // user-defined offscreen canvas\n\n\n    if (offscreenCanvas) {\n      this.canvas = offscreenCanvas;\n      this.context = this.canvas.getContext('2d');\n    } else {\n      try {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        this.canvas = new window.OffscreenCanvas(0, 0);\n        this.context = this.canvas.getContext('2d');\n\n        if (!this.context || !this.context.measureText) {\n          this.canvas = document.createElement('canvas');\n          this.context = this.canvas.getContext('2d');\n        }\n      } catch (ex) {\n        this.canvas = document.createElement('canvas');\n        this.context = this.canvas.getContext('2d');\n      }\n    }\n\n    this.canvas.width = 10;\n    this.canvas.height = 10;\n    return this.canvas;\n  };\n\n  OffscreenCanvasCreator.prototype.getOrCreateContext = function (offscreenCanvas) {\n    if (this.context) {\n      return this.context;\n    }\n\n    this.getOrCreateCanvas(offscreenCanvas);\n    return this.context;\n  };\n\n  OffscreenCanvasCreator = __decorate([singleton()], OffscreenCanvasCreator);\n  return OffscreenCanvasCreator;\n}();\n\nexport { OffscreenCanvasCreator };"]},"metadata":{},"sourceType":"module"}