{"ast":null,"code":"import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport polyline from './polyline';\n\nfunction getAllPoints(points) {\n  var tmp = points.slice(0);\n\n  if (points.length) {\n    tmp.push(points[0]);\n  }\n\n  return tmp;\n}\n\nexport default {\n  /**\n   * 计算多边形的包围盒\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 包围盒\n   */\n  box: function box(points) {\n    return polyline.box(points);\n  },\n\n  /**\n   * 计算多边形的长度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 多边形边的长度\n   */\n  length: function length(points) {\n    return lengthOfSegment(getAllPoints(points));\n  },\n\n  /**\n   * 根据比例获取多边形的点\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多边形的长度上的比例\n   * @return {object} 根据比例值计算出来的点\n   */\n  pointAt: function pointAt(points, t) {\n    return pointAtSegments(getAllPoints(points), t);\n  },\n\n  /**\n   * 指定点到多边形的距离\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} x 指定点的 x\n   * @param {number} y 指定点的 y\n   * @return {number} 点到多边形的距离\n   */\n  pointDistance: function pointDistance(points, x, y) {\n    return distanceAtSegment(getAllPoints(points), x, y);\n  },\n\n  /**\n   * 根据比例获取多边形的切线角度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多边形的长度上的比例\n   * @return {object} 根据比例值计算出来的角度\n   */\n  tangentAngle: function tangentAngle(points, t) {\n    return angleAtSegments(getAllPoints(points), t);\n  }\n};","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g-math/es/polygon.js"],"names":["pointAtSegments","angleAtSegments","distanceAtSegment","lengthOfSegment","polyline","getAllPoints","points","tmp","slice","length","push","box","pointAt","t","pointDistance","x","y","tangentAngle"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,iBAA3C,EAA8DC,eAA9D,QAAqF,YAArF;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAIC,GAAG,GAAGD,MAAM,CAACE,KAAP,CAAa,CAAb,CAAV;;AAEA,MAAIF,MAAM,CAACG,MAAX,EAAmB;AACjBF,IAAAA,GAAG,CAACG,IAAJ,CAASJ,MAAM,CAAC,CAAD,CAAf;AACD;;AAED,SAAOC,GAAP;AACD;;AAED,eAAe;AACb;AACF;AACA;AACA;AACA;AACEI,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaL,MAAb,EAAqB;AACxB,WAAOF,QAAQ,CAACO,GAAT,CAAaL,MAAb,CAAP;AACD,GARY;;AAUb;AACF;AACA;AACA;AACA;AACEG,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBH,MAAhB,EAAwB;AAC9B,WAAOH,eAAe,CAACE,YAAY,CAACC,MAAD,CAAb,CAAtB;AACD,GAjBY;;AAmBb;AACF;AACA;AACA;AACA;AACA;AACEM,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBN,MAAjB,EAAyBO,CAAzB,EAA4B;AACnC,WAAOb,eAAe,CAACK,YAAY,CAACC,MAAD,CAAb,EAAuBO,CAAvB,CAAtB;AACD,GA3BY;;AA6Bb;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBR,MAAvB,EAA+BS,CAA/B,EAAkCC,CAAlC,EAAqC;AAClD,WAAOd,iBAAiB,CAACG,YAAY,CAACC,MAAD,CAAb,EAAuBS,CAAvB,EAA0BC,CAA1B,CAAxB;AACD,GAtCY;;AAwCb;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBX,MAAtB,EAA8BO,CAA9B,EAAiC;AAC7C,WAAOZ,eAAe,CAACI,YAAY,CAACC,MAAD,CAAb,EAAuBO,CAAvB,CAAtB;AACD;AAhDY,CAAf","sourcesContent":["import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport polyline from './polyline';\n\nfunction getAllPoints(points) {\n  var tmp = points.slice(0);\n\n  if (points.length) {\n    tmp.push(points[0]);\n  }\n\n  return tmp;\n}\n\nexport default {\n  /**\n   * 计算多边形的包围盒\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 包围盒\n   */\n  box: function box(points) {\n    return polyline.box(points);\n  },\n\n  /**\n   * 计算多边形的长度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 多边形边的长度\n   */\n  length: function length(points) {\n    return lengthOfSegment(getAllPoints(points));\n  },\n\n  /**\n   * 根据比例获取多边形的点\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多边形的长度上的比例\n   * @return {object} 根据比例值计算出来的点\n   */\n  pointAt: function pointAt(points, t) {\n    return pointAtSegments(getAllPoints(points), t);\n  },\n\n  /**\n   * 指定点到多边形的距离\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} x 指定点的 x\n   * @param {number} y 指定点的 y\n   * @return {number} 点到多边形的距离\n   */\n  pointDistance: function pointDistance(points, x, y) {\n    return distanceAtSegment(getAllPoints(points), x, y);\n  },\n\n  /**\n   * 根据比例获取多边形的切线角度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多边形的长度上的比例\n   * @return {object} 根据比例值计算出来的角度\n   */\n  tangentAngle: function tangentAngle(points, t) {\n    return angleAtSegments(getAllPoints(points), t);\n  }\n};"]},"metadata":{},"sourceType":"module"}