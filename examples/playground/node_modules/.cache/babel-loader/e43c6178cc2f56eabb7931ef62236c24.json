{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { singleton } from 'mana-syringe';\nimport { parseColor, mergeColors } from '../parser';\nimport { CSSKeywordValue, CSSRGB } from '../cssom';\n/**\n * opacity\n */\n\nvar CSSPropertyColor =\n/** @class */\nfunction () {\n  function CSSPropertyColor() {\n    this.parser = parseColor;\n    this.mixer = mergeColors;\n  }\n\n  CSSPropertyColor.prototype.calculator = function (name, oldParsed, parsed, object, registry) {\n    if (parsed instanceof CSSKeywordValue) {\n      // 'unset' 'none'\n      return new CSSRGB(0, 0, 0, 0, parsed.value === 'none');\n    }\n\n    return parsed;\n  };\n\n  CSSPropertyColor = __decorate([singleton()], CSSPropertyColor);\n  return CSSPropertyColor;\n}();\n\nexport { CSSPropertyColor };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/properties/CSSPropertyColor.js"],"names":["__decorate","singleton","parseColor","mergeColors","CSSKeywordValue","CSSRGB","CSSPropertyColor","parser","mixer","prototype","calculator","name","oldParsed","parsed","object","registry","value"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,WAAxC;AACA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,UAAxC;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB;AACpB;AACA,YAAY;AACV,WAASA,gBAAT,GAA4B;AAC1B,SAAKC,MAAL,GAAcL,UAAd;AACA,SAAKM,KAAL,GAAaL,WAAb;AACD;;AAEDG,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BC,UAA3B,GAAwC,UAAUC,IAAV,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,QAA3C,EAAqD;AAC3F,QAAIF,MAAM,YAAYT,eAAtB,EAAuC;AACrC;AACA,aAAO,IAAIC,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuBQ,MAAM,CAACG,KAAP,KAAiB,MAAxC,CAAP;AACD;;AAED,WAAOH,MAAP;AACD,GAPD;;AASAP,EAAAA,gBAAgB,GAAGN,UAAU,CAAC,CAACC,SAAS,EAAV,CAAD,EAAgBK,gBAAhB,CAA7B;AACA,SAAOA,gBAAP;AACD,CAjBD,EAFA;;AAqBA,SAASA,gBAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { singleton } from 'mana-syringe';\nimport { parseColor, mergeColors } from '../parser';\nimport { CSSKeywordValue, CSSRGB } from '../cssom';\n/**\n * opacity\n */\n\nvar CSSPropertyColor =\n/** @class */\nfunction () {\n  function CSSPropertyColor() {\n    this.parser = parseColor;\n    this.mixer = mergeColors;\n  }\n\n  CSSPropertyColor.prototype.calculator = function (name, oldParsed, parsed, object, registry) {\n    if (parsed instanceof CSSKeywordValue) {\n      // 'unset' 'none'\n      return new CSSRGB(0, 0, 0, 0, parsed.value === 'none');\n    }\n\n    return parsed;\n  };\n\n  CSSPropertyColor = __decorate([singleton()], CSSPropertyColor);\n  return CSSPropertyColor;\n}();\n\nexport { CSSPropertyColor };"]},"metadata":{},"sourceType":"module"}