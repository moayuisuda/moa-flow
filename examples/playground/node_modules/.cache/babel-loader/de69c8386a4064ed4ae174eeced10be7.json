{"ast":null,"code":"import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseUniq from './_baseUniq.js';\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\n\nfunction baseXor(arrays, iteratee, comparator) {\n  var length = arrays.length;\n\n  if (length < 2) {\n    return length ? baseUniq(arrays[0]) : [];\n  }\n\n  var index = -1,\n      result = Array(length);\n\n  while (++index < length) {\n    var array = arrays[index],\n        othIndex = -1;\n\n    while (++othIndex < length) {\n      if (othIndex != index) {\n        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n      }\n    }\n  }\n\n  return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n}\n\nexport default baseXor;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/lodash-es/_baseXor.js"],"names":["baseDifference","baseFlatten","baseUniq","baseXor","arrays","iteratee","comparator","length","index","result","Array","array","othIndex"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,sBAA3B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+C;AAC7C,MAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;;AACA,MAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,WAAOA,MAAM,GAAGL,QAAQ,CAACE,MAAM,CAAC,CAAD,CAAP,CAAX,GAAyB,EAAtC;AACD;;AACD,MAAII,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,MAAM,GAAGC,KAAK,CAACH,MAAD,CADlB;;AAGA,SAAO,EAAEC,KAAF,GAAUD,MAAjB,EAAyB;AACvB,QAAII,KAAK,GAAGP,MAAM,CAACI,KAAD,CAAlB;AAAA,QACII,QAAQ,GAAG,CAAC,CADhB;;AAGA,WAAO,EAAEA,QAAF,GAAaL,MAApB,EAA4B;AAC1B,UAAIK,QAAQ,IAAIJ,KAAhB,EAAuB;AACrBC,QAAAA,MAAM,CAACD,KAAD,CAAN,GAAgBR,cAAc,CAACS,MAAM,CAACD,KAAD,CAAN,IAAiBG,KAAlB,EAAyBP,MAAM,CAACQ,QAAD,CAA/B,EAA2CP,QAA3C,EAAqDC,UAArD,CAA9B;AACD;AACF;AACF;;AACD,SAAOJ,QAAQ,CAACD,WAAW,CAACQ,MAAD,EAAS,CAAT,CAAZ,EAAyBJ,QAAzB,EAAmCC,UAAnC,CAAf;AACD;;AAED,eAAeH,OAAf","sourcesContent":["import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var length = arrays.length;\n  if (length < 2) {\n    return length ? baseUniq(arrays[0]) : [];\n  }\n  var index = -1,\n      result = Array(length);\n\n  while (++index < length) {\n    var array = arrays[index],\n        othIndex = -1;\n\n    while (++othIndex < length) {\n      if (othIndex != index) {\n        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n      }\n    }\n  }\n  return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n}\n\nexport default baseXor;\n"]},"metadata":{},"sourceType":"module"}