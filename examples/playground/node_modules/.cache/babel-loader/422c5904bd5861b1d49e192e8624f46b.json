{"ast":null,"code":"import { arcToCubic } from './arc-2-cubic';\nimport { quadToCubic } from './quad-2-cubic';\nimport { lineToCubic } from './line-2-cubic';\nexport function segmentToCubic(segment, params) {\n  if ('TQ'.indexOf(segment[0]) < 0) {\n    params.qx = null;\n    params.qy = null;\n  }\n\n  var _a = segment.slice(1),\n      s1 = _a[0],\n      s2 = _a[1];\n\n  switch (segment[0]) {\n    case 'M':\n      params.x = s1;\n      params.y = s2;\n      return segment;\n\n    case 'A':\n      return ['C'].concat(arcToCubic.apply(0, [params.x1, params.y1].concat(segment.slice(1))));\n\n    case 'Q':\n      params.qx = s1;\n      params.qy = s2;\n      return ['C'].concat(quadToCubic.apply(0, [params.x1, params.y1].concat(segment.slice(1))));\n\n    case 'L':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, segment[1], segment[2]));\n\n    case 'H':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, segment[1], params.y1));\n\n    case 'V':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, params.x1, segment[1]));\n\n    case 'Z':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, params.x, params.y));\n\n    default:\n  }\n\n  return segment;\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAGA,OAAM,SAAUC,cAAV,CAAyBC,OAAzB,EAA+CC,MAA/C,EAAoE;AACxE,MAAI,KAAKC,OAAL,CAAaF,OAAO,CAAC,CAAD,CAApB,IAA2B,CAA/B,EAAkC;AAChCC,UAAM,CAACE,EAAP,GAAY,IAAZ;AACAF,UAAM,CAACG,EAAP,GAAY,IAAZ;AACD;;AAEK,WAAWJ,OAAO,CAACK,KAAR,CAAc,CAAd,CAAX;AAAA,MAACC,EAAE,QAAH;AAAA,MAAKC,EAAE,QAAP;;AAEN,UAAQP,OAAO,CAAC,CAAD,CAAf;AACE,SAAK,GAAL;AACEC,YAAM,CAACO,CAAP,GAAWF,EAAX;AACAL,YAAM,CAACQ,CAAP,GAAWF,EAAX;AACA,aAAOP,OAAP;;AACF,SAAK,GAAL;AACE,aAAO,CAAC,GAAD,EAAMU,MAAN,CAAad,UAAU,CAACe,KAAX,CAAiB,CAAjB,EAAoB,CAACV,MAAM,CAACW,EAAR,EAAYX,MAAM,CAACY,EAAnB,EAAuBH,MAAvB,CAA8BV,OAAO,CAACK,KAAR,CAAc,CAAd,CAA9B,CAApB,CAAb,CAAP;;AACF,SAAK,GAAL;AACEJ,YAAM,CAACE,EAAP,GAAYG,EAAZ;AACAL,YAAM,CAACG,EAAP,GAAYG,EAAZ;AACA,aAAO,CAAC,GAAD,EAAMG,MAAN,CAAab,WAAW,CAACc,KAAZ,CAAkB,CAAlB,EAAqB,CAACV,MAAM,CAACW,EAAR,EAAYX,MAAM,CAACY,EAAnB,EAAuBH,MAAvB,CAA8BV,OAAO,CAACK,KAAR,CAAc,CAAd,CAA9B,CAArB,CAAb,CAAP;;AACF,SAAK,GAAL;AACE;AACA,aAAO,CAAC,GAAD,EAAMK,MAAN,CAAaZ,WAAW,CAACG,MAAM,CAACW,EAAR,EAAYX,MAAM,CAACY,EAAnB,EAAuBb,OAAO,CAAC,CAAD,CAA9B,EAAmCA,OAAO,CAAC,CAAD,CAA1C,CAAxB,CAAP;;AACF,SAAK,GAAL;AACE;AACA,aAAO,CAAC,GAAD,EAAMU,MAAN,CAAaZ,WAAW,CAACG,MAAM,CAACW,EAAR,EAAYX,MAAM,CAACY,EAAnB,EAAuBb,OAAO,CAAC,CAAD,CAA9B,EAAmCC,MAAM,CAACY,EAA1C,CAAxB,CAAP;;AACF,SAAK,GAAL;AACE;AACA,aAAO,CAAC,GAAD,EAAMH,MAAN,CAAaZ,WAAW,CAACG,MAAM,CAACW,EAAR,EAAYX,MAAM,CAACY,EAAnB,EAAuBZ,MAAM,CAACW,EAA9B,EAAkCZ,OAAO,CAAC,CAAD,CAAzC,CAAxB,CAAP;;AACF,SAAK,GAAL;AACE;AACA,aAAO,CAAC,GAAD,EAAMU,MAAN,CAAaZ,WAAW,CAACG,MAAM,CAACW,EAAR,EAAYX,MAAM,CAACY,EAAnB,EAAuBZ,MAAM,CAACO,CAA9B,EAAiCP,MAAM,CAACQ,CAAxC,CAAxB,CAAP;;AACF;AAvBF;;AAyBA,SAAOT,OAAP;AACD","names":["arcToCubic","quadToCubic","lineToCubic","segmentToCubic","segment","params","indexOf","qx","qy","slice","s1","s2","x","y","concat","apply","x1","y1"],"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/path-util/src/process/segment-2-cubic.ts"],"sourcesContent":["import { arcToCubic } from './arc-2-cubic';\nimport { quadToCubic } from './quad-2-cubic';\nimport { lineToCubic } from './line-2-cubic';\nimport type { PathCommand, ProcessParams } from '../types';\n\nexport function segmentToCubic(segment: PathCommand, params: ProcessParams): PathCommand {\n  if ('TQ'.indexOf(segment[0]) < 0) {\n    params.qx = null;\n    params.qy = null;\n  }\n\n  const [s1, s2] = segment.slice(1);\n\n  switch (segment[0]) {\n    case 'M':\n      params.x = s1 as number;\n      params.y = s2 as number;\n      return segment;\n    case 'A':\n      return ['C'].concat(arcToCubic.apply(0, [params.x1, params.y1].concat(segment.slice(1) as number[]))) as PathCommand;\n    case 'Q':\n      params.qx = s1 as number;\n      params.qy = s2 as number;\n      return ['C'].concat(quadToCubic.apply(0, [params.x1, params.y1].concat(segment.slice(1) as number[]))) as PathCommand;\n    case 'L':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, segment[1], segment[2])) as PathCommand;\n    case 'H':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, segment[1], params.y1)) as PathCommand;\n    case 'V':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, params.x1, segment[1])) as PathCommand;\n    case 'Z':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, params.x, params.y)) as PathCommand;\n    default:\n  }\n  return segment;\n}"]},"metadata":{},"sourceType":"module"}