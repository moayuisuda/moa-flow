{"ast":null,"code":"/**\n * The CSSMathMin interface of the CSS_Object_Model represents the CSS min() function.\n * It inherits properties and methods from its parent CSSNumericValue.\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_math_min.idl\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSMathMax\n */\nimport { __extends, __values } from \"tslib\";\nimport { CSSMathVariadic } from './CSSMathVariadic';\nimport { Nested, ParenLess, CSSNumericValueType, CSSStyleValueType, typeCheck } from '.'; // Represents the maximum of one or more CSSNumericValues.\n// @see https://drafts.css-houdini.org/css-typed-om/#cssmathsum\n\nvar CSSMathMax =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathMax, _super);\n\n  function CSSMathMax() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.operator = 'max';\n    return _this;\n  }\n\n  CSSMathMax.create = function (values) {\n    var error = false;\n    var final_type = typeCheck(values, CSSNumericValueType.add, error);\n    return error ? null : new CSSMathMax(values, final_type);\n  };\n\n  CSSMathMax.prototype.clone = function () {\n    return new CSSMathMax(this.values, this.type_);\n  };\n\n  CSSMathMax.prototype.getType = function () {\n    return CSSStyleValueType.kMaxType;\n  };\n\n  CSSMathMax.prototype.sumValue = function () {\n    var e_1, _a;\n\n    var cur_max = this.numericValues()[0].sumValue();\n\n    if (!cur_max.length) {\n      return null;\n    }\n\n    try {\n      for (var _b = __values(this.numericValues()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var value = _c.value;\n        var child_sum = value.sumValue();\n\n        if (!child_sum.length || JSON.stringify(child_sum[0].units) !== JSON.stringify(cur_max[0].units)) {\n          return null;\n        }\n\n        if (child_sum[0].value < cur_max[0].value) {\n          cur_max = child_sum;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return cur_max;\n  }; // toCalcExpressionNode() {\n  //   const operands: CSSMathExpressionOperation[] = [];\n  //   for (const value of this.numericValues()) {\n  //     const operand = value.toCalcExpressionNode();\n  //     if (!operand) {\n  //       continue;\n  //     }\n  //     operands.push(operand as CSSMathExpressionOperation);\n  //   }\n  //   return CSSMathExpressionOperation.createComparisonFunction(operands, CSSMathOperator.kMax);\n  // }\n\n\n  CSSMathMax.prototype.buildCSSText = function (nested, paren_less, result) {\n    var e_2, _a;\n\n    result += 'max(';\n    var first_iteration = true;\n\n    try {\n      for (var _b = __values(this.numericValues()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var value = _c.value;\n        if (!first_iteration) result += ', ';\n        first_iteration = false;\n        result = value.buildCSSText(Nested.kYes, ParenLess.kYes, result);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    result += ')';\n    return result;\n  };\n\n  return CSSMathMax;\n}(CSSMathVariadic);\n\nexport { CSSMathMax };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSMathMax.js"],"names":["__extends","__values","CSSMathVariadic","Nested","ParenLess","CSSNumericValueType","CSSStyleValueType","typeCheck","CSSMathMax","_super","_this","apply","arguments","operator","create","values","error","final_type","add","prototype","clone","type_","getType","kMaxType","sumValue","e_1","_a","cur_max","numericValues","length","_b","_c","next","done","value","child_sum","JSON","stringify","units","e_1_1","return","call","buildCSSText","nested","paren_less","result","e_2","first_iteration","kYes","e_2_1"],"mappings":"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","sourcesContent":["/**\n * The CSSMathMin interface of the CSS_Object_Model represents the CSS min() function.\n * It inherits properties and methods from its parent CSSNumericValue.\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_math_min.idl\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSMathMax\n */\nimport { __extends, __values } from \"tslib\";\nimport { CSSMathVariadic } from './CSSMathVariadic';\nimport { Nested, ParenLess, CSSNumericValueType, CSSStyleValueType, typeCheck } from '.'; // Represents the maximum of one or more CSSNumericValues.\n// @see https://drafts.css-houdini.org/css-typed-om/#cssmathsum\n\nvar CSSMathMax =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathMax, _super);\n\n  function CSSMathMax() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.operator = 'max';\n    return _this;\n  }\n\n  CSSMathMax.create = function (values) {\n    var error = false;\n    var final_type = typeCheck(values, CSSNumericValueType.add, error);\n    return error ? null : new CSSMathMax(values, final_type);\n  };\n\n  CSSMathMax.prototype.clone = function () {\n    return new CSSMathMax(this.values, this.type_);\n  };\n\n  CSSMathMax.prototype.getType = function () {\n    return CSSStyleValueType.kMaxType;\n  };\n\n  CSSMathMax.prototype.sumValue = function () {\n    var e_1, _a;\n\n    var cur_max = this.numericValues()[0].sumValue();\n\n    if (!cur_max.length) {\n      return null;\n    }\n\n    try {\n      for (var _b = __values(this.numericValues()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var value = _c.value;\n        var child_sum = value.sumValue();\n\n        if (!child_sum.length || JSON.stringify(child_sum[0].units) !== JSON.stringify(cur_max[0].units)) {\n          return null;\n        }\n\n        if (child_sum[0].value < cur_max[0].value) {\n          cur_max = child_sum;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return cur_max;\n  }; // toCalcExpressionNode() {\n  //   const operands: CSSMathExpressionOperation[] = [];\n  //   for (const value of this.numericValues()) {\n  //     const operand = value.toCalcExpressionNode();\n  //     if (!operand) {\n  //       continue;\n  //     }\n  //     operands.push(operand as CSSMathExpressionOperation);\n  //   }\n  //   return CSSMathExpressionOperation.createComparisonFunction(operands, CSSMathOperator.kMax);\n  // }\n\n\n  CSSMathMax.prototype.buildCSSText = function (nested, paren_less, result) {\n    var e_2, _a;\n\n    result += 'max(';\n    var first_iteration = true;\n\n    try {\n      for (var _b = __values(this.numericValues()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var value = _c.value;\n        if (!first_iteration) result += ', ';\n        first_iteration = false;\n        result = value.buildCSSText(Nested.kYes, ParenLess.kYes, result);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    result += ')';\n    return result;\n  };\n\n  return CSSMathMax;\n}(CSSMathVariadic);\n\nexport { CSSMathMax };"]},"metadata":{},"sourceType":"module"}