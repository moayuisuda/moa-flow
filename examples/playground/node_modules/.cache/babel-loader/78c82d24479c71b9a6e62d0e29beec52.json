{"ast":null,"code":"import { isNumber, isString } from 'lodash-es';\nvar genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\nexport function toFontString(attributes) {\n  var fontSize = attributes.fontSize,\n      fontFamily = attributes.fontFamily,\n      fontStyle = attributes.fontStyle,\n      fontVariant = attributes.fontVariant,\n      fontWeight = attributes.fontWeight; // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n\n  var fontSizeString = isNumber(fontSize) ? \"\".concat(fontSize, \"px\") : fontSize.toString(); // Clean-up fontFamily property by quoting each font name\n  // this will support font names with spaces\n  // @ts-ignore\n\n  var fontFamilies = isString(fontFamily) ? fontFamily.split(',') : [fontFamily.value];\n\n  for (var i = fontFamilies.length - 1; i >= 0; i--) {\n    // Trim any extra white-space\n    var fontFamily_1 = fontFamilies[i].trim(); // Check if font already contains strings\n\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily_1) && genericFontFamilies.indexOf(fontFamily_1) < 0) {\n      fontFamily_1 = \"\\\"\".concat(fontFamily_1, \"\\\"\");\n    }\n\n    fontFamilies[i] = fontFamily_1;\n  }\n\n  return \"\".concat(fontStyle, \" \").concat(fontVariant, \" \").concat(fontWeight, \" \").concat(fontSizeString, \" \").concat(fontFamilies.join(','));\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/utils/text.js"],"names":["isNumber","isString","genericFontFamilies","toFontString","attributes","fontSize","fontFamily","fontStyle","fontVariant","fontWeight","fontSizeString","concat","toString","fontFamilies","split","value","i","length","fontFamily_1","trim","test","indexOf","join"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,WAAnC;AACA,IAAIC,mBAAmB,GAAG,CAAC,OAAD,EAAU,YAAV,EAAwB,WAAxB,EAAqC,SAArC,EAAgD,SAAhD,EAA2D,WAA3D,CAA1B;AACA,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AACvC,MAAIC,QAAQ,GAAGD,UAAU,CAACC,QAA1B;AAAA,MACIC,UAAU,GAAGF,UAAU,CAACE,UAD5B;AAAA,MAEIC,SAAS,GAAGH,UAAU,CAACG,SAF3B;AAAA,MAGIC,WAAW,GAAGJ,UAAU,CAACI,WAH7B;AAAA,MAIIC,UAAU,GAAGL,UAAU,CAACK,UAJ5B,CADuC,CAKC;;AAExC,MAAIC,cAAc,GAAGV,QAAQ,CAACK,QAAD,CAAR,GAAqB,GAAGM,MAAH,CAAUN,QAAV,EAAoB,IAApB,CAArB,GAAiDA,QAAQ,CAACO,QAAT,EAAtE,CAPuC,CAOoD;AAC3F;AACA;;AAEA,MAAIC,YAAY,GAAGZ,QAAQ,CAACK,UAAD,CAAR,GAAuBA,UAAU,CAACQ,KAAX,CAAiB,GAAjB,CAAvB,GAA+C,CAACR,UAAU,CAACS,KAAZ,CAAlE;;AAEA,OAAK,IAAIC,CAAC,GAAGH,YAAY,CAACI,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjD;AACA,QAAIE,YAAY,GAAGL,YAAY,CAACG,CAAD,CAAZ,CAAgBG,IAAhB,EAAnB,CAFiD,CAEN;;AAE3C,QAAI,CAAC,qBAAqBC,IAArB,CAA0BF,YAA1B,CAAD,IAA4ChB,mBAAmB,CAACmB,OAApB,CAA4BH,YAA5B,IAA4C,CAA5F,EAA+F;AAC7FA,MAAAA,YAAY,GAAG,KAAKP,MAAL,CAAYO,YAAZ,EAA0B,IAA1B,CAAf;AACD;;AAEDL,IAAAA,YAAY,CAACG,CAAD,CAAZ,GAAkBE,YAAlB;AACD;;AAED,SAAO,GAAGP,MAAH,CAAUJ,SAAV,EAAqB,GAArB,EAA0BI,MAA1B,CAAiCH,WAAjC,EAA8C,GAA9C,EAAmDG,MAAnD,CAA0DF,UAA1D,EAAsE,GAAtE,EAA2EE,MAA3E,CAAkFD,cAAlF,EAAkG,GAAlG,EAAuGC,MAAvG,CAA8GE,YAAY,CAACS,IAAb,CAAkB,GAAlB,CAA9G,CAAP;AACD","sourcesContent":["import { isNumber, isString } from 'lodash-es';\nvar genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\nexport function toFontString(attributes) {\n  var fontSize = attributes.fontSize,\n      fontFamily = attributes.fontFamily,\n      fontStyle = attributes.fontStyle,\n      fontVariant = attributes.fontVariant,\n      fontWeight = attributes.fontWeight; // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n\n  var fontSizeString = isNumber(fontSize) ? \"\".concat(fontSize, \"px\") : fontSize.toString(); // Clean-up fontFamily property by quoting each font name\n  // this will support font names with spaces\n  // @ts-ignore\n\n  var fontFamilies = isString(fontFamily) ? fontFamily.split(',') : [fontFamily.value];\n\n  for (var i = fontFamilies.length - 1; i >= 0; i--) {\n    // Trim any extra white-space\n    var fontFamily_1 = fontFamilies[i].trim(); // Check if font already contains strings\n\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily_1) && genericFontFamilies.indexOf(fontFamily_1) < 0) {\n      fontFamily_1 = \"\\\"\".concat(fontFamily_1, \"\\\"\");\n    }\n\n    fontFamilies[i] = fontFamily_1;\n  }\n\n  return \"\".concat(fontStyle, \" \").concat(fontVariant, \" \").concat(fontWeight, \" \").concat(fontSizeString, \" \").concat(fontFamilies.join(','));\n}"]},"metadata":{},"sourceType":"module"}