{"ast":null,"code":"import { DCHECK_EQ, DCHECK_NE } from '../../utils';\nimport { UnitType } from '.'; // https://drafts.css-houdini.org/css-typed-om/#enumdef-cssnumericbasetype\n\nexport var BaseType;\n\n(function (BaseType) {\n  BaseType[BaseType[\"kLength\"] = 0] = \"kLength\";\n  BaseType[BaseType[\"kAngle\"] = 1] = \"kAngle\";\n  BaseType[BaseType[\"kTime\"] = 2] = \"kTime\";\n  BaseType[BaseType[\"kFrequency\"] = 3] = \"kFrequency\";\n  BaseType[BaseType[\"kResolution\"] = 4] = \"kResolution\";\n  BaseType[BaseType[\"kFlex\"] = 5] = \"kFlex\";\n  BaseType[BaseType[\"kPercent\"] = 6] = \"kPercent\";\n  BaseType[BaseType[\"kNumBaseTypes\"] = 7] = \"kNumBaseTypes\";\n})(BaseType || (BaseType = {}));\n\nexport function unitTypeToBaseType(unit) {\n  DCHECK_NE(unit, UnitType.kNumber);\n\n  switch (unit) {\n    case UnitType.kEms:\n    case UnitType.kExs:\n    case UnitType.kPixels:\n    case UnitType.kCentimeters:\n    case UnitType.kMillimeters:\n    case UnitType.kQuarterMillimeters:\n    case UnitType.kInches:\n    case UnitType.kPoints:\n    case UnitType.kPicas:\n    case UnitType.kUserUnits:\n    case UnitType.kViewportWidth:\n    case UnitType.kViewportHeight:\n    case UnitType.kViewportInlineSize:\n    case UnitType.kViewportBlockSize:\n    case UnitType.kViewportMin:\n    case UnitType.kViewportMax:\n    case UnitType.kSmallViewportWidth:\n    case UnitType.kSmallViewportHeight:\n    case UnitType.kSmallViewportInlineSize:\n    case UnitType.kSmallViewportBlockSize:\n    case UnitType.kSmallViewportMin:\n    case UnitType.kSmallViewportMax:\n    case UnitType.kLargeViewportWidth:\n    case UnitType.kLargeViewportHeight:\n    case UnitType.kLargeViewportInlineSize:\n    case UnitType.kLargeViewportBlockSize:\n    case UnitType.kLargeViewportMin:\n    case UnitType.kLargeViewportMax:\n    case UnitType.kDynamicViewportWidth:\n    case UnitType.kDynamicViewportHeight:\n    case UnitType.kDynamicViewportInlineSize:\n    case UnitType.kDynamicViewportBlockSize:\n    case UnitType.kDynamicViewportMin:\n    case UnitType.kDynamicViewportMax:\n    case UnitType.kContainerWidth:\n    case UnitType.kContainerHeight:\n    case UnitType.kContainerInlineSize:\n    case UnitType.kContainerBlockSize:\n    case UnitType.kContainerMin:\n    case UnitType.kContainerMax:\n    case UnitType.kRems:\n    case UnitType.kChs:\n      return BaseType.kLength;\n\n    case UnitType.kMilliseconds:\n    case UnitType.kSeconds:\n      return BaseType.kTime;\n\n    case UnitType.kDegrees:\n    case UnitType.kRadians:\n    case UnitType.kGradians:\n    case UnitType.kTurns:\n      return BaseType.kAngle;\n\n    case UnitType.kHertz:\n    case UnitType.kKilohertz:\n      return BaseType.kFrequency;\n\n    case UnitType.kDotsPerPixel:\n    case UnitType.kDotsPerInch:\n    case UnitType.kDotsPerCentimeter:\n      return BaseType.kResolution;\n\n    case UnitType.kFraction:\n      return BaseType.kFlex;\n\n    case UnitType.kPercentage:\n      return BaseType.kPercent;\n\n    default:\n      return BaseType.kLength;\n  }\n}\nexport function baseTypeToString(baseType) {\n  switch (baseType) {\n    case BaseType.kLength:\n      return 'length';\n\n    case BaseType.kAngle:\n      return 'angle';\n\n    case BaseType.kTime:\n      return 'time';\n\n    case BaseType.kFrequency:\n      return 'frequency';\n\n    case BaseType.kResolution:\n      return 'resolution';\n\n    case BaseType.kFlex:\n      return 'flex';\n\n    case BaseType.kPercent:\n      return 'percent';\n\n    default:\n      break;\n  }\n\n  return '';\n}\n\nvar CSSNumericValueType =\n/** @class */\nfunction () {\n  function CSSNumericValueType(unit, exponent) {\n    if (unit === void 0) {\n      unit = UnitType.kNumber;\n    }\n\n    if (exponent === void 0) {\n      exponent = 1;\n    }\n\n    this.exponents = [];\n    this.numNonZeroEntries = 0;\n    this.percentHint = BaseType.kPercent;\n    this.hasPercentHint = false;\n    this.exponents = new Array(BaseType.kNumBaseTypes).fill(0);\n\n    if (unit !== UnitType.kNumber) {\n      this.setExponent(unitTypeToBaseType(unit), exponent);\n    }\n  }\n\n  CSSNumericValueType.prototype.applyPercentHint = function (hint) {\n    DCHECK_NE(hint, BaseType.kPercent);\n    this.setExponent(hint, this.exponent(hint) + this.exponent(BaseType.kPercent));\n    this.setExponent(BaseType.kPercent, 0);\n    this.percentHint = hint;\n    this.hasPercentHint = true;\n  };\n\n  CSSNumericValueType.prototype.hasNonZeroEntries = function () {\n    return this.numNonZeroEntries > 0;\n  };\n\n  CSSNumericValueType.prototype.isOnlyNonZeroEntry = function (baseType, value) {\n    DCHECK_NE(value, 0);\n    return this.numNonZeroEntries === 1 && this.exponent(baseType) === value;\n  };\n\n  CSSNumericValueType.prototype.exponent = function (type) {\n    return this.exponents[type];\n  };\n\n  CSSNumericValueType.prototype.setExponent = function (type, newValue) {\n    var oldValue = this.exponents[type];\n\n    if (oldValue == 0 && newValue !== 0) {\n      this.numNonZeroEntries++;\n    } else if (oldValue !== 0 && newValue == 0) {\n      this.numNonZeroEntries--;\n    }\n\n    this.exponents[type] = newValue;\n  };\n\n  CSSNumericValueType.negateExponents = function (type) {\n    type.exponents.forEach(function (v) {\n      return v *= -1;\n    });\n    return type;\n  };\n\n  CSSNumericValueType.prototype.matchesBaseType = function (baseType) {\n    DCHECK_NE(baseType, BaseType.kPercent);\n    return this.isOnlyNonZeroEntry(baseType, 1) && !this.hasPercentHint;\n  };\n\n  CSSNumericValueType.prototype.matchesPercentage = function () {\n    return this.isOnlyNonZeroEntry(BaseType.kPercent, 1);\n  };\n\n  CSSNumericValueType.prototype.matchesBaseTypePercentage = function (baseType) {\n    DCHECK_NE(baseType, BaseType.kPercent);\n    return this.isOnlyNonZeroEntry(baseType, 1) || this.isOnlyNonZeroEntry(BaseType.kPercent, 1);\n  };\n\n  CSSNumericValueType.prototype.matchesNumber = function () {\n    return !this.hasNonZeroEntries() && !this.hasPercentHint;\n  };\n\n  CSSNumericValueType.prototype.matchesNumberPercentage = function () {\n    return !this.hasNonZeroEntries() || this.isOnlyNonZeroEntry(BaseType.kPercent, 1);\n  };\n\n  CSSNumericValueType.add = function (type1, type2, error) {\n    if (type1.hasPercentHint && type2.hasPercentHint && type1.percentHint != type2.percentHint) {\n      error = true;\n      return type1;\n    }\n\n    if (type1.hasPercentHint) type2.applyPercentHint(type1.percentHint);else if (type2.hasPercentHint) type1.applyPercentHint(type2.percentHint);\n    DCHECK_EQ(type1.percentHint, type2.percentHint); // Match up base types. Try to use the percent hint to match up any\n    // differences.\n\n    for (var i = 0; i < BaseType.kNumBaseTypes; ++i) {\n      var base_type = i;\n\n      if (type1.exponents[i] !== type2.exponents[i]) {\n        if (base_type !== BaseType.kPercent) {\n          type1.applyPercentHint(base_type);\n          type2.applyPercentHint(base_type);\n        }\n\n        if (type1.exponents[i] !== type2.exponents[i]) {\n          error = true;\n          return type1;\n        }\n      }\n    }\n\n    error = false;\n    return type1;\n  };\n\n  CSSNumericValueType.multiply = function (type1, type2, error) {\n    if (type1.hasPercentHint && type2.hasPercentHint && type1.percentHint != type2.percentHint) {\n      error = true;\n      return type1;\n    }\n\n    if (type1.hasPercentHint) type2.applyPercentHint(type1.percentHint);else if (type2.hasPercentHint) type1.applyPercentHint(type2.percentHint);\n\n    for (var i = 0; i < BaseType.kNumBaseTypes; ++i) {\n      var base_type = i;\n      type1.setExponent(base_type, type1.exponent(base_type) + type2.exponent(base_type));\n    }\n\n    error = false;\n    return type1;\n  };\n\n  return CSSNumericValueType;\n}();\n\nexport { CSSNumericValueType };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSNumericValueType.js"],"names":["DCHECK_EQ","DCHECK_NE","UnitType","BaseType","unitTypeToBaseType","unit","kNumber","kEms","kExs","kPixels","kCentimeters","kMillimeters","kQuarterMillimeters","kInches","kPoints","kPicas","kUserUnits","kViewportWidth","kViewportHeight","kViewportInlineSize","kViewportBlockSize","kViewportMin","kViewportMax","kSmallViewportWidth","kSmallViewportHeight","kSmallViewportInlineSize","kSmallViewportBlockSize","kSmallViewportMin","kSmallViewportMax","kLargeViewportWidth","kLargeViewportHeight","kLargeViewportInlineSize","kLargeViewportBlockSize","kLargeViewportMin","kLargeViewportMax","kDynamicViewportWidth","kDynamicViewportHeight","kDynamicViewportInlineSize","kDynamicViewportBlockSize","kDynamicViewportMin","kDynamicViewportMax","kContainerWidth","kContainerHeight","kContainerInlineSize","kContainerBlockSize","kContainerMin","kContainerMax","kRems","kChs","kLength","kMilliseconds","kSeconds","kTime","kDegrees","kRadians","kGradians","kTurns","kAngle","kHertz","kKilohertz","kFrequency","kDotsPerPixel","kDotsPerInch","kDotsPerCentimeter","kResolution","kFraction","kFlex","kPercentage","kPercent","baseTypeToString","baseType","CSSNumericValueType","exponent","exponents","numNonZeroEntries","percentHint","hasPercentHint","Array","kNumBaseTypes","fill","setExponent","prototype","applyPercentHint","hint","hasNonZeroEntries","isOnlyNonZeroEntry","value","type","newValue","oldValue","negateExponents","forEach","v","matchesBaseType","matchesPercentage","matchesBaseTypePercentage","matchesNumber","matchesNumberPercentage","add","type1","type2","error","i","base_type","multiply"],"mappings":"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","sourcesContent":["import { DCHECK_EQ, DCHECK_NE } from '../../utils';\nimport { UnitType } from '.'; // https://drafts.css-houdini.org/css-typed-om/#enumdef-cssnumericbasetype\n\nexport var BaseType;\n\n(function (BaseType) {\n  BaseType[BaseType[\"kLength\"] = 0] = \"kLength\";\n  BaseType[BaseType[\"kAngle\"] = 1] = \"kAngle\";\n  BaseType[BaseType[\"kTime\"] = 2] = \"kTime\";\n  BaseType[BaseType[\"kFrequency\"] = 3] = \"kFrequency\";\n  BaseType[BaseType[\"kResolution\"] = 4] = \"kResolution\";\n  BaseType[BaseType[\"kFlex\"] = 5] = \"kFlex\";\n  BaseType[BaseType[\"kPercent\"] = 6] = \"kPercent\";\n  BaseType[BaseType[\"kNumBaseTypes\"] = 7] = \"kNumBaseTypes\";\n})(BaseType || (BaseType = {}));\n\nexport function unitTypeToBaseType(unit) {\n  DCHECK_NE(unit, UnitType.kNumber);\n\n  switch (unit) {\n    case UnitType.kEms:\n    case UnitType.kExs:\n    case UnitType.kPixels:\n    case UnitType.kCentimeters:\n    case UnitType.kMillimeters:\n    case UnitType.kQuarterMillimeters:\n    case UnitType.kInches:\n    case UnitType.kPoints:\n    case UnitType.kPicas:\n    case UnitType.kUserUnits:\n    case UnitType.kViewportWidth:\n    case UnitType.kViewportHeight:\n    case UnitType.kViewportInlineSize:\n    case UnitType.kViewportBlockSize:\n    case UnitType.kViewportMin:\n    case UnitType.kViewportMax:\n    case UnitType.kSmallViewportWidth:\n    case UnitType.kSmallViewportHeight:\n    case UnitType.kSmallViewportInlineSize:\n    case UnitType.kSmallViewportBlockSize:\n    case UnitType.kSmallViewportMin:\n    case UnitType.kSmallViewportMax:\n    case UnitType.kLargeViewportWidth:\n    case UnitType.kLargeViewportHeight:\n    case UnitType.kLargeViewportInlineSize:\n    case UnitType.kLargeViewportBlockSize:\n    case UnitType.kLargeViewportMin:\n    case UnitType.kLargeViewportMax:\n    case UnitType.kDynamicViewportWidth:\n    case UnitType.kDynamicViewportHeight:\n    case UnitType.kDynamicViewportInlineSize:\n    case UnitType.kDynamicViewportBlockSize:\n    case UnitType.kDynamicViewportMin:\n    case UnitType.kDynamicViewportMax:\n    case UnitType.kContainerWidth:\n    case UnitType.kContainerHeight:\n    case UnitType.kContainerInlineSize:\n    case UnitType.kContainerBlockSize:\n    case UnitType.kContainerMin:\n    case UnitType.kContainerMax:\n    case UnitType.kRems:\n    case UnitType.kChs:\n      return BaseType.kLength;\n\n    case UnitType.kMilliseconds:\n    case UnitType.kSeconds:\n      return BaseType.kTime;\n\n    case UnitType.kDegrees:\n    case UnitType.kRadians:\n    case UnitType.kGradians:\n    case UnitType.kTurns:\n      return BaseType.kAngle;\n\n    case UnitType.kHertz:\n    case UnitType.kKilohertz:\n      return BaseType.kFrequency;\n\n    case UnitType.kDotsPerPixel:\n    case UnitType.kDotsPerInch:\n    case UnitType.kDotsPerCentimeter:\n      return BaseType.kResolution;\n\n    case UnitType.kFraction:\n      return BaseType.kFlex;\n\n    case UnitType.kPercentage:\n      return BaseType.kPercent;\n\n    default:\n      return BaseType.kLength;\n  }\n}\nexport function baseTypeToString(baseType) {\n  switch (baseType) {\n    case BaseType.kLength:\n      return 'length';\n\n    case BaseType.kAngle:\n      return 'angle';\n\n    case BaseType.kTime:\n      return 'time';\n\n    case BaseType.kFrequency:\n      return 'frequency';\n\n    case BaseType.kResolution:\n      return 'resolution';\n\n    case BaseType.kFlex:\n      return 'flex';\n\n    case BaseType.kPercent:\n      return 'percent';\n\n    default:\n      break;\n  }\n\n  return '';\n}\n\nvar CSSNumericValueType =\n/** @class */\nfunction () {\n  function CSSNumericValueType(unit, exponent) {\n    if (unit === void 0) {\n      unit = UnitType.kNumber;\n    }\n\n    if (exponent === void 0) {\n      exponent = 1;\n    }\n\n    this.exponents = [];\n    this.numNonZeroEntries = 0;\n    this.percentHint = BaseType.kPercent;\n    this.hasPercentHint = false;\n    this.exponents = new Array(BaseType.kNumBaseTypes).fill(0);\n\n    if (unit !== UnitType.kNumber) {\n      this.setExponent(unitTypeToBaseType(unit), exponent);\n    }\n  }\n\n  CSSNumericValueType.prototype.applyPercentHint = function (hint) {\n    DCHECK_NE(hint, BaseType.kPercent);\n    this.setExponent(hint, this.exponent(hint) + this.exponent(BaseType.kPercent));\n    this.setExponent(BaseType.kPercent, 0);\n    this.percentHint = hint;\n    this.hasPercentHint = true;\n  };\n\n  CSSNumericValueType.prototype.hasNonZeroEntries = function () {\n    return this.numNonZeroEntries > 0;\n  };\n\n  CSSNumericValueType.prototype.isOnlyNonZeroEntry = function (baseType, value) {\n    DCHECK_NE(value, 0);\n    return this.numNonZeroEntries === 1 && this.exponent(baseType) === value;\n  };\n\n  CSSNumericValueType.prototype.exponent = function (type) {\n    return this.exponents[type];\n  };\n\n  CSSNumericValueType.prototype.setExponent = function (type, newValue) {\n    var oldValue = this.exponents[type];\n\n    if (oldValue == 0 && newValue !== 0) {\n      this.numNonZeroEntries++;\n    } else if (oldValue !== 0 && newValue == 0) {\n      this.numNonZeroEntries--;\n    }\n\n    this.exponents[type] = newValue;\n  };\n\n  CSSNumericValueType.negateExponents = function (type) {\n    type.exponents.forEach(function (v) {\n      return v *= -1;\n    });\n    return type;\n  };\n\n  CSSNumericValueType.prototype.matchesBaseType = function (baseType) {\n    DCHECK_NE(baseType, BaseType.kPercent);\n    return this.isOnlyNonZeroEntry(baseType, 1) && !this.hasPercentHint;\n  };\n\n  CSSNumericValueType.prototype.matchesPercentage = function () {\n    return this.isOnlyNonZeroEntry(BaseType.kPercent, 1);\n  };\n\n  CSSNumericValueType.prototype.matchesBaseTypePercentage = function (baseType) {\n    DCHECK_NE(baseType, BaseType.kPercent);\n    return this.isOnlyNonZeroEntry(baseType, 1) || this.isOnlyNonZeroEntry(BaseType.kPercent, 1);\n  };\n\n  CSSNumericValueType.prototype.matchesNumber = function () {\n    return !this.hasNonZeroEntries() && !this.hasPercentHint;\n  };\n\n  CSSNumericValueType.prototype.matchesNumberPercentage = function () {\n    return !this.hasNonZeroEntries() || this.isOnlyNonZeroEntry(BaseType.kPercent, 1);\n  };\n\n  CSSNumericValueType.add = function (type1, type2, error) {\n    if (type1.hasPercentHint && type2.hasPercentHint && type1.percentHint != type2.percentHint) {\n      error = true;\n      return type1;\n    }\n\n    if (type1.hasPercentHint) type2.applyPercentHint(type1.percentHint);else if (type2.hasPercentHint) type1.applyPercentHint(type2.percentHint);\n    DCHECK_EQ(type1.percentHint, type2.percentHint); // Match up base types. Try to use the percent hint to match up any\n    // differences.\n\n    for (var i = 0; i < BaseType.kNumBaseTypes; ++i) {\n      var base_type = i;\n\n      if (type1.exponents[i] !== type2.exponents[i]) {\n        if (base_type !== BaseType.kPercent) {\n          type1.applyPercentHint(base_type);\n          type2.applyPercentHint(base_type);\n        }\n\n        if (type1.exponents[i] !== type2.exponents[i]) {\n          error = true;\n          return type1;\n        }\n      }\n    }\n\n    error = false;\n    return type1;\n  };\n\n  CSSNumericValueType.multiply = function (type1, type2, error) {\n    if (type1.hasPercentHint && type2.hasPercentHint && type1.percentHint != type2.percentHint) {\n      error = true;\n      return type1;\n    }\n\n    if (type1.hasPercentHint) type2.applyPercentHint(type1.percentHint);else if (type2.hasPercentHint) type1.applyPercentHint(type2.percentHint);\n\n    for (var i = 0; i < BaseType.kNumBaseTypes; ++i) {\n      var base_type = i;\n      type1.setExponent(base_type, type1.exponent(base_type) + type2.exponent(base_type));\n    }\n\n    error = false;\n    return type1;\n  };\n\n  return CSSNumericValueType;\n}();\n\nexport { CSSNumericValueType };"]},"metadata":{},"sourceType":"module"}