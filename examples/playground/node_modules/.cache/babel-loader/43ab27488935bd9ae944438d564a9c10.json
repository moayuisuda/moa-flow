{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { singleton, contrib, Syringe, Contribution } from 'mana-syringe';\nimport { RenderingPluginContribution } from '../services/RenderingService';\nexport var CullingStrategyContribution = Syringe.defineToken('CullingStrategyContribution');\n/**\n * apply following rules:\n * 1. `visibility` in scenegraph node\n * 2. other custom culling strategies, eg. frustum culling\n */\n\nvar CullingPlugin =\n/** @class */\nfunction () {\n  function CullingPlugin() {}\n\n  CullingPlugin_1 = CullingPlugin;\n\n  CullingPlugin.prototype.apply = function (renderingService) {\n    var strategies = this.strategyProvider.getContributions();\n    renderingService.hooks.cull.tap(CullingPlugin_1.tag, function (object) {\n      if (object) {\n        var cullable = object.cullable;\n\n        if (strategies.length === 0) {\n          cullable.visible = true;\n        } else {\n          // eg. implemented by g-webgl(frustum culling)\n          cullable.visible = strategies.every(function (strategy) {\n            return strategy.isVisible(object);\n          });\n        }\n\n        if (!cullable.isCulled() && object.isVisible()) {\n          return object;\n        }\n\n        return null;\n      }\n\n      return object;\n    });\n    renderingService.hooks.afterRender.tap(CullingPlugin_1.tag, function (object) {\n      object.cullable.visibilityPlaneMask = -1;\n    });\n  };\n\n  var CullingPlugin_1;\n  CullingPlugin.tag = 'CullingPlugin';\n\n  __decorate([contrib(CullingStrategyContribution), __metadata(\"design:type\", Object)], CullingPlugin.prototype, \"strategyProvider\", void 0);\n\n  CullingPlugin = CullingPlugin_1 = __decorate([singleton({\n    contrib: RenderingPluginContribution\n  })], CullingPlugin);\n  return CullingPlugin;\n}();\n\nexport { CullingPlugin };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/plugins/CullingPlugin.js"],"names":["__decorate","__metadata","singleton","contrib","Syringe","Contribution","RenderingPluginContribution","CullingStrategyContribution","defineToken","CullingPlugin","CullingPlugin_1","prototype","apply","renderingService","strategies","strategyProvider","getContributions","hooks","cull","tap","tag","object","cullable","length","visible","every","strategy","isVisible","isCulled","afterRender","visibilityPlaneMask","Object"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,OAAvC;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,OAA7B,EAAsCC,YAAtC,QAA0D,cAA1D;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,OAAO,IAAIC,2BAA2B,GAAGH,OAAO,CAACI,WAAR,CAAoB,6BAApB,CAAlC;AACP;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa;AACjB;AACA,YAAY;AACV,WAASA,aAAT,GAAyB,CAAE;;AAE3BC,EAAAA,eAAe,GAAGD,aAAlB;;AAEAA,EAAAA,aAAa,CAACE,SAAd,CAAwBC,KAAxB,GAAgC,UAAUC,gBAAV,EAA4B;AAC1D,QAAIC,UAAU,GAAG,KAAKC,gBAAL,CAAsBC,gBAAtB,EAAjB;AACAH,IAAAA,gBAAgB,CAACI,KAAjB,CAAuBC,IAAvB,CAA4BC,GAA5B,CAAgCT,eAAe,CAACU,GAAhD,EAAqD,UAAUC,MAAV,EAAkB;AACrE,UAAIA,MAAJ,EAAY;AACV,YAAIC,QAAQ,GAAGD,MAAM,CAACC,QAAtB;;AAEA,YAAIR,UAAU,CAACS,MAAX,KAAsB,CAA1B,EAA6B;AAC3BD,UAAAA,QAAQ,CAACE,OAAT,GAAmB,IAAnB;AACD,SAFD,MAEO;AACL;AACAF,UAAAA,QAAQ,CAACE,OAAT,GAAmBV,UAAU,CAACW,KAAX,CAAiB,UAAUC,QAAV,EAAoB;AACtD,mBAAOA,QAAQ,CAACC,SAAT,CAAmBN,MAAnB,CAAP;AACD,WAFkB,CAAnB;AAGD;;AAED,YAAI,CAACC,QAAQ,CAACM,QAAT,EAAD,IAAwBP,MAAM,CAACM,SAAP,EAA5B,EAAgD;AAC9C,iBAAON,MAAP;AACD;;AAED,eAAO,IAAP;AACD;;AAED,aAAOA,MAAP;AACD,KArBD;AAsBAR,IAAAA,gBAAgB,CAACI,KAAjB,CAAuBY,WAAvB,CAAmCV,GAAnC,CAAuCT,eAAe,CAACU,GAAvD,EAA4D,UAAUC,MAAV,EAAkB;AAC5EA,MAAAA,MAAM,CAACC,QAAP,CAAgBQ,mBAAhB,GAAsC,CAAC,CAAvC;AACD,KAFD;AAGD,GA3BD;;AA6BA,MAAIpB,eAAJ;AACAD,EAAAA,aAAa,CAACW,GAAd,GAAoB,eAApB;;AAEApB,EAAAA,UAAU,CAAC,CAACG,OAAO,CAACI,2BAAD,CAAR,EAAuCN,UAAU,CAAC,aAAD,EAAgB8B,MAAhB,CAAjD,CAAD,EAA4EtB,aAAa,CAACE,SAA1F,EAAqG,kBAArG,EAAyH,KAAK,CAA9H,CAAV;;AAEAF,EAAAA,aAAa,GAAGC,eAAe,GAAGV,UAAU,CAAC,CAACE,SAAS,CAAC;AACtDC,IAAAA,OAAO,EAAEG;AAD6C,GAAD,CAAV,CAAD,EAEvCG,aAFuC,CAA5C;AAGA,SAAOA,aAAP;AACD,CA3CD,EAFA;;AA+CA,SAASA,aAAT","sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport { singleton, contrib, Syringe, Contribution } from 'mana-syringe';\nimport { RenderingPluginContribution } from '../services/RenderingService';\nexport var CullingStrategyContribution = Syringe.defineToken('CullingStrategyContribution');\n/**\n * apply following rules:\n * 1. `visibility` in scenegraph node\n * 2. other custom culling strategies, eg. frustum culling\n */\n\nvar CullingPlugin =\n/** @class */\nfunction () {\n  function CullingPlugin() {}\n\n  CullingPlugin_1 = CullingPlugin;\n\n  CullingPlugin.prototype.apply = function (renderingService) {\n    var strategies = this.strategyProvider.getContributions();\n    renderingService.hooks.cull.tap(CullingPlugin_1.tag, function (object) {\n      if (object) {\n        var cullable = object.cullable;\n\n        if (strategies.length === 0) {\n          cullable.visible = true;\n        } else {\n          // eg. implemented by g-webgl(frustum culling)\n          cullable.visible = strategies.every(function (strategy) {\n            return strategy.isVisible(object);\n          });\n        }\n\n        if (!cullable.isCulled() && object.isVisible()) {\n          return object;\n        }\n\n        return null;\n      }\n\n      return object;\n    });\n    renderingService.hooks.afterRender.tap(CullingPlugin_1.tag, function (object) {\n      object.cullable.visibilityPlaneMask = -1;\n    });\n  };\n\n  var CullingPlugin_1;\n  CullingPlugin.tag = 'CullingPlugin';\n\n  __decorate([contrib(CullingStrategyContribution), __metadata(\"design:type\", Object)], CullingPlugin.prototype, \"strategyProvider\", void 0);\n\n  CullingPlugin = CullingPlugin_1 = __decorate([singleton({\n    contrib: RenderingPluginContribution\n  })], CullingPlugin);\n  return CullingPlugin;\n}();\n\nexport { CullingPlugin };"]},"metadata":{},"sourceType":"module"}