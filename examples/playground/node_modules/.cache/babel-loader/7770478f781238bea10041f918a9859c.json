{"ast":null,"code":"import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport isRegExp from './isRegExp.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n/** Used as references for the maximum length and index of an array. */\n\nvar MAX_ARRAY_LENGTH = 4294967295;\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\n\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n\n  if (!limit) {\n    return [];\n  }\n\n  string = toString(string);\n\n  if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {\n    separator = baseToString(separator);\n\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n\n  return string.split(separator, limit);\n}\n\nexport default split;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/lodash-es/split.js"],"names":["baseToString","castSlice","hasUnicode","isIterateeCall","isRegExp","stringToArray","toString","MAX_ARRAY_LENGTH","split","string","separator","limit","undefined"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,UAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIA,KAAK,IAAI,OAAOA,KAAP,IAAgB,QAAzB,IAAqCR,cAAc,CAACM,MAAD,EAASC,SAAT,EAAoBC,KAApB,CAAvD,EAAmF;AACjFD,IAAAA,SAAS,GAAGC,KAAK,GAAGC,SAApB;AACD;;AACDD,EAAAA,KAAK,GAAGA,KAAK,KAAKC,SAAV,GAAsBL,gBAAtB,GAAyCI,KAAK,KAAK,CAA3D;;AACA,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AACDF,EAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAD,CAAjB;;AACA,MAAIA,MAAM,KACJ,OAAOC,SAAP,IAAoB,QAApB,IACCA,SAAS,IAAI,IAAb,IAAqB,CAACN,QAAQ,CAACM,SAAD,CAF3B,CAAV,EAGO;AACLA,IAAAA,SAAS,GAAGV,YAAY,CAACU,SAAD,CAAxB;;AACA,QAAI,CAACA,SAAD,IAAcR,UAAU,CAACO,MAAD,CAA5B,EAAsC;AACpC,aAAOR,SAAS,CAACI,aAAa,CAACI,MAAD,CAAd,EAAwB,CAAxB,EAA2BE,KAA3B,CAAhB;AACD;AACF;;AACD,SAAOF,MAAM,CAACD,KAAP,CAAaE,SAAb,EAAwBC,KAAxB,CAAP;AACD;;AAED,eAAeH,KAAf","sourcesContent":["import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport isRegExp from './isRegExp.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nexport default split;\n"]},"metadata":{},"sourceType":"module"}