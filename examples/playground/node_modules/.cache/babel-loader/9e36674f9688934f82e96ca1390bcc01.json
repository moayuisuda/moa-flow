{"ast":null,"code":"import { clamp, isString } from 'lodash-es';\nimport { CSSUnitValue } from '../cssom';\nexport function numberToString(x) {\n  // scale(0.00000001) -> scale(0)\n  // return x.toFixed(6).replace(/0+$/, '').replace(/\\.$/, '');\n  return x.toString();\n}\n/**\n * parse string or number to CSSUnitValue(numeric)\n *\n * eg.\n * * 0 -> CSSUnitValue(0)\n * * '2' -> CSSUnitValue(2)\n */\n\nexport function parseNumber(string) {\n  if (typeof string === 'number') {\n    return new CSSUnitValue(string);\n  }\n\n  if (/^\\s*[-+]?(\\d*\\.)?\\d+\\s*$/.test(string)) {\n    return new CSSUnitValue(Number(string));\n  } else {\n    return new CSSUnitValue(0);\n  }\n}\n/**\n * separate string to array\n * eg.\n * * [0.5, 0.5] -> [CSSUnitValue, CSSUnitValue]\n */\n\nexport function parseNumberList(string) {\n  if (isString(string)) {\n    return string.split(' ').map(parseNumber);\n  } else {\n    return string.map(parseNumber);\n  }\n}\nexport function mergeNumbers(left, right) {\n  return [left.value, right.value, numberToString];\n}\nexport function clampedMergeNumbers(min, max) {\n  return function (left, right) {\n    return [left.value, right.value, function (x) {\n      return numberToString(clamp(x, min, max));\n    }];\n  };\n}\nexport function mergeNumberLists(left, right) {\n  if (left.length != right.length) {\n    return;\n  }\n\n  return [left.map(function (l) {\n    return l.value;\n  }), right.map(function (l) {\n    return l.value;\n  }), function (numberList) {\n    return numberList;\n  }];\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/parser/numeric.js"],"names":["clamp","isString","CSSUnitValue","numberToString","x","toString","parseNumber","string","test","Number","parseNumberList","split","map","mergeNumbers","left","right","value","clampedMergeNumbers","min","max","mergeNumberLists","length","l","numberList"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,WAAhC;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,OAAO,SAASC,cAAT,CAAwBC,CAAxB,EAA2B;AAChC;AACA;AACA,SAAOA,CAAC,CAACC,QAAF,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAClC,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,IAAIL,YAAJ,CAAiBK,MAAjB,CAAP;AACD;;AAED,MAAI,2BAA2BC,IAA3B,CAAgCD,MAAhC,CAAJ,EAA6C;AAC3C,WAAO,IAAIL,YAAJ,CAAiBO,MAAM,CAACF,MAAD,CAAvB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIL,YAAJ,CAAiB,CAAjB,CAAP;AACD;AACF;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,eAAT,CAAyBH,MAAzB,EAAiC;AACtC,MAAIN,QAAQ,CAACM,MAAD,CAAZ,EAAsB;AACpB,WAAOA,MAAM,CAACI,KAAP,CAAa,GAAb,EAAkBC,GAAlB,CAAsBN,WAAtB,CAAP;AACD,GAFD,MAEO;AACL,WAAOC,MAAM,CAACK,GAAP,CAAWN,WAAX,CAAP;AACD;AACF;AACD,OAAO,SAASO,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACxC,SAAO,CAACD,IAAI,CAACE,KAAN,EAAaD,KAAK,CAACC,KAAnB,EAA0Bb,cAA1B,CAAP;AACD;AACD,OAAO,SAASc,mBAAT,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuC;AAC5C,SAAO,UAAUL,IAAV,EAAgBC,KAAhB,EAAuB;AAC5B,WAAO,CAACD,IAAI,CAACE,KAAN,EAAaD,KAAK,CAACC,KAAnB,EAA0B,UAAUZ,CAAV,EAAa;AAC5C,aAAOD,cAAc,CAACH,KAAK,CAACI,CAAD,EAAIc,GAAJ,EAASC,GAAT,CAAN,CAArB;AACD,KAFM,CAAP;AAGD,GAJD;AAKD;AACD,OAAO,SAASC,gBAAT,CAA0BN,IAA1B,EAAgCC,KAAhC,EAAuC;AAC5C,MAAID,IAAI,CAACO,MAAL,IAAeN,KAAK,CAACM,MAAzB,EAAiC;AAC/B;AACD;;AAED,SAAO,CAACP,IAAI,CAACF,GAAL,CAAS,UAAUU,CAAV,EAAa;AAC5B,WAAOA,CAAC,CAACN,KAAT;AACD,GAFO,CAAD,EAEHD,KAAK,CAACH,GAAN,CAAU,UAAUU,CAAV,EAAa;AACzB,WAAOA,CAAC,CAACN,KAAT;AACD,GAFG,CAFG,EAIH,UAAUO,UAAV,EAAsB;AACxB,WAAOA,UAAP;AACD,GANM,CAAP;AAOD","sourcesContent":["import { clamp, isString } from 'lodash-es';\nimport { CSSUnitValue } from '../cssom';\nexport function numberToString(x) {\n  // scale(0.00000001) -> scale(0)\n  // return x.toFixed(6).replace(/0+$/, '').replace(/\\.$/, '');\n  return x.toString();\n}\n/**\n * parse string or number to CSSUnitValue(numeric)\n *\n * eg.\n * * 0 -> CSSUnitValue(0)\n * * '2' -> CSSUnitValue(2)\n */\n\nexport function parseNumber(string) {\n  if (typeof string === 'number') {\n    return new CSSUnitValue(string);\n  }\n\n  if (/^\\s*[-+]?(\\d*\\.)?\\d+\\s*$/.test(string)) {\n    return new CSSUnitValue(Number(string));\n  } else {\n    return new CSSUnitValue(0);\n  }\n}\n/**\n * separate string to array\n * eg.\n * * [0.5, 0.5] -> [CSSUnitValue, CSSUnitValue]\n */\n\nexport function parseNumberList(string) {\n  if (isString(string)) {\n    return string.split(' ').map(parseNumber);\n  } else {\n    return string.map(parseNumber);\n  }\n}\nexport function mergeNumbers(left, right) {\n  return [left.value, right.value, numberToString];\n}\nexport function clampedMergeNumbers(min, max) {\n  return function (left, right) {\n    return [left.value, right.value, function (x) {\n      return numberToString(clamp(x, min, max));\n    }];\n  };\n}\nexport function mergeNumberLists(left, right) {\n  if (left.length != right.length) {\n    return;\n  }\n\n  return [left.map(function (l) {\n    return l.value;\n  }), right.map(function (l) {\n    return l.value;\n  }), function (numberList) {\n    return numberList;\n  }];\n}"]},"metadata":{},"sourceType":"module"}