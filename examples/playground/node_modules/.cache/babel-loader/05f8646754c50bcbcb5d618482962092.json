{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/gl-matrix/esm/vec3.js"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","length","x","y","z","Math","hypot","fromValues","copy","set","add","b","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","sqrt","dot","cross","ax","ay","az","bx","by","bz","lerp","t","hermite","c","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","r","RANDOM","PI","zScale","cos","sin","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","angle","mag1","mag2","mag","cosine","acos","zero","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"]},"metadata":{},"sourceType":"module"}