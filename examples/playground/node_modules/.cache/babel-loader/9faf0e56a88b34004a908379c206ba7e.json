{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { inject, singleton } from 'mana-syringe';\nimport { RenderingPluginContribution } from '../services/RenderingService';\nimport { RenderingContext, RenderReason } from '../services/RenderingContext';\n/**\n * Filter dirty renderables and calculate the \"dirty rectangle\" which will be clear when frame began\n */\n\nvar DirtyCheckPlugin =\n/** @class */\nfunction () {\n  function DirtyCheckPlugin() {}\n\n  DirtyCheckPlugin_1 = DirtyCheckPlugin;\n\n  DirtyCheckPlugin.prototype.apply = function (renderingService) {\n    var _this = this;\n\n    renderingService.hooks.dirtycheck.tap(DirtyCheckPlugin_1.tag, function (object) {\n      if (object) {\n        // const { enableDirtyRectangleRendering } = this.canvasConfig.renderer.getConfig();\n        var renderable = object.renderable;\n\n        var isDirty = renderable.dirty || _this.renderingContext.renderReasons.has(RenderReason.CAMERA_CHANGED); // if (isDirty || !enableDirtyRectangleRendering) {\n\n\n        if (isDirty) {\n          return object;\n        } else {\n          return null;\n        }\n      }\n\n      return object;\n    });\n  };\n\n  var DirtyCheckPlugin_1;\n  DirtyCheckPlugin.tag = 'DirtyCheckPlugin';\n\n  __decorate([inject(RenderingContext), __metadata(\"design:type\", Object)], DirtyCheckPlugin.prototype, \"renderingContext\", void 0);\n\n  DirtyCheckPlugin = DirtyCheckPlugin_1 = __decorate([singleton({\n    contrib: RenderingPluginContribution\n  })], DirtyCheckPlugin);\n  return DirtyCheckPlugin;\n}();\n\nexport { DirtyCheckPlugin };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/plugins/DirtyCheckPlugin.js"],"names":["__decorate","__metadata","inject","singleton","RenderingPluginContribution","RenderingContext","RenderReason","DirtyCheckPlugin","DirtyCheckPlugin_1","prototype","apply","renderingService","_this","hooks","dirtycheck","tap","tag","object","renderable","isDirty","dirty","renderingContext","renderReasons","has","CAMERA_CHANGED","Object","contrib"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,OAAvC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,cAAlC;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,8BAA/C;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB;AACpB;AACA,YAAY;AACV,WAASA,gBAAT,GAA4B,CAAE;;AAE9BC,EAAAA,kBAAkB,GAAGD,gBAArB;;AAEAA,EAAAA,gBAAgB,CAACE,SAAjB,CAA2BC,KAA3B,GAAmC,UAAUC,gBAAV,EAA4B;AAC7D,QAAIC,KAAK,GAAG,IAAZ;;AAEAD,IAAAA,gBAAgB,CAACE,KAAjB,CAAuBC,UAAvB,CAAkCC,GAAlC,CAAsCP,kBAAkB,CAACQ,GAAzD,EAA8D,UAAUC,MAAV,EAAkB;AAC9E,UAAIA,MAAJ,EAAY;AACV;AACA,YAAIC,UAAU,GAAGD,MAAM,CAACC,UAAxB;;AAEA,YAAIC,OAAO,GAAGD,UAAU,CAACE,KAAX,IAAoBR,KAAK,CAACS,gBAAN,CAAuBC,aAAvB,CAAqCC,GAArC,CAAyCjB,YAAY,CAACkB,cAAtD,CAAlC,CAJU,CAI+F;;;AAGzG,YAAIL,OAAJ,EAAa;AACX,iBAAOF,MAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;;AAED,aAAOA,MAAP;AACD,KAhBD;AAiBD,GApBD;;AAsBA,MAAIT,kBAAJ;AACAD,EAAAA,gBAAgB,CAACS,GAAjB,GAAuB,kBAAvB;;AAEAhB,EAAAA,UAAU,CAAC,CAACE,MAAM,CAACG,gBAAD,CAAP,EAA2BJ,UAAU,CAAC,aAAD,EAAgBwB,MAAhB,CAArC,CAAD,EAAgElB,gBAAgB,CAACE,SAAjF,EAA4F,kBAA5F,EAAgH,KAAK,CAArH,CAAV;;AAEAF,EAAAA,gBAAgB,GAAGC,kBAAkB,GAAGR,UAAU,CAAC,CAACG,SAAS,CAAC;AAC5DuB,IAAAA,OAAO,EAAEtB;AADmD,GAAD,CAAV,CAAD,EAE7CG,gBAF6C,CAAlD;AAGA,SAAOA,gBAAP;AACD,CApCD,EAFA;;AAwCA,SAASA,gBAAT","sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport { inject, singleton } from 'mana-syringe';\nimport { RenderingPluginContribution } from '../services/RenderingService';\nimport { RenderingContext, RenderReason } from '../services/RenderingContext';\n/**\n * Filter dirty renderables and calculate the \"dirty rectangle\" which will be clear when frame began\n */\n\nvar DirtyCheckPlugin =\n/** @class */\nfunction () {\n  function DirtyCheckPlugin() {}\n\n  DirtyCheckPlugin_1 = DirtyCheckPlugin;\n\n  DirtyCheckPlugin.prototype.apply = function (renderingService) {\n    var _this = this;\n\n    renderingService.hooks.dirtycheck.tap(DirtyCheckPlugin_1.tag, function (object) {\n      if (object) {\n        // const { enableDirtyRectangleRendering } = this.canvasConfig.renderer.getConfig();\n        var renderable = object.renderable;\n\n        var isDirty = renderable.dirty || _this.renderingContext.renderReasons.has(RenderReason.CAMERA_CHANGED); // if (isDirty || !enableDirtyRectangleRendering) {\n\n\n        if (isDirty) {\n          return object;\n        } else {\n          return null;\n        }\n      }\n\n      return object;\n    });\n  };\n\n  var DirtyCheckPlugin_1;\n  DirtyCheckPlugin.tag = 'DirtyCheckPlugin';\n\n  __decorate([inject(RenderingContext), __metadata(\"design:type\", Object)], DirtyCheckPlugin.prototype, \"renderingContext\", void 0);\n\n  DirtyCheckPlugin = DirtyCheckPlugin_1 = __decorate([singleton({\n    contrib: RenderingPluginContribution\n  })], DirtyCheckPlugin);\n  return DirtyCheckPlugin;\n}();\n\nexport { DirtyCheckPlugin };"]},"metadata":{},"sourceType":"module"}