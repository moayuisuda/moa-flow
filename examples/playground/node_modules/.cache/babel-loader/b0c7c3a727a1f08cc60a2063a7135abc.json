{"ast":null,"code":"import { isEqual } from 'lodash-es';\n\nfunction getMinDiff(del, add, modify) {\n  var type = null;\n  var min = modify;\n\n  if (add < min) {\n    min = add;\n    type = 'add';\n  }\n\n  if (del < min) {\n    min = del;\n    type = 'del';\n  }\n\n  return {\n    type: type,\n    min: min\n  };\n}\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\n\n\nvar levenshteinDistance = function (source, target) {\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var sourceSegment, targetSegment;\n  var temp = 0;\n\n  if (sourceLen === 0 || targetLen === 0) {\n    return null;\n  }\n\n  var dist = [];\n\n  for (var i = 0; i <= sourceLen; i++) {\n    dist[i] = [];\n    dist[i][0] = {\n      min: i\n    };\n  }\n\n  for (var j = 0; j <= targetLen; j++) {\n    dist[0][j] = {\n      min: j\n    };\n  }\n\n  for (var i = 1; i <= sourceLen; i++) {\n    sourceSegment = source[i - 1];\n\n    for (var j = 1; j <= targetLen; j++) {\n      targetSegment = target[j - 1];\n\n      if (isEqual(sourceSegment, targetSegment)) {\n        temp = 0;\n      } else {\n        temp = 1;\n      }\n\n      var del = dist[i - 1][j].min + 1;\n      var add = dist[i][j - 1].min + 1;\n      var modify = dist[i - 1][j - 1].min + temp;\n      dist[i][j] = getMinDiff(del, add, modify);\n    }\n  }\n\n  return dist;\n};\n\nexport default function fillPathByDiff(source, target) {\n  var diffMatrix = levenshteinDistance(source, target);\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var changes = [];\n  var index = 1;\n  var minPos = 1; // 如果source和target不是完全不相等\n  // @ts-ignore\n\n  if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n    // 获取从source到target所需改动\n    for (var i = 1; i <= sourceLen; i++) {\n      var min = diffMatrix[i][i].min;\n      minPos = i;\n\n      for (var j = index; j <= targetLen; j++) {\n        if (diffMatrix[i][j].min < min) {\n          min = diffMatrix[i][j].min;\n          minPos = j;\n        }\n      }\n\n      index = minPos;\n\n      if (diffMatrix[i][index].type) {\n        changes.push({\n          index: i - 1,\n          type: diffMatrix[i][index].type\n        });\n      }\n    } // 对source进行增删path\n\n\n    for (var i = changes.length - 1; i >= 0; i--) {\n      index = changes[i].index;\n\n      if (changes[i].type === 'add') {\n        // @ts-ignore\n        source.splice(index, 0, [].concat(source[index]));\n      } else {\n        // @ts-ignore\n        source.splice(index, 1);\n      }\n    }\n  } // source尾部补齐\n\n\n  sourceLen = source.length;\n\n  if (sourceLen < targetLen) {\n    for (var i = 0; i < targetLen - sourceLen; i++) {\n      if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n        // @ts-ignore\n        source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n      } else {\n        // @ts-ignore\n        source.push(source[sourceLen - 1]);\n      }\n    }\n  }\n\n  return source;\n}","map":{"version":3,"mappings":"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","names":["isEqual","getMinDiff","del","add","modify","type","min","levenshteinDistance","source","target","sourceLen","length","targetLen","sourceSegment","targetSegment","temp","dist","i","j","fillPathByDiff","diffMatrix","changes","index","minPos","push","splice","concat"],"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/path-util/src/fill-path-by-diff.ts"],"sourcesContent":["import { isEqual } from 'lodash-es';\n\nexport interface DiffType {\n  type: string;\n  min: number;\n}\n\nfunction getMinDiff(del: number, add: number, modify: number): DiffType {\n  let type = null;\n  let min = modify;\n  if (add < min) {\n    min = add;\n    type = 'add';\n  }\n  if (del < min) {\n    min = del;\n    type = 'del';\n  }\n  return {\n    type,\n    min,\n  };\n}\n\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\nconst levenshteinDistance = function (source: string, target: string): DiffType[][] {\n  const sourceLen = source.length;\n  const targetLen = target.length;\n  let sourceSegment, targetSegment;\n  let temp = 0;\n  if (sourceLen === 0 || targetLen === 0) {\n    return null;\n  }\n  const dist = [];\n  for (let i = 0; i <= sourceLen; i++) {\n    dist[i] = [];\n    dist[i][0] = { min: i };\n  }\n  for (let j = 0; j <= targetLen; j++) {\n    dist[0][j] = { min: j };\n  }\n\n  for (let i = 1; i <= sourceLen; i++) {\n    sourceSegment = source[i - 1];\n    for (let j = 1; j <= targetLen; j++) {\n      targetSegment = target[j - 1];\n      if (isEqual(sourceSegment, targetSegment)) {\n        temp = 0;\n      } else {\n        temp = 1;\n      }\n      const del = dist[i - 1][j].min + 1;\n      const add = dist[i][j - 1].min + 1;\n      const modify = dist[i - 1][j - 1].min + temp;\n      dist[i][j] = getMinDiff(del, add, modify);\n    }\n  }\n  return dist;\n};\n\nexport default function fillPathByDiff(source: string, target: string) {\n  const diffMatrix = levenshteinDistance(source, target);\n  let sourceLen = source.length;\n  const targetLen = target.length;\n  const changes = [];\n  let index = 1;\n  let minPos = 1;\n  // 如果source和target不是完全不相等\n  // @ts-ignore\n  if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n    // 获取从source到target所需改动\n    for (let i = 1; i <= sourceLen; i++) {\n      let min = diffMatrix[i][i].min;\n      minPos = i;\n      for (let j = index; j <= targetLen; j++) {\n        if (diffMatrix[i][j].min < min) {\n          min = diffMatrix[i][j].min;\n          minPos = j;\n        }\n      }\n      index = minPos;\n      if (diffMatrix[i][index].type) {\n        changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n      }\n    }\n    // 对source进行增删path\n    for (let i = changes.length - 1; i >= 0; i--) {\n      index = changes[i].index;\n      if (changes[i].type === 'add') {\n        // @ts-ignore\n        source.splice(index, 0, [].concat(source[index]));\n      } else {\n        // @ts-ignore\n        source.splice(index, 1);\n      }\n    }\n  }\n\n  // source尾部补齐\n  sourceLen = source.length;\n  if (sourceLen < targetLen) {\n    for (let i = 0; i < targetLen - sourceLen; i++) {\n      if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n        // @ts-ignore\n        source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n      } else {\n        // @ts-ignore\n        source.push(source[sourceLen - 1]);\n      }\n    }\n  }\n  return source;\n}\n"]},"metadata":{},"sourceType":"module"}