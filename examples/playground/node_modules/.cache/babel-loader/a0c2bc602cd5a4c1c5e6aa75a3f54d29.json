{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n\nconst defaultFactory = (key, hook) => hook;\n\nclass HookMap {\n  constructor(factory) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    this._map = new Map();\n    this.name = name;\n    this._factory = factory;\n    this._interceptors = [];\n  }\n\n  get(key) {\n    return this._map.get(key);\n  }\n\n  for(key) {\n    const hook = this.get(key);\n\n    if (hook !== undefined) {\n      return hook;\n    }\n\n    let newHook = this._factory(key);\n\n    const interceptors = this._interceptors;\n\n    for (let i = 0; i < interceptors.length; i++) {\n      newHook = interceptors[i].factory(key, newHook);\n    }\n\n    this._map.set(key, newHook);\n\n    return newHook;\n  }\n\n  intercept(interceptor) {\n    this._interceptors.push(Object.assign({\n      factory: defaultFactory\n    }, interceptor));\n  }\n\n}\n\nHookMap.prototype.tap = util.deprecate(function (key, options, fn) {\n  return this.for(key).tap(options, fn);\n}, \"HookMap#tap(key,…) is deprecated. Use HookMap#for(key).tap(…) instead.\");\nHookMap.prototype.tapAsync = util.deprecate(function (key, options, fn) {\n  return this.for(key).tapAsync(options, fn);\n}, \"HookMap#tapAsync(key,…) is deprecated. Use HookMap#for(key).tapAsync(…) instead.\");\nHookMap.prototype.tapPromise = util.deprecate(function (key, options, fn) {\n  return this.for(key).tapPromise(options, fn);\n}, \"HookMap#tapPromise(key,…) is deprecated. Use HookMap#for(key).tapPromise(…) instead.\");\nmodule.exports = HookMap;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/tapable/lib/HookMap.js"],"names":["util","require","defaultFactory","key","hook","HookMap","constructor","factory","name","undefined","_map","Map","_factory","_interceptors","get","for","newHook","interceptors","i","length","set","intercept","interceptor","push","Object","assign","prototype","tap","deprecate","options","fn","tapAsync","tapPromise","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,cAAc,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAeA,IAAtC;;AAEA,MAAMC,OAAN,CAAc;AACbC,EAAAA,WAAW,CAACC,OAAD,EAA4B;AAAA,QAAlBC,IAAkB,uEAAXC,SAAW;AACtC,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKI,QAAL,GAAgBL,OAAhB;AACA,SAAKM,aAAL,GAAqB,EAArB;AACA;;AAEDC,EAAAA,GAAG,CAACX,GAAD,EAAM;AACR,WAAO,KAAKO,IAAL,CAAUI,GAAV,CAAcX,GAAd,CAAP;AACA;;AAEDY,EAAAA,GAAG,CAACZ,GAAD,EAAM;AACR,UAAMC,IAAI,GAAG,KAAKU,GAAL,CAASX,GAAT,CAAb;;AACA,QAAIC,IAAI,KAAKK,SAAb,EAAwB;AACvB,aAAOL,IAAP;AACA;;AACD,QAAIY,OAAO,GAAG,KAAKJ,QAAL,CAAcT,GAAd,CAAd;;AACA,UAAMc,YAAY,GAAG,KAAKJ,aAA1B;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC7CF,MAAAA,OAAO,GAAGC,YAAY,CAACC,CAAD,CAAZ,CAAgBX,OAAhB,CAAwBJ,GAAxB,EAA6Ba,OAA7B,CAAV;AACA;;AACD,SAAKN,IAAL,CAAUU,GAAV,CAAcjB,GAAd,EAAmBa,OAAnB;;AACA,WAAOA,OAAP;AACA;;AAEDK,EAAAA,SAAS,CAACC,WAAD,EAAc;AACtB,SAAKT,aAAL,CAAmBU,IAAnB,CACCC,MAAM,CAACC,MAAP,CACC;AACClB,MAAAA,OAAO,EAAEL;AADV,KADD,EAICoB,WAJD,CADD;AAQA;;AAnCY;;AAsCdjB,OAAO,CAACqB,SAAR,CAAkBC,GAAlB,GAAwB3B,IAAI,CAAC4B,SAAL,CAAe,UAASzB,GAAT,EAAc0B,OAAd,EAAuBC,EAAvB,EAA2B;AACjE,SAAO,KAAKf,GAAL,CAASZ,GAAT,EAAcwB,GAAd,CAAkBE,OAAlB,EAA2BC,EAA3B,CAAP;AACA,CAFuB,EAErB,wEAFqB,CAAxB;AAIAzB,OAAO,CAACqB,SAAR,CAAkBK,QAAlB,GAA6B/B,IAAI,CAAC4B,SAAL,CAAe,UAASzB,GAAT,EAAc0B,OAAd,EAAuBC,EAAvB,EAA2B;AACtE,SAAO,KAAKf,GAAL,CAASZ,GAAT,EAAc4B,QAAd,CAAuBF,OAAvB,EAAgCC,EAAhC,CAAP;AACA,CAF4B,EAE1B,kFAF0B,CAA7B;AAIAzB,OAAO,CAACqB,SAAR,CAAkBM,UAAlB,GAA+BhC,IAAI,CAAC4B,SAAL,CAAe,UAASzB,GAAT,EAAc0B,OAAd,EAAuBC,EAAvB,EAA2B;AACxE,SAAO,KAAKf,GAAL,CAASZ,GAAT,EAAc6B,UAAd,CAAyBH,OAAzB,EAAkCC,EAAlC,CAAP;AACA,CAF8B,EAE5B,sFAF4B,CAA/B;AAIAG,MAAM,CAACC,OAAP,GAAiB7B,OAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n\nconst defaultFactory = (key, hook) => hook;\n\nclass HookMap {\n\tconstructor(factory, name = undefined) {\n\t\tthis._map = new Map();\n\t\tthis.name = name;\n\t\tthis._factory = factory;\n\t\tthis._interceptors = [];\n\t}\n\n\tget(key) {\n\t\treturn this._map.get(key);\n\t}\n\n\tfor(key) {\n\t\tconst hook = this.get(key);\n\t\tif (hook !== undefined) {\n\t\t\treturn hook;\n\t\t}\n\t\tlet newHook = this._factory(key);\n\t\tconst interceptors = this._interceptors;\n\t\tfor (let i = 0; i < interceptors.length; i++) {\n\t\t\tnewHook = interceptors[i].factory(key, newHook);\n\t\t}\n\t\tthis._map.set(key, newHook);\n\t\treturn newHook;\n\t}\n\n\tintercept(interceptor) {\n\t\tthis._interceptors.push(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\tfactory: defaultFactory\n\t\t\t\t},\n\t\t\t\tinterceptor\n\t\t\t)\n\t\t);\n\t}\n}\n\nHookMap.prototype.tap = util.deprecate(function(key, options, fn) {\n\treturn this.for(key).tap(options, fn);\n}, \"HookMap#tap(key,…) is deprecated. Use HookMap#for(key).tap(…) instead.\");\n\nHookMap.prototype.tapAsync = util.deprecate(function(key, options, fn) {\n\treturn this.for(key).tapAsync(options, fn);\n}, \"HookMap#tapAsync(key,…) is deprecated. Use HookMap#for(key).tapAsync(…) instead.\");\n\nHookMap.prototype.tapPromise = util.deprecate(function(key, options, fn) {\n\treturn this.for(key).tapPromise(options, fn);\n}, \"HookMap#tapPromise(key,…) is deprecated. Use HookMap#for(key).tapPromise(…) instead.\");\n\nmodule.exports = HookMap;\n"]},"metadata":{},"sourceType":"script"}