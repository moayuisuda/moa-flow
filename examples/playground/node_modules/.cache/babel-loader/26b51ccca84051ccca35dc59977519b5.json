{"ast":null,"code":"import { __decorate, __assign } from './node_modules/tslib/tslib.es6.js';\nimport { observable, action, makeObservable } from 'mobx';\nimport { remove, isRectsInterSect, findIndex, arrayMove } from './utils/util.js';\nimport { color } from './theme/style.js';\nimport './node_modules/lodash/lodash.js';\nimport { l as lodash } from './_virtual/lodash.js';\nimport v4 from './packages/flow/node_modules/uuid/dist/esm-browser/v4.js';\n\nvar FlowModel =\n/** @class */\nfunction () {\n  function FlowModel(eventSender) {\n    var _this = this;\n\n    this.setEventSender = function (eventSender) {\n      _this.eventBus.sender = eventSender;\n    };\n\n    this.setCellsDataMap = function () {\n      _this.canvasData.cells.forEach(function (cellData) {\n        _this.setCellDataMap(cellData);\n      });\n    };\n\n    this.extra = {};\n    this._width = 1000;\n    this._height = 600;\n\n    this.width = function (width) {\n      if (lodash.exports.isUndefined(width)) return _this._width;else {\n        _this._width = width;\n        return width;\n      }\n    };\n\n    this.height = function (height) {\n      if (lodash.exports.isUndefined(height)) return _this._height;else {\n        _this._height = height;\n        return height;\n      }\n    };\n\n    this.setSize = function (width, height) {\n      _this._width = width;\n      _this._height = height;\n    };\n\n    this.grid = 1;\n\n    this.setGrid = function (grid) {\n      _this.grid = grid;\n    };\n\n    this.refs = {\n      stageRef: undefined,\n      nodesLayerRef: undefined,\n      linesLayerRef: undefined\n    };\n    this.hotKey = {\n      RightMouseDown: false,\n      LeftMouseDown: false,\n      Space: false\n    };\n\n    this.setHotKey = function (key, value) {\n      _this.hotKey[key] = value;\n    };\n\n    this.linkEdge = \"Edge\";\n\n    this.setLinkEdge = function (name) {\n      _this.linkEdge = name;\n    };\n\n    this.getLinkingPort = function () {\n      return _this.buffer.link.source;\n    };\n\n    this.clearPortEdge = function (edgeId) {\n      var edgeData = _this.getCellData(edgeId);\n\n      var sourcePort = _this.getCellData(edgeData.source);\n\n      var targetPort = _this.getCellData(edgeData.target);\n\n      sourcePort.edges && remove(sourcePort.edges, edgeId);\n      targetPort.edges && remove(targetPort.edges, edgeId);\n    }; // 一些中间状态，比如连线中的开始节点的暂存，不应该让外部\n\n\n    this.buffer = {\n      rightClickPanel: {\n        visible: false\n      },\n      drag: {\n        movement: {\n          x: 0,\n          y: 0\n        },\n        start: {\n          x: 0,\n          y: 0\n        }\n      },\n      isWheeling: false,\n      select: {\n        isSelecting: false,\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: 0,\n          y: 0\n        }\n      },\n      link: {\n        // 只是为了统一渲染，加$state\n        $state: {\n          isSelect: false,\n          isLinking: true\n        },\n        edge: undefined,\n        source: undefined,\n        target: {\n          x: 0,\n          y: 0\n        }\n      }\n    };\n\n    this.setMultiSelect = function (select, onlySetPosition) {\n      if (onlySetPosition === void 0) {\n        onlySetPosition = false;\n      }\n\n      var bufferSelect = _this.buffer.select;\n      Object.assign(bufferSelect, select);\n      var right = Math.max(bufferSelect.start.x, bufferSelect.end.x);\n      var x = Math.min(bufferSelect.start.x, bufferSelect.end.x);\n      var y = Math.min(bufferSelect.start.y, bufferSelect.end.y);\n      var bottom = Math.max(bufferSelect.start.y, bufferSelect.end.y);\n      if (onlySetPosition) return;\n      var re = [];\n\n      _this.cellsMap.forEach(function (cell) {\n        var _a;\n\n        if (((_a = cell.props.data) === null || _a === void 0 ? void 0 : _a.cellType) === \"node\") {\n          // 判断矩形是否相交\n          if (isRectsInterSect({\n            x: x,\n            y: y,\n            width: right - x,\n            height: bottom - y\n          }, _this.getLocalBBox(cell.props.data.id))) {\n            re.push(cell.props.data.id);\n          }\n        }\n      });\n\n      _this.setSelectedCells(re);\n    };\n\n    this.clearLinkBuffer = function () {\n      Object.assign(_this.buffer.link, {\n        edge: undefined,\n        source: undefined,\n        target: {\n          x: 0,\n          y: 0\n        }\n      });\n    }; // 全局颜色，可以由用户自定义\n\n\n    this.color = color; // cell的<id, 实例>map，方便用id获取到组件实例\n\n    this.cellsMap = new Map(); // cellData的<id, cellData>map，用来修改受控数据\n\n    this.cellsDataMap = new Map(); // 注册节点到model，方便动态引用\n\n    this.componentsMap = new Map();\n\n    this.regist = function (name, component) {\n      _this.componentsMap.set(name, component);\n    }; // 消息传递\n\n\n    this.eventBus = {\n      sender: undefined,\n      receiver: undefined\n    }; // 选中的cell\n\n    this.selectCells = [];\n\n    this.setSelectedCells = function (ids, ifReplace) {\n      if (ifReplace === void 0) {\n        ifReplace = true;\n      } // @TODO select感觉只能放在私有属性，否则每次更新要diff全部的节点\n\n\n      if (ifReplace) {\n        _this.selectCells = ids;\n      } else {\n        _this.selectCells = lodash.exports.union(_this.selectCells, ids);\n      }\n    }; // 画布的渲染数据，之后的渲染大部分都为受控渲染，更改canvasData => 触发重新渲染\n\n\n    this.canvasData = {\n      scale: 1,\n      x: 0,\n      y: 0,\n      cells: []\n    };\n\n    this.clearSelect = function () {\n      _this.selectCells = [];\n    };\n\n    this.sendEvent = function (data) {\n      var _a, _b;\n\n      (_b = (_a = _this.eventBus).sender) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n    };\n\n    this.setStageScale = function (scale) {\n      _this.canvasData.scale = scale;\n    };\n\n    this.setStagePosition = function (x, y) {\n      _this.canvasData.x = x;\n      _this.canvasData.y = y;\n    };\n\n    this.insertRuntimeState = function (cellData) {\n      cellData.$state = {\n        isSelect: false,\n        isLinking: false\n      };\n    };\n\n    this.getLocalBBox = function (id) {\n      var instanceBounds = _this.cellsMap.get(id).wrapperRef.current.getLocalBounds();\n\n      return {\n        x: instanceBounds.center[0] - instanceBounds.halfExtents[0],\n        y: instanceBounds.center[1] - instanceBounds.halfExtents[1],\n        width: instanceBounds.halfExtents[0] * 2,\n        height: instanceBounds.halfExtents[1] * 2\n      };\n    };\n\n    this.setCanvasData = function (canvasData) {\n      canvasData.cells.forEach(function (cellData) {\n        _this.insertRuntimeState(cellData);\n      });\n      _this.canvasData = canvasData; // 这里考虑到react会复用实例，所以不能简单地清除cellsMap\n      // this.cellsDataMap.clear();\n      // this.cellsMap.clear();\n\n      _this.setCellsDataMap();\n    };\n\n    this.setCellId = function (data) {\n      data.id = v4();\n    };\n\n    this.setCellData = function (id, data) {\n      var cellData = _this.getCellData(id);\n\n      _this.sendEvent({\n        type: \"data:change\"\n      });\n\n      lodash.exports.merge(cellData, data);\n    };\n\n    this.getNodeEdges = function (nodeId) {\n      var re = [];\n\n      var nodeData = _this.getCellData(nodeId);\n\n      if (nodeData.ports) nodeData.ports.forEach(function (port) {\n        if (port.edges) {\n          port.edges.forEach(function (edgeId) {\n            re.push(edgeId);\n          });\n        }\n      });\n      return re;\n    };\n\n    this.getLinkPorts = function (id) {\n      var re = [];\n\n      var nodeData = _this.getCellData(id);\n\n      if (nodeData.ports) nodeData.ports.forEach(function (port) {\n        if (port.edges) {\n          port.edges.forEach(function (edgeId) {\n            var edgeData = _this.getCellData(edgeId);\n\n            var sourcePort = _this.getCellData(edgeData.source);\n\n            var targetPort = _this.getCellData(edgeData.target);\n\n            re.push.apply(re, lodash.exports.without(lodash.exports.union([sourcePort.id], [targetPort.id]), id));\n          });\n        }\n      });\n      return re;\n    }; // 获取某一个node连接的其他node\n\n\n    this.getLinkNodes = function (id) {\n      var re = [];\n\n      var nodeData = _this.getCellData(id);\n\n      if (nodeData.ports) nodeData.ports.forEach(function (port) {\n        if (port.edges) {\n          port.edges.forEach(function (edgeId) {\n            var edgeData = _this.getCellData(edgeId);\n\n            var sourcePort = _this.getCellData(edgeData.source);\n\n            var targetPort = _this.getCellData(edgeData.target);\n\n            re.push.apply(re, lodash.exports.without(lodash.exports.union([sourcePort.host], [targetPort.host]), id));\n          });\n        }\n      });\n      return re;\n    };\n\n    this.deleCell = function (id) {\n      var matchCell = _this.getCellData(id);\n\n      if (!matchCell) {\n        console.error(\"[flow-infra] can not find match dele Cell\");\n        return;\n      }\n\n      if (matchCell.cellType === \"edge\") _this.clearPortEdge(matchCell.id);\n      _this.selectCells.includes(id) && remove(_this.selectCells, id);\n      remove(_this.canvasData.cells, matchCell);\n\n      _this.cellsMap.delete(id);\n\n      _this.cellsDataMap.delete(id);\n\n      _this.sendEvent({\n        type: \"data:change\"\n      });\n\n      return matchCell.id;\n    };\n\n    this.snap = function (vector) {\n      var grid = _this.grid;\n      return {\n        x: Math.round(vector.x / grid) * grid,\n        y: Math.round(vector.y / grid) * grid\n      };\n    }; // 自动布局，用自动布局的三方库对每一个节点的x，y进行计算\n    // @action setAutoLayout = (layoutOption) => {};\n    // 创建新的节点数据\n\n\n    this.createCellData = function (component, initOptions) {\n      var id = v4();\n      var metaData = Object.assign(_this.componentsMap.get(component).getMetaData(), {\n        component: component\n      });\n\n      _this.insertRuntimeState(metaData);\n\n      return Object.assign(metaData, __assign({\n        id: id\n      }, initOptions));\n    };\n\n    this.addCell = function (componentName, initOptions) {\n      var newCellData = _this.createCellData(componentName, initOptions);\n\n      if (newCellData.ports) {\n        newCellData.ports.forEach(function (port) {\n          port.host = newCellData.id;\n          port.cellType = \"port\";\n          if (!port.id) port.id = v4();\n        });\n      }\n\n      _this.canvasData.cells.push(newCellData);\n\n      _this.setCellDataMap(_this.canvasData.cells[_this.canvasData.cells.length - 1]); // console.log(\n      //   newCellData,\n      //   this.canvasData.cells[this.canvasData.cells.length - 1]\n      // ); // 两者不是一个对象，后者是proxy\n\n\n      _this.sendEvent({\n        type: \"data:change\"\n      });\n\n      return newCellData.id;\n    };\n\n    this.setLinkingPosition = function (e) {\n      var cursorPos = _this.getStageCursor(e);\n\n      _this.buffer.link.target.x = cursorPos.x;\n      _this.buffer.link.target.y = cursorPos.y;\n    };\n\n    this.link = function (source, target) {\n      var sourceCellData = _this.getCellData(source);\n\n      var targetCellData = _this.getCellData(target);\n\n      var edgeId = _this.addCell(_this.linkEdge, {\n        source: source,\n        target: target\n      });\n\n      if (sourceCellData.edges) {\n        sourceCellData.edges.push(edgeId);\n      } else sourceCellData.edges = [edgeId];\n\n      if (targetCellData.edges) {\n        targetCellData.edges.push(edgeId);\n      } else targetCellData.edges = [edgeId];\n\n      _this.sendEvent({\n        type: \"link\",\n        data: {\n          source: source,\n          target: target\n        }\n      });\n\n      _this.clearLinkBuffer();\n    };\n\n    this.scale = function (scale) {\n      if (lodash.exports.isUndefined(scale)) return _this.canvasData.scale;else {\n        _this.setStageScale(scale);\n\n        return scale;\n      }\n    };\n\n    this.getCell = function (id) {\n      return _this.cellsMap.get(id);\n    };\n\n    this.getCellData = function (id) {\n      return _this.cellsDataMap.get(id);\n    };\n\n    this.getCellInstance = function (id) {\n      return _this.cellsMap.get(id);\n    };\n\n    this.getCellsData = function () {\n      return _this.canvasData.cells;\n    };\n\n    this.getStageCursor = function (e) {\n      return {\n        x: (e.canvas.x - _this.x()) / _this.scale(),\n        y: (e.canvas.y - _this.y()) / _this.scale()\n      };\n    };\n\n    makeObservable(this);\n    if (eventSender) this.eventBus.sender = eventSender;\n  }\n\n  FlowModel.prototype.setCellDataMap = function (cellData) {\n    var _this = this;\n\n    this.cellsDataMap.set(cellData.id, cellData);\n\n    function isNodeDataType(t) {\n      return t.cellType === \"node\";\n    }\n\n    if (isNodeDataType(cellData)) {\n      if (cellData.ports) {\n        cellData.ports.forEach(function (portData) {\n          _this.setCellDataMap(portData);\n        });\n      }\n    }\n  }; // @action\n\n\n  FlowModel.prototype.x = function (x) {\n    if (lodash.exports.isUndefined(x)) return this.canvasData.x;else {\n      this.setStagePosition(x, this.canvasData.y);\n      return x;\n    }\n  }; // @action\n\n\n  FlowModel.prototype.y = function (y) {\n    if (lodash.exports.isUndefined(y)) return this.canvasData.y;else {\n      this.setStagePosition(this.canvasData.x, y);\n      return y;\n    }\n  };\n\n  FlowModel.prototype.moveTo = function (id, index) {\n    var oldIndex = findIndex(this.canvasData.cells, this.getCellData(id));\n    arrayMove(this.canvasData.cells, oldIndex, index);\n  };\n\n  __decorate([observable], FlowModel.prototype, \"_width\", void 0);\n\n  __decorate([observable], FlowModel.prototype, \"_height\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setSize\", void 0);\n\n  __decorate([observable], FlowModel.prototype, \"grid\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setGrid\", void 0);\n\n  __decorate([observable], FlowModel.prototype, \"hotKey\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setHotKey\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setLinkEdge\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"clearPortEdge\", void 0);\n\n  __decorate([observable], FlowModel.prototype, \"buffer\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setMultiSelect\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"clearLinkBuffer\", void 0);\n\n  __decorate([observable], FlowModel.prototype, \"color\", void 0);\n\n  __decorate([observable], FlowModel.prototype, \"selectCells\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setSelectedCells\", void 0);\n\n  __decorate([observable], FlowModel.prototype, \"canvasData\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"clearSelect\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setStageScale\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setStagePosition\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setCanvasData\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setCellId\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setCellData\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"deleCell\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"createCellData\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"addCell\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"setLinkingPosition\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"link\", void 0);\n\n  __decorate([action], FlowModel.prototype, \"moveTo\", null);\n\n  return FlowModel;\n}();\n\nexport { FlowModel, FlowModel as default };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/packages/flow/lib/Model.js"],"names":["__decorate","__assign","observable","action","makeObservable","remove","isRectsInterSect","findIndex","arrayMove","color","l","lodash","v4","FlowModel","eventSender","_this","setEventSender","eventBus","sender","setCellsDataMap","canvasData","cells","forEach","cellData","setCellDataMap","extra","_width","_height","width","exports","isUndefined","height","setSize","grid","setGrid","refs","stageRef","undefined","nodesLayerRef","linesLayerRef","hotKey","RightMouseDown","LeftMouseDown","Space","setHotKey","key","value","linkEdge","setLinkEdge","name","getLinkingPort","buffer","link","source","clearPortEdge","edgeId","edgeData","getCellData","sourcePort","targetPort","target","edges","rightClickPanel","visible","drag","movement","x","y","start","isWheeling","select","isSelecting","end","$state","isSelect","isLinking","edge","setMultiSelect","onlySetPosition","bufferSelect","Object","assign","right","Math","max","min","bottom","re","cellsMap","cell","_a","props","data","cellType","getLocalBBox","id","push","setSelectedCells","clearLinkBuffer","Map","cellsDataMap","componentsMap","regist","component","set","receiver","selectCells","ids","ifReplace","union","scale","clearSelect","sendEvent","_b","call","setStageScale","setStagePosition","insertRuntimeState","instanceBounds","get","wrapperRef","current","getLocalBounds","center","halfExtents","setCanvasData","setCellId","setCellData","type","merge","getNodeEdges","nodeId","nodeData","ports","port","getLinkPorts","apply","without","getLinkNodes","host","deleCell","matchCell","console","error","includes","delete","snap","vector","round","createCellData","initOptions","metaData","getMetaData","addCell","componentName","newCellData","length","setLinkingPosition","e","cursorPos","getStageCursor","sourceCellData","targetCellData","getCell","getCellInstance","getCellsData","canvas","prototype","isNodeDataType","t","portData","moveTo","index","oldIndex","default"],"mappings":"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","sourcesContent":["import { __decorate, __assign } from './node_modules/tslib/tslib.es6.js';\nimport { observable, action, makeObservable } from 'mobx';\nimport { remove, isRectsInterSect, findIndex, arrayMove } from './utils/util.js';\nimport { color } from './theme/style.js';\nimport './node_modules/lodash/lodash.js';\nimport { l as lodash } from './_virtual/lodash.js';\nimport v4 from './packages/flow/node_modules/uuid/dist/esm-browser/v4.js';\n\nvar FlowModel = /** @class */ (function () {\n    function FlowModel(eventSender) {\n        var _this = this;\n        this.setEventSender = function (eventSender) {\n            _this.eventBus.sender = eventSender;\n        };\n        this.setCellsDataMap = function () {\n            _this.canvasData.cells.forEach(function (cellData) {\n                _this.setCellDataMap(cellData);\n            });\n        };\n        this.extra = {};\n        this._width = 1000;\n        this._height = 600;\n        this.width = function (width) {\n            if (lodash.exports.isUndefined(width))\n                return _this._width;\n            else {\n                _this._width = width;\n                return width;\n            }\n        };\n        this.height = function (height) {\n            if (lodash.exports.isUndefined(height))\n                return _this._height;\n            else {\n                _this._height = height;\n                return height;\n            }\n        };\n        this.setSize = function (width, height) {\n            _this._width = width;\n            _this._height = height;\n        };\n        this.grid = 1;\n        this.setGrid = function (grid) {\n            _this.grid = grid;\n        };\n        this.refs = {\n            stageRef: undefined,\n            nodesLayerRef: undefined,\n            linesLayerRef: undefined,\n        };\n        this.hotKey = {\n            RightMouseDown: false,\n            LeftMouseDown: false,\n            Space: false,\n        };\n        this.setHotKey = function (key, value) {\n            _this.hotKey[key] = value;\n        };\n        this.linkEdge = \"Edge\";\n        this.setLinkEdge = function (name) {\n            _this.linkEdge = name;\n        };\n        this.getLinkingPort = function () {\n            return _this.buffer.link.source;\n        };\n        this.clearPortEdge = function (edgeId) {\n            var edgeData = _this.getCellData(edgeId);\n            var sourcePort = _this.getCellData(edgeData.source);\n            var targetPort = _this.getCellData(edgeData.target);\n            sourcePort.edges && remove(sourcePort.edges, edgeId);\n            targetPort.edges && remove(targetPort.edges, edgeId);\n        };\n        // 一些中间状态，比如连线中的开始节点的暂存，不应该让外部\n        this.buffer = {\n            rightClickPanel: {\n                visible: false,\n            },\n            drag: {\n                movement: {\n                    x: 0,\n                    y: 0,\n                },\n                start: {\n                    x: 0,\n                    y: 0,\n                },\n            },\n            isWheeling: false,\n            select: {\n                isSelecting: false,\n                start: { x: 0, y: 0 },\n                end: { x: 0, y: 0 },\n            },\n            link: {\n                // 只是为了统一渲染，加$state\n                $state: {\n                    isSelect: false,\n                    isLinking: true,\n                },\n                edge: undefined,\n                source: undefined,\n                target: {\n                    x: 0,\n                    y: 0,\n                },\n            },\n        };\n        this.setMultiSelect = function (select, onlySetPosition) {\n            if (onlySetPosition === void 0) { onlySetPosition = false; }\n            var bufferSelect = _this.buffer.select;\n            Object.assign(bufferSelect, select);\n            var right = Math.max(bufferSelect.start.x, bufferSelect.end.x);\n            var x = Math.min(bufferSelect.start.x, bufferSelect.end.x);\n            var y = Math.min(bufferSelect.start.y, bufferSelect.end.y);\n            var bottom = Math.max(bufferSelect.start.y, bufferSelect.end.y);\n            if (onlySetPosition)\n                return;\n            var re = [];\n            _this.cellsMap.forEach(function (cell) {\n                var _a;\n                if (((_a = cell.props.data) === null || _a === void 0 ? void 0 : _a.cellType) === \"node\") {\n                    // 判断矩形是否相交\n                    if (isRectsInterSect({\n                        x: x,\n                        y: y,\n                        width: right - x,\n                        height: bottom - y,\n                    }, _this.getLocalBBox(cell.props.data.id))) {\n                        re.push(cell.props.data.id);\n                    }\n                }\n            });\n            _this.setSelectedCells(re);\n        };\n        this.clearLinkBuffer = function () {\n            Object.assign(_this.buffer.link, {\n                edge: undefined,\n                source: undefined,\n                target: {\n                    x: 0,\n                    y: 0,\n                },\n            });\n        };\n        // 全局颜色，可以由用户自定义\n        this.color = color;\n        // cell的<id, 实例>map，方便用id获取到组件实例\n        this.cellsMap = new Map();\n        // cellData的<id, cellData>map，用来修改受控数据\n        this.cellsDataMap = new Map();\n        // 注册节点到model，方便动态引用\n        this.componentsMap = new Map();\n        this.regist = function (name, component) {\n            _this.componentsMap.set(name, component);\n        };\n        // 消息传递\n        this.eventBus = {\n            sender: undefined,\n            receiver: undefined,\n        };\n        // 选中的cell\n        this.selectCells = [];\n        this.setSelectedCells = function (ids, ifReplace) {\n            if (ifReplace === void 0) { ifReplace = true; }\n            // @TODO select感觉只能放在私有属性，否则每次更新要diff全部的节点\n            if (ifReplace) {\n                _this.selectCells = ids;\n            }\n            else {\n                _this.selectCells = lodash.exports.union(_this.selectCells, ids);\n            }\n        };\n        // 画布的渲染数据，之后的渲染大部分都为受控渲染，更改canvasData => 触发重新渲染\n        this.canvasData = {\n            scale: 1,\n            x: 0,\n            y: 0,\n            cells: [],\n        };\n        this.clearSelect = function () {\n            _this.selectCells = [];\n        };\n        this.sendEvent = function (data) {\n            var _a, _b;\n            (_b = (_a = _this.eventBus).sender) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n        };\n        this.setStageScale = function (scale) {\n            _this.canvasData.scale = scale;\n        };\n        this.setStagePosition = function (x, y) {\n            _this.canvasData.x = x;\n            _this.canvasData.y = y;\n        };\n        this.insertRuntimeState = function (cellData) {\n            cellData.$state = {\n                isSelect: false,\n                isLinking: false,\n            };\n        };\n        this.getLocalBBox = function (id) {\n            var instanceBounds = _this.cellsMap\n                .get(id)\n                .wrapperRef.current.getLocalBounds();\n            return {\n                x: instanceBounds.center[0] - instanceBounds.halfExtents[0],\n                y: instanceBounds.center[1] - instanceBounds.halfExtents[1],\n                width: instanceBounds.halfExtents[0] * 2,\n                height: instanceBounds.halfExtents[1] * 2,\n            };\n        };\n        this.setCanvasData = function (canvasData) {\n            canvasData.cells.forEach(function (cellData) {\n                _this.insertRuntimeState(cellData);\n            });\n            _this.canvasData = canvasData;\n            // 这里考虑到react会复用实例，所以不能简单地清除cellsMap\n            // this.cellsDataMap.clear();\n            // this.cellsMap.clear();\n            _this.setCellsDataMap();\n        };\n        this.setCellId = function (data) {\n            data.id = v4();\n        };\n        this.setCellData = function (id, data) {\n            var cellData = _this.getCellData(id);\n            _this.sendEvent({\n                type: \"data:change\",\n            });\n            lodash.exports.merge(cellData, data);\n        };\n        this.getNodeEdges = function (nodeId) {\n            var re = [];\n            var nodeData = _this.getCellData(nodeId);\n            if (nodeData.ports)\n                nodeData.ports.forEach(function (port) {\n                    if (port.edges) {\n                        port.edges.forEach(function (edgeId) {\n                            re.push(edgeId);\n                        });\n                    }\n                });\n            return re;\n        };\n        this.getLinkPorts = function (id) {\n            var re = [];\n            var nodeData = _this.getCellData(id);\n            if (nodeData.ports)\n                nodeData.ports.forEach(function (port) {\n                    if (port.edges) {\n                        port.edges.forEach(function (edgeId) {\n                            var edgeData = _this.getCellData(edgeId);\n                            var sourcePort = _this.getCellData(edgeData.source);\n                            var targetPort = _this.getCellData(edgeData.target);\n                            re.push.apply(re, lodash.exports.without(lodash.exports.union([sourcePort.id], [targetPort.id]), id));\n                        });\n                    }\n                });\n            return re;\n        };\n        // 获取某一个node连接的其他node\n        this.getLinkNodes = function (id) {\n            var re = [];\n            var nodeData = _this.getCellData(id);\n            if (nodeData.ports)\n                nodeData.ports.forEach(function (port) {\n                    if (port.edges) {\n                        port.edges.forEach(function (edgeId) {\n                            var edgeData = _this.getCellData(edgeId);\n                            var sourcePort = _this.getCellData(edgeData.source);\n                            var targetPort = _this.getCellData(edgeData.target);\n                            re.push.apply(re, lodash.exports.without(lodash.exports.union([sourcePort.host], [targetPort.host]), id));\n                        });\n                    }\n                });\n            return re;\n        };\n        this.deleCell = function (id) {\n            var matchCell = _this.getCellData(id);\n            if (!matchCell) {\n                console.error(\"[flow-infra] can not find match dele Cell\");\n                return;\n            }\n            if (matchCell.cellType === \"edge\")\n                _this.clearPortEdge(matchCell.id);\n            _this.selectCells.includes(id) && remove(_this.selectCells, id);\n            remove(_this.canvasData.cells, matchCell);\n            _this.cellsMap.delete(id);\n            _this.cellsDataMap.delete(id);\n            _this.sendEvent({\n                type: \"data:change\",\n            });\n            return matchCell.id;\n        };\n        this.snap = function (vector) {\n            var grid = _this.grid;\n            return {\n                x: Math.round(vector.x / grid) * grid,\n                y: Math.round(vector.y / grid) * grid,\n            };\n        };\n        // 自动布局，用自动布局的三方库对每一个节点的x，y进行计算\n        // @action setAutoLayout = (layoutOption) => {};\n        // 创建新的节点数据\n        this.createCellData = function (component, initOptions) {\n            var id = v4();\n            var metaData = Object.assign(_this.componentsMap.get(component).getMetaData(), {\n                component: component,\n            });\n            _this.insertRuntimeState(metaData);\n            return Object.assign(metaData, __assign({ id: id }, initOptions));\n        };\n        this.addCell = function (componentName, initOptions) {\n            var newCellData = _this.createCellData(componentName, initOptions);\n            if (newCellData.ports) {\n                newCellData.ports.forEach(function (port) {\n                    port.host = newCellData.id;\n                    port.cellType = \"port\";\n                    if (!port.id)\n                        port.id = v4();\n                });\n            }\n            _this.canvasData.cells.push(newCellData);\n            _this.setCellDataMap(_this.canvasData.cells[_this.canvasData.cells.length - 1]);\n            // console.log(\n            //   newCellData,\n            //   this.canvasData.cells[this.canvasData.cells.length - 1]\n            // ); // 两者不是一个对象，后者是proxy\n            _this.sendEvent({\n                type: \"data:change\",\n            });\n            return newCellData.id;\n        };\n        this.setLinkingPosition = function (e) {\n            var cursorPos = _this.getStageCursor(e);\n            _this.buffer.link.target.x = cursorPos.x;\n            _this.buffer.link.target.y = cursorPos.y;\n        };\n        this.link = function (source, target) {\n            var sourceCellData = _this.getCellData(source);\n            var targetCellData = _this.getCellData(target);\n            var edgeId = _this.addCell(_this.linkEdge, {\n                source: source,\n                target: target,\n            });\n            if (sourceCellData.edges) {\n                sourceCellData.edges.push(edgeId);\n            }\n            else\n                sourceCellData.edges = [edgeId];\n            if (targetCellData.edges) {\n                targetCellData.edges.push(edgeId);\n            }\n            else\n                targetCellData.edges = [edgeId];\n            _this.sendEvent({\n                type: \"link\",\n                data: {\n                    source: source,\n                    target: target,\n                },\n            });\n            _this.clearLinkBuffer();\n        };\n        this.scale = function (scale) {\n            if (lodash.exports.isUndefined(scale))\n                return _this.canvasData.scale;\n            else {\n                _this.setStageScale(scale);\n                return scale;\n            }\n        };\n        this.getCell = function (id) {\n            return _this.cellsMap.get(id);\n        };\n        this.getCellData = function (id) {\n            return _this.cellsDataMap.get(id);\n        };\n        this.getCellInstance = function (id) {\n            return _this.cellsMap.get(id);\n        };\n        this.getCellsData = function () {\n            return _this.canvasData.cells;\n        };\n        this.getStageCursor = function (e) {\n            return {\n                x: (e.canvas.x - _this.x()) / _this.scale(),\n                y: (e.canvas.y - _this.y()) / _this.scale(),\n            };\n        };\n        makeObservable(this);\n        if (eventSender)\n            this.eventBus.sender = eventSender;\n    }\n    FlowModel.prototype.setCellDataMap = function (cellData) {\n        var _this = this;\n        this.cellsDataMap.set(cellData.id, cellData);\n        function isNodeDataType(t) {\n            return t.cellType === \"node\";\n        }\n        if (isNodeDataType(cellData)) {\n            if (cellData.ports) {\n                cellData.ports.forEach(function (portData) {\n                    _this.setCellDataMap(portData);\n                });\n            }\n        }\n    };\n    // @action\n    FlowModel.prototype.x = function (x) {\n        if (lodash.exports.isUndefined(x))\n            return this.canvasData.x;\n        else {\n            this.setStagePosition(x, this.canvasData.y);\n            return x;\n        }\n    };\n    // @action\n    FlowModel.prototype.y = function (y) {\n        if (lodash.exports.isUndefined(y))\n            return this.canvasData.y;\n        else {\n            this.setStagePosition(this.canvasData.x, y);\n            return y;\n        }\n    };\n    FlowModel.prototype.moveTo = function (id, index) {\n        var oldIndex = findIndex(this.canvasData.cells, this.getCellData(id));\n        arrayMove(this.canvasData.cells, oldIndex, index);\n    };\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"_width\", void 0);\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"_height\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setSize\", void 0);\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"grid\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setGrid\", void 0);\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"hotKey\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setHotKey\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setLinkEdge\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"clearPortEdge\", void 0);\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"buffer\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setMultiSelect\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"clearLinkBuffer\", void 0);\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"color\", void 0);\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"selectCells\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setSelectedCells\", void 0);\n    __decorate([\n        observable\n    ], FlowModel.prototype, \"canvasData\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"clearSelect\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setStageScale\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setStagePosition\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setCanvasData\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setCellId\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setCellData\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"deleCell\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"createCellData\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"addCell\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"setLinkingPosition\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"link\", void 0);\n    __decorate([\n        action\n    ], FlowModel.prototype, \"moveTo\", null);\n    return FlowModel;\n}());\n\nexport { FlowModel, FlowModel as default };\n"]},"metadata":{},"sourceType":"module"}