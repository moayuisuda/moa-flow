{"ast":null,"code":"// import type { CSSValue } from '../CSSValue';\n// import { CSSPropertyID, cssPropertyID } from '../properties/CSSPropertyNames';\n// import { fromString } from '../parser/StyleValueFactory';\nimport { Nested, ParenLess, UnitType, UnitCategory } from './types'; // This file specifies the unit strings used in CSSPrimitiveValues.\n\nvar data = [{\n  name: 'em',\n  unit_type: UnitType.kEms\n}, // {\n//   name: 'ex',\n//   unit_type: UnitType.kExs,\n// },\n{\n  name: 'px',\n  unit_type: UnitType.kPixels\n}, // {\n//   name: \"cm\",\n//   unit_type: UnitType.kCentimeters,\n// },\n// {\n//   name: \"mm\",\n//   unit_type: UnitType.kMillimeters,\n// },\n// {\n//   name: \"q\",\n//   unit_type: UnitType.kQuarterMillimeters,\n// },\n// {\n//   name: \"in\",\n//   unit_type: UnitType.kInches,\n// },\n// {\n//   name: \"pt\",\n//   unit_type: UnitType.kPoints,\n// },\n// {\n//   name: \"pc\",\n//   unit_type: UnitType.kPicas,\n// },\n{\n  name: 'deg',\n  unit_type: UnitType.kDegrees\n}, {\n  name: 'rad',\n  unit_type: UnitType.kRadians\n}, {\n  name: 'grad',\n  unit_type: UnitType.kGradians\n}, {\n  name: 'ms',\n  unit_type: UnitType.kMilliseconds\n}, {\n  name: 's',\n  unit_type: UnitType.kSeconds\n}, // {\n//   name: \"hz\",\n//   unit_type: UnitType.kHertz,\n// },\n// {\n//   name: \"khz\",\n//   unit_type: UnitType.kKilohertz,\n// },\n// {\n//   name: \"dpi\",\n//   unit_type: \"kDotsPerInch\",\n// },\n// {\n//   name: \"dpcm\",\n//   unit_type: \"kDotsPerCentimeter\",\n// },\n// {\n//   name: \"dppx\",\n//   unit_type: \"kDotsPerPixel\",\n// },\n// {\n//   name: \"x\",\n//   unit_type: \"kDotsPerPixel\",\n// },\n// {\n//   name: \"vw\",\n//   unit_type: \"kViewportWidth\",\n// },\n// {\n//   name: \"vh\",\n//   unit_type: \"kViewportHeight\",\n// },\n// {\n//   name: \"vi\",\n//   unit_type: \"kViewportInlineSize\",\n// },\n// {\n//   name: \"vb\",\n//   unit_type: \"kViewportBlockSize\",\n// },\n// {\n//   name: \"vmin\",\n//   unit_type: UnitType.kViewportMin,\n// },\n// {\n//   name: \"vmax\",\n//   unit_type: UnitType.kViewportMax,\n// },\n// {\n//   name: \"svw\",\n//   unit_type: \"kSmallViewportWidth\",\n// },\n// {\n//   name: \"svh\",\n//   unit_type: \"kSmallViewportHeight\",\n// },\n// {\n//   name: \"svi\",\n//   unit_type: \"kSmallViewportInlineSize\",\n// },\n// {\n//   name: \"svb\",\n//   unit_type: \"kSmallViewportBlockSize\",\n// },\n// {\n//   name: \"svmin\",\n//   unit_type: \"kSmallViewportMin\",\n// },\n// {\n//   name: \"svmax\",\n//   unit_type: \"kSmallViewportMax\",\n// },\n// {\n//   name: \"lvw\",\n//   unit_type: \"kLargeViewportWidth\",\n// },\n// {\n//   name: \"lvh\",\n//   unit_type: \"kLargeViewportHeight\",\n// },\n// {\n//   name: \"lvi\",\n//   unit_type: \"kLargeViewportInlineSize\",\n// },\n// {\n//   name: \"lvb\",\n//   unit_type: \"kLargeViewportBlockSize\",\n// },\n// {\n//   name: \"lvmin\",\n//   unit_type: UnitType.kLargeViewportMin,\n// },\n// {\n//   name: \"lvmax\",\n//   unit_type: UnitType.kLargeViewportMax,\n// },\n// {\n//   name: \"dvw\",\n//   unit_type: UnitType.kDynamicViewportWidth,\n// },\n// {\n//   name: \"dvh\",\n//   unit_type: UnitType.kDynamicViewportHeight,\n// },\n// {\n//   name: \"dvi\",\n//   unit_type: UnitType.kDynamicViewportInlineSize,\n// },\n// {\n//   name: \"dvb\",\n//   unit_type: UnitType.kDynamicViewportBlockSize,\n// },\n// {\n//   name: \"dvmin\",\n//   unit_type: UnitType.kDynamicViewportMin,\n// },\n// {\n//   name: \"dvmax\",\n//   unit_type: UnitType.kDynamicViewportMax,\n// },\n// {\n//   name: \"cqw\",\n//   unit_type: UnitType.kContainerWidth,\n// },\n// {\n//   name: \"cqh\",\n//   unit_type: UnitType.kContainerHeight,\n// },\n// {\n//   name: \"cqi\",\n//   unit_type: UnitType.kContainerInlineSize,\n// },\n// {\n//   name: \"cqb\",\n//   unit_type: UnitType.kContainerBlockSize,\n// },\n// {\n//   name: \"cqmin\",\n//   unit_type: UnitType.kContainerMin,\n// },\n// {\n//   name: \"cqmax\",\n//   unit_type: UnitType.kContainerMax,\n// },\n{\n  name: 'rem',\n  unit_type: UnitType.kRems\n}, // {\n//   name: 'fr',\n//   unit_type: UnitType.kFraction,\n// },\n{\n  name: 'turn',\n  unit_type: UnitType.kTurns\n} // {\n//   name: 'ch',\n//   unit_type: UnitType.kChs,\n// },\n// {\n//   name: '__qem',\n//   unit_type: UnitType.kQuirkyEms,\n// },\n];\nexport var CSSStyleValueType;\n\n(function (CSSStyleValueType) {\n  CSSStyleValueType[CSSStyleValueType[\"kUnknownType\"] = 0] = \"kUnknownType\";\n  CSSStyleValueType[CSSStyleValueType[\"kUnparsedType\"] = 1] = \"kUnparsedType\";\n  CSSStyleValueType[CSSStyleValueType[\"kKeywordType\"] = 2] = \"kKeywordType\"; // Start of CSSNumericValue subclasses\n\n  CSSStyleValueType[CSSStyleValueType[\"kUnitType\"] = 3] = \"kUnitType\";\n  CSSStyleValueType[CSSStyleValueType[\"kSumType\"] = 4] = \"kSumType\";\n  CSSStyleValueType[CSSStyleValueType[\"kProductType\"] = 5] = \"kProductType\";\n  CSSStyleValueType[CSSStyleValueType[\"kNegateType\"] = 6] = \"kNegateType\";\n  CSSStyleValueType[CSSStyleValueType[\"kInvertType\"] = 7] = \"kInvertType\";\n  CSSStyleValueType[CSSStyleValueType[\"kMinType\"] = 8] = \"kMinType\";\n  CSSStyleValueType[CSSStyleValueType[\"kMaxType\"] = 9] = \"kMaxType\";\n  CSSStyleValueType[CSSStyleValueType[\"kClampType\"] = 10] = \"kClampType\"; // End of CSSNumericValue subclasses\n\n  CSSStyleValueType[CSSStyleValueType[\"kTransformType\"] = 11] = \"kTransformType\";\n  CSSStyleValueType[CSSStyleValueType[\"kPositionType\"] = 12] = \"kPositionType\";\n  CSSStyleValueType[CSSStyleValueType[\"kURLImageType\"] = 13] = \"kURLImageType\";\n  CSSStyleValueType[CSSStyleValueType[\"kColorType\"] = 14] = \"kColorType\";\n  CSSStyleValueType[CSSStyleValueType[\"kUnsupportedColorType\"] = 15] = \"kUnsupportedColorType\";\n})(CSSStyleValueType || (CSSStyleValueType = {}));\n\nfunction parseCSSStyleValue(propertyName, value) {\n  // const propertyId = cssPropertyID(propertyName);\n  // if (propertyId === CSSPropertyID.kInvalid) {\n  //   return [];\n  // }\n  // const customPropertyName = propertyId === CSSPropertyID.kVariable ? propertyName : null;\n  // return fromString(propertyId, customPropertyName, value);\n  return [];\n}\n/**\n * CSSStyleValue is the base class for all CSS values accessible from Typed OM.\n * Values that are not yet supported as specific types are also returned as base CSSStyleValues.\n *\n * Spec @see https://drafts.css-houdini.org/css-typed-om/#stylevalue-objects\n * Docs @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue\n */\n\n\nvar CSSStyleValue =\n/** @class */\nfunction () {\n  function CSSStyleValue() {}\n\n  CSSStyleValue.parse = function (propertyName, value) {\n    return parseCSSStyleValue(propertyName, value)[0];\n  };\n\n  CSSStyleValue.parseAll = function (propertyName, value) {\n    return parseCSSStyleValue(propertyName, value);\n  };\n\n  CSSStyleValue.unitFromName = function (name) {\n    if (!name) {\n      return UnitType.kUnknown;\n    }\n\n    if (name === 'number') {\n      return UnitType.kNumber;\n    }\n\n    if (name === 'percent' || name === '%') {\n      return UnitType.kPercentage;\n    }\n\n    return this.stringToUnitType(name);\n  };\n\n  CSSStyleValue.unitTypeToUnitCategory = function (type) {\n    switch (type) {\n      case UnitType.kNumber:\n      case UnitType.kInteger:\n        return UnitCategory.kUNumber;\n\n      case UnitType.kPercentage:\n        return UnitCategory.kUPercent;\n\n      case UnitType.kPixels:\n      case UnitType.kCentimeters:\n      case UnitType.kMillimeters:\n      case UnitType.kQuarterMillimeters:\n      case UnitType.kInches:\n      case UnitType.kPoints:\n      case UnitType.kPicas:\n      case UnitType.kUserUnits:\n        return UnitCategory.kULength;\n\n      case UnitType.kMilliseconds:\n      case UnitType.kSeconds:\n        return UnitCategory.kUTime;\n\n      case UnitType.kDegrees:\n      case UnitType.kRadians:\n      case UnitType.kGradians:\n      case UnitType.kTurns:\n        return UnitCategory.kUAngle;\n\n      case UnitType.kHertz:\n      case UnitType.kKilohertz:\n        return UnitCategory.kUFrequency;\n\n      case UnitType.kDotsPerPixel:\n      case UnitType.kDotsPerInch:\n      case UnitType.kDotsPerCentimeter:\n        return UnitCategory.kUResolution;\n\n      default:\n        return UnitCategory.kUOther;\n    }\n  };\n\n  CSSStyleValue.unitTypeToString = function (type) {\n    switch (type) {\n      case UnitType.kNumber:\n      case UnitType.kInteger:\n      case UnitType.kUserUnits:\n        return '';\n\n      case UnitType.kPercentage:\n        return '%';\n\n      case UnitType.kEms:\n      case UnitType.kQuirkyEms:\n        return 'em';\n      // case UnitType.kExs:\n      //   return 'ex';\n\n      case UnitType.kRems:\n        return 'rem';\n      // case UnitType.kChs:\n      //   return 'ch';\n\n      case UnitType.kPixels:\n        return 'px';\n      // case UnitType.kCentimeters:\n      //   return 'cm';\n      // case UnitType.kDotsPerPixel:\n      //   return 'dppx';\n      // case UnitType.kDotsPerInch:\n      //   return 'dpi';\n      // case UnitType.kDotsPerCentimeter:\n      //   return 'dpcm';\n      // case UnitType.kMillimeters:\n      //   return 'mm';\n      // case UnitType.kQuarterMillimeters:\n      //   return 'q';\n      // case UnitType.kInches:\n      //   return 'in';\n      // case UnitType.kPoints:\n      //   return 'pt';\n      // case UnitType.kPicas:\n      //   return 'pc';\n\n      case UnitType.kDegrees:\n        return 'deg';\n\n      case UnitType.kRadians:\n        return 'rad';\n\n      case UnitType.kGradians:\n        return 'grad';\n\n      case UnitType.kMilliseconds:\n        return 'ms';\n\n      case UnitType.kSeconds:\n        return 's';\n      // case UnitType.kHertz:\n      //   return 'hz';\n      // case UnitType.kKilohertz:\n      //   return 'khz';\n\n      case UnitType.kTurns:\n        return 'turn';\n      // case UnitType.kFraction:\n      //   return 'fr';\n      // case UnitType.kViewportWidth:\n      //   return 'vw';\n      // case UnitType.kViewportHeight:\n      //   return 'vh';\n      // case UnitType.kViewportInlineSize:\n      //   return 'vi';\n      // case UnitType.kViewportBlockSize:\n      //   return 'vb';\n      // case UnitType.kViewportMin:\n      //   return 'vmin';\n      // case UnitType.kViewportMax:\n      //   return 'vmax';\n      // case UnitType.kSmallViewportWidth:\n      //   return 'svw';\n      // case UnitType.kSmallViewportHeight:\n      //   return 'svh';\n      // case UnitType.kSmallViewportInlineSize:\n      //   return 'svi';\n      // case UnitType.kSmallViewportBlockSize:\n      //   return 'svb';\n      // case UnitType.kSmallViewportMin:\n      //   return 'svmin';\n      // case UnitType.kSmallViewportMax:\n      //   return 'svmax';\n      // case UnitType.kLargeViewportWidth:\n      //   return 'lvw';\n      // case UnitType.kLargeViewportHeight:\n      //   return 'lvh';\n      // case UnitType.kLargeViewportInlineSize:\n      //   return 'lvi';\n      // case UnitType.kLargeViewportBlockSize:\n      //   return 'lvb';\n      // case UnitType.kLargeViewportMin:\n      //   return 'lvmin';\n      // case UnitType.kLargeViewportMax:\n      //   return 'lvmax';\n      // case UnitType.kDynamicViewportWidth:\n      //   return 'dvw';\n      // case UnitType.kDynamicViewportHeight:\n      //   return 'dvh';\n      // case UnitType.kDynamicViewportInlineSize:\n      //   return 'dvi';\n      // case UnitType.kDynamicViewportBlockSize:\n      //   return 'dvb';\n      // case UnitType.kDynamicViewportMin:\n      //   return 'dvmin';\n      // case UnitType.kDynamicViewportMax:\n      //   return 'dvmax';\n      // case UnitType.kContainerWidth:\n      //   return 'cqw';\n      // case UnitType.kContainerHeight:\n      //   return 'cqh';\n      // case UnitType.kContainerInlineSize:\n      //   return 'cqi';\n      // case UnitType.kContainerBlockSize:\n      //   return 'cqb';\n      // case UnitType.kContainerMin:\n      //   return 'cqmin';\n      // case UnitType.kContainerMax:\n      //   return 'cqmax';\n\n      default:\n        break;\n    }\n\n    return '';\n  };\n\n  CSSStyleValue.stringToUnitType = function (name) {\n    return data.find(function (item) {\n      return item.name === name;\n    }).unit_type;\n  };\n\n  CSSStyleValue.canonicalUnitTypeForCategory = function (category) {\n    // The canonical unit type is chosen according to the way\n    // CSSPropertyParser.ValidUnit() chooses the default unit in each category\n    // (based on unitflags).\n    switch (category) {\n      case UnitCategory.kUNumber:\n        return UnitType.kNumber;\n\n      case UnitCategory.kULength:\n        return UnitType.kPixels;\n\n      case UnitCategory.kUPercent:\n        return UnitType.kUnknown;\n      // Cannot convert between numbers and percent.\n\n      case UnitCategory.kUTime:\n        return UnitType.kSeconds;\n\n      case UnitCategory.kUAngle:\n        return UnitType.kDegrees;\n\n      case UnitCategory.kUFrequency:\n        return UnitType.kHertz;\n\n      case UnitCategory.kUResolution:\n        return UnitType.kDotsPerPixel;\n\n      default:\n        return UnitType.kUnknown;\n    }\n  };\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/css_primitive_value.cc#353\n   */\n\n\n  CSSStyleValue.conversionToCanonicalUnitsScaleFactor = function (unit_type) {\n    var factor = 1.0; // FIXME: the switch can be replaced by an array of scale factors.\n\n    switch (unit_type) {\n      // These are \"canonical\" units in their respective categories.\n      case UnitType.kPixels:\n      case UnitType.kUserUnits:\n      case UnitType.kDegrees:\n      case UnitType.kSeconds:\n      case UnitType.kHertz:\n        break;\n\n      case UnitType.kMilliseconds:\n        factor = 0.001;\n        break;\n\n      case UnitType.kCentimeters:\n        // factor = kCssPixelsPerCentimeter;\n        break;\n\n      case UnitType.kDotsPerCentimeter:\n        // factor = 1 / kCssPixelsPerCentimeter;\n        break;\n\n      case UnitType.kMillimeters:\n        // factor = kCssPixelsPerMillimeter;\n        break;\n\n      case UnitType.kQuarterMillimeters:\n        // factor = kCssPixelsPerQuarterMillimeter;\n        break;\n\n      case UnitType.kInches:\n        // factor = kCssPixelsPerInch;\n        break;\n\n      case UnitType.kDotsPerInch:\n        // factor = 1 / kCssPixelsPerInch;\n        break;\n\n      case UnitType.kPoints:\n        // factor = kCssPixelsPerPoint;\n        break;\n\n      case UnitType.kPicas:\n        // factor = kCssPixelsPerPica;\n        break;\n\n      case UnitType.kRadians:\n        factor = 180 / Math.PI;\n        break;\n\n      case UnitType.kGradians:\n        factor = 0.9;\n        break;\n\n      case UnitType.kTurns:\n        factor = 360;\n        break;\n\n      case UnitType.kKilohertz:\n        factor = 1000;\n        break;\n\n      default:\n        break;\n    }\n\n    return factor;\n  };\n\n  CSSStyleValue.isAngle = function (unit) {\n    return unit === UnitType.kDegrees || unit === UnitType.kRadians || unit === UnitType.kGradians || unit === UnitType.kTurns;\n  };\n\n  CSSStyleValue.isViewportPercentageLength = function (type) {\n    return type >= UnitType.kViewportWidth && type <= UnitType.kDynamicViewportMax;\n  };\n\n  CSSStyleValue.isContainerPercentageLength = function (type) {\n    return type >= UnitType.kContainerWidth && type <= UnitType.kContainerMax;\n  };\n\n  CSSStyleValue.isLength = function (type) {\n    return type >= UnitType.kEms && type <= UnitType.kUserUnits || type == UnitType.kQuirkyEms;\n  };\n\n  CSSStyleValue.isRelativeUnit = function (type) {\n    return type === UnitType.kPercentage || type === UnitType.kEms || type === UnitType.kExs || type === UnitType.kRems || type === UnitType.kChs || this.isViewportPercentageLength(type) || this.isContainerPercentageLength(type);\n  };\n\n  CSSStyleValue.isTime = function (unit) {\n    return unit === UnitType.kSeconds || unit === UnitType.kMilliseconds;\n  };\n\n  CSSStyleValue.isFrequency = function (unit) {\n    return unit == UnitType.kHertz || unit == UnitType.kKilohertz;\n  };\n\n  CSSStyleValue.isResolution = function (type) {\n    return type >= UnitType.kDotsPerPixel && type <= UnitType.kDotsPerCentimeter;\n  };\n\n  CSSStyleValue.isFlex = function (unit) {\n    return unit === UnitType.kFraction;\n  }; // protected abstract toCSSValue(): CSSValue;\n\n\n  CSSStyleValue.prototype.toString = function () {\n    return this.buildCSSText(Nested.kNo, ParenLess.kNo, '');\n  };\n\n  CSSStyleValue.prototype.isNumericValue = function () {\n    return this.getType() >= CSSStyleValueType.kUnitType && this.getType() <= CSSStyleValueType.kClampType;\n  };\n\n  return CSSStyleValue;\n}();\n\nexport { CSSStyleValue };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSStyleValue.js"],"names":["Nested","ParenLess","UnitType","UnitCategory","data","name","unit_type","kEms","kPixels","kDegrees","kRadians","kGradians","kMilliseconds","kSeconds","kRems","kTurns","CSSStyleValueType","parseCSSStyleValue","propertyName","value","CSSStyleValue","parse","parseAll","unitFromName","kUnknown","kNumber","kPercentage","stringToUnitType","unitTypeToUnitCategory","type","kInteger","kUNumber","kUPercent","kCentimeters","kMillimeters","kQuarterMillimeters","kInches","kPoints","kPicas","kUserUnits","kULength","kUTime","kUAngle","kHertz","kKilohertz","kUFrequency","kDotsPerPixel","kDotsPerInch","kDotsPerCentimeter","kUResolution","kUOther","unitTypeToString","kQuirkyEms","find","item","canonicalUnitTypeForCategory","category","conversionToCanonicalUnitsScaleFactor","factor","Math","PI","isAngle","unit","isViewportPercentageLength","kViewportWidth","kDynamicViewportMax","isContainerPercentageLength","kContainerWidth","kContainerMax","isLength","isRelativeUnit","kExs","kChs","isTime","isFrequency","isResolution","isFlex","kFraction","prototype","toString","buildCSSText","kNo","isNumericValue","getType","kUnitType","kClampType"],"mappings":"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","sourcesContent":["// import type { CSSValue } from '../CSSValue';\n// import { CSSPropertyID, cssPropertyID } from '../properties/CSSPropertyNames';\n// import { fromString } from '../parser/StyleValueFactory';\nimport { Nested, ParenLess, UnitType, UnitCategory } from './types'; // This file specifies the unit strings used in CSSPrimitiveValues.\n\nvar data = [{\n  name: 'em',\n  unit_type: UnitType.kEms\n}, // {\n//   name: 'ex',\n//   unit_type: UnitType.kExs,\n// },\n{\n  name: 'px',\n  unit_type: UnitType.kPixels\n}, // {\n//   name: \"cm\",\n//   unit_type: UnitType.kCentimeters,\n// },\n// {\n//   name: \"mm\",\n//   unit_type: UnitType.kMillimeters,\n// },\n// {\n//   name: \"q\",\n//   unit_type: UnitType.kQuarterMillimeters,\n// },\n// {\n//   name: \"in\",\n//   unit_type: UnitType.kInches,\n// },\n// {\n//   name: \"pt\",\n//   unit_type: UnitType.kPoints,\n// },\n// {\n//   name: \"pc\",\n//   unit_type: UnitType.kPicas,\n// },\n{\n  name: 'deg',\n  unit_type: UnitType.kDegrees\n}, {\n  name: 'rad',\n  unit_type: UnitType.kRadians\n}, {\n  name: 'grad',\n  unit_type: UnitType.kGradians\n}, {\n  name: 'ms',\n  unit_type: UnitType.kMilliseconds\n}, {\n  name: 's',\n  unit_type: UnitType.kSeconds\n}, // {\n//   name: \"hz\",\n//   unit_type: UnitType.kHertz,\n// },\n// {\n//   name: \"khz\",\n//   unit_type: UnitType.kKilohertz,\n// },\n// {\n//   name: \"dpi\",\n//   unit_type: \"kDotsPerInch\",\n// },\n// {\n//   name: \"dpcm\",\n//   unit_type: \"kDotsPerCentimeter\",\n// },\n// {\n//   name: \"dppx\",\n//   unit_type: \"kDotsPerPixel\",\n// },\n// {\n//   name: \"x\",\n//   unit_type: \"kDotsPerPixel\",\n// },\n// {\n//   name: \"vw\",\n//   unit_type: \"kViewportWidth\",\n// },\n// {\n//   name: \"vh\",\n//   unit_type: \"kViewportHeight\",\n// },\n// {\n//   name: \"vi\",\n//   unit_type: \"kViewportInlineSize\",\n// },\n// {\n//   name: \"vb\",\n//   unit_type: \"kViewportBlockSize\",\n// },\n// {\n//   name: \"vmin\",\n//   unit_type: UnitType.kViewportMin,\n// },\n// {\n//   name: \"vmax\",\n//   unit_type: UnitType.kViewportMax,\n// },\n// {\n//   name: \"svw\",\n//   unit_type: \"kSmallViewportWidth\",\n// },\n// {\n//   name: \"svh\",\n//   unit_type: \"kSmallViewportHeight\",\n// },\n// {\n//   name: \"svi\",\n//   unit_type: \"kSmallViewportInlineSize\",\n// },\n// {\n//   name: \"svb\",\n//   unit_type: \"kSmallViewportBlockSize\",\n// },\n// {\n//   name: \"svmin\",\n//   unit_type: \"kSmallViewportMin\",\n// },\n// {\n//   name: \"svmax\",\n//   unit_type: \"kSmallViewportMax\",\n// },\n// {\n//   name: \"lvw\",\n//   unit_type: \"kLargeViewportWidth\",\n// },\n// {\n//   name: \"lvh\",\n//   unit_type: \"kLargeViewportHeight\",\n// },\n// {\n//   name: \"lvi\",\n//   unit_type: \"kLargeViewportInlineSize\",\n// },\n// {\n//   name: \"lvb\",\n//   unit_type: \"kLargeViewportBlockSize\",\n// },\n// {\n//   name: \"lvmin\",\n//   unit_type: UnitType.kLargeViewportMin,\n// },\n// {\n//   name: \"lvmax\",\n//   unit_type: UnitType.kLargeViewportMax,\n// },\n// {\n//   name: \"dvw\",\n//   unit_type: UnitType.kDynamicViewportWidth,\n// },\n// {\n//   name: \"dvh\",\n//   unit_type: UnitType.kDynamicViewportHeight,\n// },\n// {\n//   name: \"dvi\",\n//   unit_type: UnitType.kDynamicViewportInlineSize,\n// },\n// {\n//   name: \"dvb\",\n//   unit_type: UnitType.kDynamicViewportBlockSize,\n// },\n// {\n//   name: \"dvmin\",\n//   unit_type: UnitType.kDynamicViewportMin,\n// },\n// {\n//   name: \"dvmax\",\n//   unit_type: UnitType.kDynamicViewportMax,\n// },\n// {\n//   name: \"cqw\",\n//   unit_type: UnitType.kContainerWidth,\n// },\n// {\n//   name: \"cqh\",\n//   unit_type: UnitType.kContainerHeight,\n// },\n// {\n//   name: \"cqi\",\n//   unit_type: UnitType.kContainerInlineSize,\n// },\n// {\n//   name: \"cqb\",\n//   unit_type: UnitType.kContainerBlockSize,\n// },\n// {\n//   name: \"cqmin\",\n//   unit_type: UnitType.kContainerMin,\n// },\n// {\n//   name: \"cqmax\",\n//   unit_type: UnitType.kContainerMax,\n// },\n{\n  name: 'rem',\n  unit_type: UnitType.kRems\n}, // {\n//   name: 'fr',\n//   unit_type: UnitType.kFraction,\n// },\n{\n  name: 'turn',\n  unit_type: UnitType.kTurns\n} // {\n//   name: 'ch',\n//   unit_type: UnitType.kChs,\n// },\n// {\n//   name: '__qem',\n//   unit_type: UnitType.kQuirkyEms,\n// },\n];\nexport var CSSStyleValueType;\n\n(function (CSSStyleValueType) {\n  CSSStyleValueType[CSSStyleValueType[\"kUnknownType\"] = 0] = \"kUnknownType\";\n  CSSStyleValueType[CSSStyleValueType[\"kUnparsedType\"] = 1] = \"kUnparsedType\";\n  CSSStyleValueType[CSSStyleValueType[\"kKeywordType\"] = 2] = \"kKeywordType\"; // Start of CSSNumericValue subclasses\n\n  CSSStyleValueType[CSSStyleValueType[\"kUnitType\"] = 3] = \"kUnitType\";\n  CSSStyleValueType[CSSStyleValueType[\"kSumType\"] = 4] = \"kSumType\";\n  CSSStyleValueType[CSSStyleValueType[\"kProductType\"] = 5] = \"kProductType\";\n  CSSStyleValueType[CSSStyleValueType[\"kNegateType\"] = 6] = \"kNegateType\";\n  CSSStyleValueType[CSSStyleValueType[\"kInvertType\"] = 7] = \"kInvertType\";\n  CSSStyleValueType[CSSStyleValueType[\"kMinType\"] = 8] = \"kMinType\";\n  CSSStyleValueType[CSSStyleValueType[\"kMaxType\"] = 9] = \"kMaxType\";\n  CSSStyleValueType[CSSStyleValueType[\"kClampType\"] = 10] = \"kClampType\"; // End of CSSNumericValue subclasses\n\n  CSSStyleValueType[CSSStyleValueType[\"kTransformType\"] = 11] = \"kTransformType\";\n  CSSStyleValueType[CSSStyleValueType[\"kPositionType\"] = 12] = \"kPositionType\";\n  CSSStyleValueType[CSSStyleValueType[\"kURLImageType\"] = 13] = \"kURLImageType\";\n  CSSStyleValueType[CSSStyleValueType[\"kColorType\"] = 14] = \"kColorType\";\n  CSSStyleValueType[CSSStyleValueType[\"kUnsupportedColorType\"] = 15] = \"kUnsupportedColorType\";\n})(CSSStyleValueType || (CSSStyleValueType = {}));\n\nfunction parseCSSStyleValue(propertyName, value) {\n  // const propertyId = cssPropertyID(propertyName);\n  // if (propertyId === CSSPropertyID.kInvalid) {\n  //   return [];\n  // }\n  // const customPropertyName = propertyId === CSSPropertyID.kVariable ? propertyName : null;\n  // return fromString(propertyId, customPropertyName, value);\n  return [];\n}\n/**\n * CSSStyleValue is the base class for all CSS values accessible from Typed OM.\n * Values that are not yet supported as specific types are also returned as base CSSStyleValues.\n *\n * Spec @see https://drafts.css-houdini.org/css-typed-om/#stylevalue-objects\n * Docs @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue\n */\n\n\nvar CSSStyleValue =\n/** @class */\nfunction () {\n  function CSSStyleValue() {}\n\n  CSSStyleValue.parse = function (propertyName, value) {\n    return parseCSSStyleValue(propertyName, value)[0];\n  };\n\n  CSSStyleValue.parseAll = function (propertyName, value) {\n    return parseCSSStyleValue(propertyName, value);\n  };\n\n  CSSStyleValue.unitFromName = function (name) {\n    if (!name) {\n      return UnitType.kUnknown;\n    }\n\n    if (name === 'number') {\n      return UnitType.kNumber;\n    }\n\n    if (name === 'percent' || name === '%') {\n      return UnitType.kPercentage;\n    }\n\n    return this.stringToUnitType(name);\n  };\n\n  CSSStyleValue.unitTypeToUnitCategory = function (type) {\n    switch (type) {\n      case UnitType.kNumber:\n      case UnitType.kInteger:\n        return UnitCategory.kUNumber;\n\n      case UnitType.kPercentage:\n        return UnitCategory.kUPercent;\n\n      case UnitType.kPixels:\n      case UnitType.kCentimeters:\n      case UnitType.kMillimeters:\n      case UnitType.kQuarterMillimeters:\n      case UnitType.kInches:\n      case UnitType.kPoints:\n      case UnitType.kPicas:\n      case UnitType.kUserUnits:\n        return UnitCategory.kULength;\n\n      case UnitType.kMilliseconds:\n      case UnitType.kSeconds:\n        return UnitCategory.kUTime;\n\n      case UnitType.kDegrees:\n      case UnitType.kRadians:\n      case UnitType.kGradians:\n      case UnitType.kTurns:\n        return UnitCategory.kUAngle;\n\n      case UnitType.kHertz:\n      case UnitType.kKilohertz:\n        return UnitCategory.kUFrequency;\n\n      case UnitType.kDotsPerPixel:\n      case UnitType.kDotsPerInch:\n      case UnitType.kDotsPerCentimeter:\n        return UnitCategory.kUResolution;\n\n      default:\n        return UnitCategory.kUOther;\n    }\n  };\n\n  CSSStyleValue.unitTypeToString = function (type) {\n    switch (type) {\n      case UnitType.kNumber:\n      case UnitType.kInteger:\n      case UnitType.kUserUnits:\n        return '';\n\n      case UnitType.kPercentage:\n        return '%';\n\n      case UnitType.kEms:\n      case UnitType.kQuirkyEms:\n        return 'em';\n      // case UnitType.kExs:\n      //   return 'ex';\n\n      case UnitType.kRems:\n        return 'rem';\n      // case UnitType.kChs:\n      //   return 'ch';\n\n      case UnitType.kPixels:\n        return 'px';\n      // case UnitType.kCentimeters:\n      //   return 'cm';\n      // case UnitType.kDotsPerPixel:\n      //   return 'dppx';\n      // case UnitType.kDotsPerInch:\n      //   return 'dpi';\n      // case UnitType.kDotsPerCentimeter:\n      //   return 'dpcm';\n      // case UnitType.kMillimeters:\n      //   return 'mm';\n      // case UnitType.kQuarterMillimeters:\n      //   return 'q';\n      // case UnitType.kInches:\n      //   return 'in';\n      // case UnitType.kPoints:\n      //   return 'pt';\n      // case UnitType.kPicas:\n      //   return 'pc';\n\n      case UnitType.kDegrees:\n        return 'deg';\n\n      case UnitType.kRadians:\n        return 'rad';\n\n      case UnitType.kGradians:\n        return 'grad';\n\n      case UnitType.kMilliseconds:\n        return 'ms';\n\n      case UnitType.kSeconds:\n        return 's';\n      // case UnitType.kHertz:\n      //   return 'hz';\n      // case UnitType.kKilohertz:\n      //   return 'khz';\n\n      case UnitType.kTurns:\n        return 'turn';\n      // case UnitType.kFraction:\n      //   return 'fr';\n      // case UnitType.kViewportWidth:\n      //   return 'vw';\n      // case UnitType.kViewportHeight:\n      //   return 'vh';\n      // case UnitType.kViewportInlineSize:\n      //   return 'vi';\n      // case UnitType.kViewportBlockSize:\n      //   return 'vb';\n      // case UnitType.kViewportMin:\n      //   return 'vmin';\n      // case UnitType.kViewportMax:\n      //   return 'vmax';\n      // case UnitType.kSmallViewportWidth:\n      //   return 'svw';\n      // case UnitType.kSmallViewportHeight:\n      //   return 'svh';\n      // case UnitType.kSmallViewportInlineSize:\n      //   return 'svi';\n      // case UnitType.kSmallViewportBlockSize:\n      //   return 'svb';\n      // case UnitType.kSmallViewportMin:\n      //   return 'svmin';\n      // case UnitType.kSmallViewportMax:\n      //   return 'svmax';\n      // case UnitType.kLargeViewportWidth:\n      //   return 'lvw';\n      // case UnitType.kLargeViewportHeight:\n      //   return 'lvh';\n      // case UnitType.kLargeViewportInlineSize:\n      //   return 'lvi';\n      // case UnitType.kLargeViewportBlockSize:\n      //   return 'lvb';\n      // case UnitType.kLargeViewportMin:\n      //   return 'lvmin';\n      // case UnitType.kLargeViewportMax:\n      //   return 'lvmax';\n      // case UnitType.kDynamicViewportWidth:\n      //   return 'dvw';\n      // case UnitType.kDynamicViewportHeight:\n      //   return 'dvh';\n      // case UnitType.kDynamicViewportInlineSize:\n      //   return 'dvi';\n      // case UnitType.kDynamicViewportBlockSize:\n      //   return 'dvb';\n      // case UnitType.kDynamicViewportMin:\n      //   return 'dvmin';\n      // case UnitType.kDynamicViewportMax:\n      //   return 'dvmax';\n      // case UnitType.kContainerWidth:\n      //   return 'cqw';\n      // case UnitType.kContainerHeight:\n      //   return 'cqh';\n      // case UnitType.kContainerInlineSize:\n      //   return 'cqi';\n      // case UnitType.kContainerBlockSize:\n      //   return 'cqb';\n      // case UnitType.kContainerMin:\n      //   return 'cqmin';\n      // case UnitType.kContainerMax:\n      //   return 'cqmax';\n\n      default:\n        break;\n    }\n\n    return '';\n  };\n\n  CSSStyleValue.stringToUnitType = function (name) {\n    return data.find(function (item) {\n      return item.name === name;\n    }).unit_type;\n  };\n\n  CSSStyleValue.canonicalUnitTypeForCategory = function (category) {\n    // The canonical unit type is chosen according to the way\n    // CSSPropertyParser.ValidUnit() chooses the default unit in each category\n    // (based on unitflags).\n    switch (category) {\n      case UnitCategory.kUNumber:\n        return UnitType.kNumber;\n\n      case UnitCategory.kULength:\n        return UnitType.kPixels;\n\n      case UnitCategory.kUPercent:\n        return UnitType.kUnknown;\n      // Cannot convert between numbers and percent.\n\n      case UnitCategory.kUTime:\n        return UnitType.kSeconds;\n\n      case UnitCategory.kUAngle:\n        return UnitType.kDegrees;\n\n      case UnitCategory.kUFrequency:\n        return UnitType.kHertz;\n\n      case UnitCategory.kUResolution:\n        return UnitType.kDotsPerPixel;\n\n      default:\n        return UnitType.kUnknown;\n    }\n  };\n  /**\n   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/css_primitive_value.cc#353\n   */\n\n\n  CSSStyleValue.conversionToCanonicalUnitsScaleFactor = function (unit_type) {\n    var factor = 1.0; // FIXME: the switch can be replaced by an array of scale factors.\n\n    switch (unit_type) {\n      // These are \"canonical\" units in their respective categories.\n      case UnitType.kPixels:\n      case UnitType.kUserUnits:\n      case UnitType.kDegrees:\n      case UnitType.kSeconds:\n      case UnitType.kHertz:\n        break;\n\n      case UnitType.kMilliseconds:\n        factor = 0.001;\n        break;\n\n      case UnitType.kCentimeters:\n        // factor = kCssPixelsPerCentimeter;\n        break;\n\n      case UnitType.kDotsPerCentimeter:\n        // factor = 1 / kCssPixelsPerCentimeter;\n        break;\n\n      case UnitType.kMillimeters:\n        // factor = kCssPixelsPerMillimeter;\n        break;\n\n      case UnitType.kQuarterMillimeters:\n        // factor = kCssPixelsPerQuarterMillimeter;\n        break;\n\n      case UnitType.kInches:\n        // factor = kCssPixelsPerInch;\n        break;\n\n      case UnitType.kDotsPerInch:\n        // factor = 1 / kCssPixelsPerInch;\n        break;\n\n      case UnitType.kPoints:\n        // factor = kCssPixelsPerPoint;\n        break;\n\n      case UnitType.kPicas:\n        // factor = kCssPixelsPerPica;\n        break;\n\n      case UnitType.kRadians:\n        factor = 180 / Math.PI;\n        break;\n\n      case UnitType.kGradians:\n        factor = 0.9;\n        break;\n\n      case UnitType.kTurns:\n        factor = 360;\n        break;\n\n      case UnitType.kKilohertz:\n        factor = 1000;\n        break;\n\n      default:\n        break;\n    }\n\n    return factor;\n  };\n\n  CSSStyleValue.isAngle = function (unit) {\n    return unit === UnitType.kDegrees || unit === UnitType.kRadians || unit === UnitType.kGradians || unit === UnitType.kTurns;\n  };\n\n  CSSStyleValue.isViewportPercentageLength = function (type) {\n    return type >= UnitType.kViewportWidth && type <= UnitType.kDynamicViewportMax;\n  };\n\n  CSSStyleValue.isContainerPercentageLength = function (type) {\n    return type >= UnitType.kContainerWidth && type <= UnitType.kContainerMax;\n  };\n\n  CSSStyleValue.isLength = function (type) {\n    return type >= UnitType.kEms && type <= UnitType.kUserUnits || type == UnitType.kQuirkyEms;\n  };\n\n  CSSStyleValue.isRelativeUnit = function (type) {\n    return type === UnitType.kPercentage || type === UnitType.kEms || type === UnitType.kExs || type === UnitType.kRems || type === UnitType.kChs || this.isViewportPercentageLength(type) || this.isContainerPercentageLength(type);\n  };\n\n  CSSStyleValue.isTime = function (unit) {\n    return unit === UnitType.kSeconds || unit === UnitType.kMilliseconds;\n  };\n\n  CSSStyleValue.isFrequency = function (unit) {\n    return unit == UnitType.kHertz || unit == UnitType.kKilohertz;\n  };\n\n  CSSStyleValue.isResolution = function (type) {\n    return type >= UnitType.kDotsPerPixel && type <= UnitType.kDotsPerCentimeter;\n  };\n\n  CSSStyleValue.isFlex = function (unit) {\n    return unit === UnitType.kFraction;\n  }; // protected abstract toCSSValue(): CSSValue;\n\n\n  CSSStyleValue.prototype.toString = function () {\n    return this.buildCSSText(Nested.kNo, ParenLess.kNo, '');\n  };\n\n  CSSStyleValue.prototype.isNumericValue = function () {\n    return this.getType() >= CSSStyleValueType.kUnitType && this.getType() <= CSSStyleValueType.kClampType;\n  };\n\n  return CSSStyleValue;\n}();\n\nexport { CSSStyleValue };"]},"metadata":{},"sourceType":"module"}