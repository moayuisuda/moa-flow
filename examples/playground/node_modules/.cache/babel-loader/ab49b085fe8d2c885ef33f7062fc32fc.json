{"ast":null,"code":"export function generatePath(context, parsedStyle) {\n  var _a = parsedStyle.defX,\n      x = _a === void 0 ? 0 : _a,\n      _b = parsedStyle.defY,\n      y = _b === void 0 ? 0 : _b;\n  var _c = parsedStyle.path,\n      curve = _c.curve,\n      zCommandIndexes = _c.zCommandIndexes;\n  var path = curve;\n  zCommandIndexes.forEach(function (zIndex, index) {\n    path.splice(zIndex + index, 0, ['Z']);\n  }); // let currentPoint: [number, number] = [-x, -y]; // 当前图形\n  // let startMovePoint: [number, number] = [-x, -y]; // 开始 M 的点，可能会有多个\n\n  for (var i = 0; i < path.length; i++) {\n    var params = path[i]; // eg. M 100 200\n\n    var command = params[0]; // V,H,S,T 都在前面被转换成标准形式\n\n    switch (command) {\n      case 'M':\n        context.moveTo(params[1] - x, params[2] - y); // startMovePoint = [params[1]! - x, params[2]! - y];\n\n        break;\n      // case 'L':\n      //   context.lineTo(params[1]! - x, params[2]! - y);\n      //   break;\n      // case 'Q':\n      //   context.quadraticCurveTo(params[1]! - x, params[2]! - y, params[3]! - x, params[4]! - y);\n      //   break;\n\n      case 'C':\n        context.bezierCurveTo(params[1] - x, params[2] - y, params[3] - x, params[4] - y, params[5] - x, params[6] - y);\n        break;\n      // case 'A': {\n      //   let arcParams: ArcParams;\n      //   // 为了加速绘制，可以提供参数的缓存，各个图形自己缓存\n      //   if (arcParamsCache) {\n      //     arcParams = arcParamsCache[i];\n      //     if (!arcParams) {\n      //       arcParams = getArcParams(currentPoint, params, x, y);\n      //       arcParamsCache[i] = arcParams;\n      //     }\n      //   } else {\n      //     arcParams = getArcParams(currentPoint, params, x, y);\n      //   }\n      //   const { cx, cy, rx, ry, startAngle, endAngle, xRotation, sweepFlag } = arcParams;\n      //   // 直接使用椭圆的 api\n      //   if (context.ellipse) {\n      //     context.ellipse(cx, cy, rx, ry, xRotation, startAngle, endAngle, !!(1 - sweepFlag));\n      //   } else {\n      //     // 如果不支持，则使用圆来绘制，进行变形\n      //     const r = rx > ry ? rx : ry;\n      //     const scaleX = rx > ry ? 1 : rx / ry;\n      //     const scaleY = rx > ry ? ry / rx : 1;\n      //     context.translate(cx, cy);\n      //     context.rotate(xRotation);\n      //     context.scale(scaleX, scaleY);\n      //     context.arc(0, 0, r, startAngle, endAngle, !!(1 - sweepFlag));\n      //     context.scale(1 / scaleX, 1 / scaleY);\n      //     context.rotate(-xRotation);\n      //     context.translate(-cx, -cy);\n      //   }\n      //   break;\n      // }\n\n      case 'Z':\n        context.closePath();\n        break;\n\n      default:\n        break;\n    } // 有了 Z 后，当前节点从开始 M 的点开始\n    // if (command === 'Z') {\n    //   currentPoint = startMovePoint;\n    // } else {\n    //   const len = params.length;\n    //   currentPoint = [(params[len - 2] as number) - x, (params[len - 1] as number) - y];\n    // }\n\n  }\n}","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g-plugin-canvas-renderer/es/shapes/paths/Path.js"],"names":["generatePath","context","parsedStyle","_a","defX","x","_b","defY","y","_c","path","curve","zCommandIndexes","forEach","zIndex","index","splice","i","length","params","command","moveTo","bezierCurveTo","closePath"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,OAAtB,EAA+BC,WAA/B,EAA4C;AACjD,MAAIC,EAAE,GAAGD,WAAW,CAACE,IAArB;AAAA,MACIC,CAAC,GAAGF,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,EAD5B;AAAA,MAEIG,EAAE,GAAGJ,WAAW,CAACK,IAFrB;AAAA,MAGIC,CAAC,GAAGF,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,EAH5B;AAIA,MAAIG,EAAE,GAAGP,WAAW,CAACQ,IAArB;AAAA,MACIC,KAAK,GAAGF,EAAE,CAACE,KADf;AAAA,MAEIC,eAAe,GAAGH,EAAE,CAACG,eAFzB;AAGA,MAAIF,IAAI,GAAGC,KAAX;AACAC,EAAAA,eAAe,CAACC,OAAhB,CAAwB,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAC/CL,IAAAA,IAAI,CAACM,MAAL,CAAYF,MAAM,GAAGC,KAArB,EAA4B,CAA5B,EAA+B,CAAC,GAAD,CAA/B;AACD,GAFD,EATiD,CAW7C;AACJ;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,MAAM,GAAGT,IAAI,CAACO,CAAD,CAAjB,CADoC,CACd;;AAEtB,QAAIG,OAAO,GAAGD,MAAM,CAAC,CAAD,CAApB,CAHoC,CAGX;;AAEzB,YAAQC,OAAR;AACE,WAAK,GAAL;AACEnB,QAAAA,OAAO,CAACoB,MAAR,CAAeF,MAAM,CAAC,CAAD,CAAN,GAAYd,CAA3B,EAA8Bc,MAAM,CAAC,CAAD,CAAN,GAAYX,CAA1C,EADF,CACgD;;AAE9C;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAK,GAAL;AACEP,QAAAA,OAAO,CAACqB,aAAR,CAAsBH,MAAM,CAAC,CAAD,CAAN,GAAYd,CAAlC,EAAqCc,MAAM,CAAC,CAAD,CAAN,GAAYX,CAAjD,EAAoDW,MAAM,CAAC,CAAD,CAAN,GAAYd,CAAhE,EAAmEc,MAAM,CAAC,CAAD,CAAN,GAAYX,CAA/E,EAAkFW,MAAM,CAAC,CAAD,CAAN,GAAYd,CAA9F,EAAiGc,MAAM,CAAC,CAAD,CAAN,GAAYX,CAA7G;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAK,GAAL;AACEP,QAAAA,OAAO,CAACsB,SAAR;AACA;;AAEF;AACE;AApDJ,KALoC,CA0DlC;AACF;AACA;AACA;AACA;AACA;AACA;;AAED;AACF","sourcesContent":["export function generatePath(context, parsedStyle) {\n  var _a = parsedStyle.defX,\n      x = _a === void 0 ? 0 : _a,\n      _b = parsedStyle.defY,\n      y = _b === void 0 ? 0 : _b;\n  var _c = parsedStyle.path,\n      curve = _c.curve,\n      zCommandIndexes = _c.zCommandIndexes;\n  var path = curve;\n  zCommandIndexes.forEach(function (zIndex, index) {\n    path.splice(zIndex + index, 0, ['Z']);\n  }); // let currentPoint: [number, number] = [-x, -y]; // 当前图形\n  // let startMovePoint: [number, number] = [-x, -y]; // 开始 M 的点，可能会有多个\n\n  for (var i = 0; i < path.length; i++) {\n    var params = path[i]; // eg. M 100 200\n\n    var command = params[0]; // V,H,S,T 都在前面被转换成标准形式\n\n    switch (command) {\n      case 'M':\n        context.moveTo(params[1] - x, params[2] - y); // startMovePoint = [params[1]! - x, params[2]! - y];\n\n        break;\n      // case 'L':\n      //   context.lineTo(params[1]! - x, params[2]! - y);\n      //   break;\n      // case 'Q':\n      //   context.quadraticCurveTo(params[1]! - x, params[2]! - y, params[3]! - x, params[4]! - y);\n      //   break;\n\n      case 'C':\n        context.bezierCurveTo(params[1] - x, params[2] - y, params[3] - x, params[4] - y, params[5] - x, params[6] - y);\n        break;\n      // case 'A': {\n      //   let arcParams: ArcParams;\n      //   // 为了加速绘制，可以提供参数的缓存，各个图形自己缓存\n      //   if (arcParamsCache) {\n      //     arcParams = arcParamsCache[i];\n      //     if (!arcParams) {\n      //       arcParams = getArcParams(currentPoint, params, x, y);\n      //       arcParamsCache[i] = arcParams;\n      //     }\n      //   } else {\n      //     arcParams = getArcParams(currentPoint, params, x, y);\n      //   }\n      //   const { cx, cy, rx, ry, startAngle, endAngle, xRotation, sweepFlag } = arcParams;\n      //   // 直接使用椭圆的 api\n      //   if (context.ellipse) {\n      //     context.ellipse(cx, cy, rx, ry, xRotation, startAngle, endAngle, !!(1 - sweepFlag));\n      //   } else {\n      //     // 如果不支持，则使用圆来绘制，进行变形\n      //     const r = rx > ry ? rx : ry;\n      //     const scaleX = rx > ry ? 1 : rx / ry;\n      //     const scaleY = rx > ry ? ry / rx : 1;\n      //     context.translate(cx, cy);\n      //     context.rotate(xRotation);\n      //     context.scale(scaleX, scaleY);\n      //     context.arc(0, 0, r, startAngle, endAngle, !!(1 - sweepFlag));\n      //     context.scale(1 / scaleX, 1 / scaleY);\n      //     context.rotate(-xRotation);\n      //     context.translate(-cx, -cy);\n      //   }\n      //   break;\n      // }\n\n      case 'Z':\n        context.closePath();\n        break;\n\n      default:\n        break;\n    } // 有了 Z 后，当前节点从开始 M 的点开始\n    // if (command === 'Z') {\n    //   currentPoint = startMovePoint;\n    // } else {\n    //   const len = params.length;\n    //   currentPoint = [(params[len - 2] as number) - x, (params[len - 1] as number) - y];\n    // }\n\n  }\n}"]},"metadata":{},"sourceType":"module"}