{"ast":null,"code":"var isBetween = function (value, min, max) {\n  return value >= min && value <= max;\n};\n\nexport default function getLineIntersect(p0, p1, p2, p3) {\n  var tolerance = 0.001;\n  var E = {\n    x: p2.x - p0.x,\n    y: p2.y - p0.y\n  };\n  var D0 = {\n    x: p1.x - p0.x,\n    y: p1.y - p0.y\n  };\n  var D1 = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y\n  };\n  var kross = D0.x * D1.y - D0.y * D1.x;\n  var sqrKross = kross * kross;\n  var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n  var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n  var point = null;\n\n  if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n    var s = (E.x * D1.y - E.y * D1.x) / kross;\n    var t = (E.x * D0.y - E.y * D0.x) / kross;\n\n    if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n      point = {\n        x: p0.x + s * D0.x,\n        y: p0.y + s * D0.y\n      };\n    }\n  }\n\n  return point;\n}\n;","map":{"version":3,"mappings":"AAaA,IAAMA,SAAS,GAAG,UAACC,KAAD,EAAgBC,GAAhB,EAA6BC,GAA7B,EAAwC;AAAK,cAAK,IAAID,GAAT,IAAgBD,KAAK,IAAIE,GAAzB;AAA4B,CAA3F;;AAGA,eAAc,SAAUC,gBAAV,CAA2BC,EAA3B,EAAsCC,EAAtC,EAAiDC,EAAjD,EAA4DC,EAA5D,EAAqE;AACjF,MAAMC,SAAS,GAAG,KAAlB;AACA,MAAMC,CAAC,GAAU;AACfC,KAAC,EAAEJ,EAAE,CAACI,CAAH,GAAON,EAAE,CAACM,CADE;AAEfC,KAAC,EAAEL,EAAE,CAACK,CAAH,GAAOP,EAAE,CAACO;AAFE,GAAjB;AAIA,MAAMC,EAAE,GAAU;AAChBF,KAAC,EAAEL,EAAE,CAACK,CAAH,GAAON,EAAE,CAACM,CADG;AAEhBC,KAAC,EAAEN,EAAE,CAACM,CAAH,GAAOP,EAAE,CAACO;AAFG,GAAlB;AAIA,MAAME,EAAE,GAAU;AAChBH,KAAC,EAAEH,EAAE,CAACG,CAAH,GAAOJ,EAAE,CAACI,CADG;AAEhBC,KAAC,EAAEJ,EAAE,CAACI,CAAH,GAAOL,EAAE,CAACK;AAFG,GAAlB;AAIA,MAAMG,KAAK,GAAWF,EAAE,CAACF,CAAH,GAAOG,EAAE,CAACF,CAAV,GAAcC,EAAE,CAACD,CAAH,GAAOE,EAAE,CAACH,CAA9C;AACA,MAAMK,QAAQ,GAAWD,KAAK,GAAGA,KAAjC;AACA,MAAME,OAAO,GAAWJ,EAAE,CAACF,CAAH,GAAOE,EAAE,CAACF,CAAV,GAAcE,EAAE,CAACD,CAAH,GAAOC,EAAE,CAACD,CAAhD;AACA,MAAMM,OAAO,GAAWJ,EAAE,CAACH,CAAH,GAAOG,EAAE,CAACH,CAAV,GAAcG,EAAE,CAACF,CAAH,GAAOE,EAAE,CAACF,CAAhD;AACA,MAAIO,KAAK,GAAiB,IAA1B;;AACA,MAAIH,QAAQ,GAAGP,SAAS,GAAGQ,OAAZ,GAAsBC,OAArC,EAA8C;AAC5C,QAAME,CAAC,GAAG,CAACV,CAAC,CAACC,CAAF,GAAMG,EAAE,CAACF,CAAT,GAAaF,CAAC,CAACE,CAAF,GAAME,EAAE,CAACH,CAAvB,IAA4BI,KAAtC;AACA,QAAMM,CAAC,GAAG,CAACX,CAAC,CAACC,CAAF,GAAME,EAAE,CAACD,CAAT,GAAaF,CAAC,CAACE,CAAF,GAAMC,EAAE,CAACF,CAAvB,IAA4BI,KAAtC;;AACA,QAAIf,SAAS,CAACoB,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT,IAAsBpB,SAAS,CAACqB,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnC,EAA8C;AAC5CF,WAAK,GAAG;AACNR,SAAC,EAAEN,EAAE,CAACM,CAAH,GAAOS,CAAC,GAAGP,EAAE,CAACF,CADX;AAENC,SAAC,EAAEP,EAAE,CAACO,CAAH,GAAOQ,CAAC,GAAGP,EAAE,CAACD;AAFX,OAAR;AAID;AACF;;AACD,SAAOO,KAAP;AACD;AAAA","names":["isBetween","value","min","max","getLineIntersect","p0","p1","p2","p3","tolerance","E","x","y","D0","D1","kross","sqrKross","sqrLen0","sqrLen1","point","s","t"],"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/path-util/src/get-line-intersect.ts"],"sourcesContent":["type Point = {\n  /**\n   * x 值\n   * @type {number}\n   */\n  x: number;\n  /**\n   * y 值\n   * @type {number}\n   */\n  y: number;\n};\n\nconst isBetween = (value: number, min: number, max: number) => value >= min && value <= max;\n\n\nexport default function getLineIntersect(p0: Point, p1: Point, p2: Point, p3: Point): Point | null {\n  const tolerance = 0.001;\n  const E: Point = {\n    x: p2.x - p0.x,\n    y: p2.y - p0.y,\n  };\n  const D0: Point = {\n    x: p1.x - p0.x,\n    y: p1.y - p0.y,\n  };\n  const D1: Point = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y,\n  };\n  const kross: number = D0.x * D1.y - D0.y * D1.x;\n  const sqrKross: number = kross * kross;\n  const sqrLen0: number = D0.x * D0.x + D0.y * D0.y;\n  const sqrLen1: number = D1.x * D1.x + D1.y * D1.y;\n  let point: Point | null = null;\n  if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n    const s = (E.x * D1.y - E.y * D1.x) / kross;\n    const t = (E.x * D0.y - E.y * D0.x) / kross;\n    if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n      point = {\n        x: p0.x + s * D0.x,\n        y: p0.y + s * D0.y,\n      };\n    }\n  }\n  return point;\n};"]},"metadata":{},"sourceType":"module"}