{"ast":null,"code":"import apply from './_apply.js';\nimport createCtor from './_createCtor.js';\nimport createHybrid from './_createHybrid.js';\nimport createRecurry from './_createRecurry.js';\nimport getHolder from './_getHolder.js';\nimport replaceHolders from './_replaceHolders.js';\nimport root from './_root.js';\n/**\n * Creates a function that wraps `func` to enable currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {number} arity The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\n\nfunction createCurry(func, bitmask, arity) {\n  var Ctor = createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length,\n        placeholder = getHolder(wrapper);\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n\n    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);\n    length -= holders.length;\n\n    if (length < arity) {\n      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);\n    }\n\n    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n    return apply(fn, this, args);\n  }\n\n  return wrapper;\n}\n\nexport default createCurry;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/lodash-es/_createCurry.js"],"names":["apply","createCtor","createHybrid","createRecurry","getHolder","replaceHolders","root","createCurry","func","bitmask","arity","Ctor","wrapper","length","arguments","args","Array","index","placeholder","holders","undefined","fn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,KAApC,EAA2C;AACzC,MAAIC,IAAI,GAAGV,UAAU,CAACO,IAAD,CAArB;;AAEA,WAASI,OAAT,GAAmB;AACjB,QAAIC,MAAM,GAAGC,SAAS,CAACD,MAAvB;AAAA,QACIE,IAAI,GAAGC,KAAK,CAACH,MAAD,CADhB;AAAA,QAEII,KAAK,GAAGJ,MAFZ;AAAA,QAGIK,WAAW,GAAGd,SAAS,CAACQ,OAAD,CAH3B;;AAKA,WAAOK,KAAK,EAAZ,EAAgB;AACdF,MAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcH,SAAS,CAACG,KAAD,CAAvB;AACD;;AACD,QAAIE,OAAO,GAAIN,MAAM,GAAG,CAAT,IAAcE,IAAI,CAAC,CAAD,CAAJ,KAAYG,WAA1B,IAAyCH,IAAI,CAACF,MAAM,GAAG,CAAV,CAAJ,KAAqBK,WAA/D,GACV,EADU,GAEVb,cAAc,CAACU,IAAD,EAAOG,WAAP,CAFlB;AAIAL,IAAAA,MAAM,IAAIM,OAAO,CAACN,MAAlB;;AACA,QAAIA,MAAM,GAAGH,KAAb,EAAoB;AAClB,aAAOP,aAAa,CAClBK,IADkB,EACZC,OADY,EACHP,YADG,EACWU,OAAO,CAACM,WADnB,EACgCE,SADhC,EAElBL,IAFkB,EAEZI,OAFY,EAEHC,SAFG,EAEQA,SAFR,EAEmBV,KAAK,GAAGG,MAF3B,CAApB;AAGD;;AACD,QAAIQ,EAAE,GAAI,QAAQ,SAASf,IAAjB,IAAyB,gBAAgBM,OAA1C,GAAqDD,IAArD,GAA4DH,IAArE;AACA,WAAOR,KAAK,CAACqB,EAAD,EAAK,IAAL,EAAWN,IAAX,CAAZ;AACD;;AACD,SAAOH,OAAP;AACD;;AAED,eAAeL,WAAf","sourcesContent":["import apply from './_apply.js';\nimport createCtor from './_createCtor.js';\nimport createHybrid from './_createHybrid.js';\nimport createRecurry from './_createRecurry.js';\nimport getHolder from './_getHolder.js';\nimport replaceHolders from './_replaceHolders.js';\nimport root from './_root.js';\n\n/**\n * Creates a function that wraps `func` to enable currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {number} arity The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCurry(func, bitmask, arity) {\n  var Ctor = createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length,\n        placeholder = getHolder(wrapper);\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n      ? []\n      : replaceHolders(args, placeholder);\n\n    length -= holders.length;\n    if (length < arity) {\n      return createRecurry(\n        func, bitmask, createHybrid, wrapper.placeholder, undefined,\n        args, holders, undefined, undefined, arity - length);\n    }\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return apply(fn, this, args);\n  }\n  return wrapper;\n}\n\nexport default createCurry;\n"]},"metadata":{},"sourceType":"module"}