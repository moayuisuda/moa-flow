{"ast":null,"code":"import { vec3 } from 'gl-matrix';\nvar tmpVecA = vec3.create();\n\nvar BoundingSphere =\n/** @class */\nfunction () {\n  function BoundingSphere(center, radius) {\n    this.center = center || vec3.create();\n    this.radius = radius || 0.5;\n  }\n\n  BoundingSphere.prototype.containsPoint = function (point) {\n    vec3.sub(tmpVecA, point, this.center);\n    return vec3.length(tmpVecA) < this.radius * this.radius;\n  };\n\n  BoundingSphere.prototype.intersects = function (sphere) {\n    vec3.sub(tmpVecA, sphere.center, this.center);\n    var totalRadius = sphere.radius + this.radius;\n\n    if (vec3.length(tmpVecA) <= totalRadius * totalRadius) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return BoundingSphere;\n}();\n\nexport { BoundingSphere };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/shapes/BoundingSphere.js"],"names":["vec3","tmpVecA","create","BoundingSphere","center","radius","prototype","containsPoint","point","sub","length","intersects","sphere","totalRadius"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,IAAIC,OAAO,GAAGD,IAAI,CAACE,MAAL,EAAd;;AAEA,IAAIC,cAAc;AAClB;AACA,YAAY;AACV,WAASA,cAAT,CAAwBC,MAAxB,EAAgCC,MAAhC,EAAwC;AACtC,SAAKD,MAAL,GAAcA,MAAM,IAAIJ,IAAI,CAACE,MAAL,EAAxB;AACA,SAAKG,MAAL,GAAcA,MAAM,IAAI,GAAxB;AACD;;AAEDF,EAAAA,cAAc,CAACG,SAAf,CAAyBC,aAAzB,GAAyC,UAAUC,KAAV,EAAiB;AACxDR,IAAAA,IAAI,CAACS,GAAL,CAASR,OAAT,EAAkBO,KAAlB,EAAyB,KAAKJ,MAA9B;AACA,WAAOJ,IAAI,CAACU,MAAL,CAAYT,OAAZ,IAAuB,KAAKI,MAAL,GAAc,KAAKA,MAAjD;AACD,GAHD;;AAKAF,EAAAA,cAAc,CAACG,SAAf,CAAyBK,UAAzB,GAAsC,UAAUC,MAAV,EAAkB;AACtDZ,IAAAA,IAAI,CAACS,GAAL,CAASR,OAAT,EAAkBW,MAAM,CAACR,MAAzB,EAAiC,KAAKA,MAAtC;AACA,QAAIS,WAAW,GAAGD,MAAM,CAACP,MAAP,GAAgB,KAAKA,MAAvC;;AAEA,QAAIL,IAAI,CAACU,MAAL,CAAYT,OAAZ,KAAwBY,WAAW,GAAGA,WAA1C,EAAuD;AACrD,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GATD;;AAWA,SAAOV,cAAP;AACD,CAvBD,EAFA;;AA2BA,SAASA,cAAT","sourcesContent":["import { vec3 } from 'gl-matrix';\nvar tmpVecA = vec3.create();\n\nvar BoundingSphere =\n/** @class */\nfunction () {\n  function BoundingSphere(center, radius) {\n    this.center = center || vec3.create();\n    this.radius = radius || 0.5;\n  }\n\n  BoundingSphere.prototype.containsPoint = function (point) {\n    vec3.sub(tmpVecA, point, this.center);\n    return vec3.length(tmpVecA) < this.radius * this.radius;\n  };\n\n  BoundingSphere.prototype.intersects = function (sphere) {\n    vec3.sub(tmpVecA, sphere.center, this.center);\n    var totalRadius = sphere.radius + this.radius;\n\n    if (vec3.length(tmpVecA) <= totalRadius * totalRadius) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return BoundingSphere;\n}();\n\nexport { BoundingSphere };"]},"metadata":{},"sourceType":"module"}