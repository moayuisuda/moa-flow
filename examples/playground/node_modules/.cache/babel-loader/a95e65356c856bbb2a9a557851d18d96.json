{"ast":null,"code":"import path2Absolute from './path-2-absolute';\nimport { segmentToCubic } from './process/segment-2-cubic';\nexport default function pathToCurve(path, needZCommandIndexes) {\n  if (needZCommandIndexes === void 0) {\n    needZCommandIndexes = false;\n  }\n\n  var pathArray = path2Absolute(path);\n  var params = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    x: 0,\n    y: 0,\n    qx: null,\n    qy: null\n  };\n  var allPathCommands = [];\n  var pathCommand = '';\n  var ii = pathArray.length;\n  var segment;\n  var seglen;\n  var zCommandIndexes = [];\n\n  for (var i = 0; i < ii; i += 1) {\n    if (pathArray[i]) pathCommand = pathArray[i][0];\n    allPathCommands[i] = pathCommand;\n    pathArray[i] = segmentToCubic(pathArray[i], params);\n    fixArc(pathArray, allPathCommands, i);\n    ii = pathArray.length; // solves curveArrays ending in Z\n    // keep Z command account for lineJoin\n    // @see https://github.com/antvis/util/issues/68\n\n    if (pathCommand === 'Z') {\n      zCommandIndexes.push(i);\n    }\n\n    segment = pathArray[i];\n    seglen = segment.length;\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n  }\n\n  if (needZCommandIndexes) {\n    return [pathArray, zCommandIndexes];\n  } else {\n    return pathArray;\n  }\n}\n\nfunction fixArc(pathArray, allPathCommands, i) {\n  if (pathArray[i].length > 7) {\n    pathArray[i].shift();\n    var pi = pathArray[i]; // const ni = i + 1;\n\n    var ni = i;\n\n    while (pi.length) {\n      // if created multiple C:s, their original seg is saved\n      allPathCommands[i] = 'A'; // @ts-ignore\n\n      pathArray.splice(ni += 1, 0, ['C'].concat(pi.splice(0, 6)));\n    }\n\n    pathArray.splice(i, 1);\n  }\n}","map":{"version":3,"mappings":"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","names":["path2Absolute","segmentToCubic","pathToCurve","path","needZCommandIndexes","pathArray","params","x1","y1","x2","y2","x","y","qx","qy","allPathCommands","pathCommand","ii","length","segment","seglen","zCommandIndexes","i","fixArc","push","shift","pi","ni","splice","concat"],"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/path-util/src/path-2-curve.ts"],"sourcesContent":["import path2Absolute from './path-2-absolute';\nimport { segmentToCubic } from './process/segment-2-cubic';\nimport type { PathCommand, ProcessParams } from './types';\n\nexport default function pathToCurve(path: PathCommand[] | string, needZCommandIndexes = false) {\n  const pathArray = path2Absolute(path as string) as PathCommand[];\n\n  const params: ProcessParams = {\n    x1: 0, y1: 0, x2: 0, y2: 0, x: 0, y: 0, qx: null, qy: null,\n  };\n  const allPathCommands = [];\n  let pathCommand = '';\n  let ii = pathArray.length;\n  let segment: PathCommand;\n  let seglen: number;\n  let zCommandIndexes: number[] = [];\n\n  for (let i = 0; i < ii; i += 1) {\n    if (pathArray[i]) [pathCommand] = pathArray[i];\n\n    allPathCommands[i] = pathCommand;\n    pathArray[i] = segmentToCubic(pathArray[i], params);\n\n    fixArc(pathArray, allPathCommands, i);\n    ii = pathArray.length; // solves curveArrays ending in Z\n\n    // keep Z command account for lineJoin\n    // @see https://github.com/antvis/util/issues/68\n    if (pathCommand === 'Z') {\n      zCommandIndexes.push(i);\n    }\n\n    segment = pathArray[i];\n    seglen = segment.length;\n\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +(segment[seglen - 4]) || params.x1;\n    params.y2 = +(segment[seglen - 3]) || params.y1;\n  }\n  if (needZCommandIndexes) {\n    return [pathArray, zCommandIndexes];\n  } else {\n    return pathArray;\n  }\n}\n\nfunction fixArc(pathArray: PathCommand[], allPathCommands: string[], i: number) {\n  if (pathArray[i].length > 7) {\n    pathArray[i].shift();\n    const pi = pathArray[i];\n    // const ni = i + 1;\n    let ni = i;\n    while (pi.length) {\n      // if created multiple C:s, their original seg is saved\n      allPathCommands[i] = 'A';\n      // @ts-ignore\n      pathArray.splice(ni += 1, 0, ['C'].concat(pi.splice(0, 6)));\n    }\n    pathArray.splice(i, 1);\n  }\n}"]},"metadata":{},"sourceType":"module"}