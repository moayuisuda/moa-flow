{"ast":null,"code":"import { __exports as scheduler_development } from '../../../_virtual/scheduler.development.js';\nexport { __exports as default } from '../../../_virtual/scheduler.development.js';\n/** @license React v0.20.2\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (exports) {\n  if (process.env.NODE_ENV !== \"production\") {\n    (function () {\n      var enableSchedulerDebugging = false;\n      var enableProfiling = false;\n      var requestHostCallback;\n      var requestHostTimeout;\n      var cancelHostTimeout;\n      var requestPaint;\n      var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n      if (hasPerformanceNow) {\n        var localPerformance = performance;\n\n        exports.unstable_now = function () {\n          return localPerformance.now();\n        };\n      } else {\n        var localDate = Date;\n        var initialTime = localDate.now();\n\n        exports.unstable_now = function () {\n          return localDate.now() - initialTime;\n        };\n      }\n\n      if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n      // implementation using setTimeout.\n      typeof window === 'undefined' || // Check if MessageChannel is supported, too.\n      typeof MessageChannel !== 'function') {\n        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n        // fallback to a naive implementation.\n        var _callback = null;\n        var _timeoutID = null;\n\n        var _flushCallback = function () {\n          if (_callback !== null) {\n            try {\n              var currentTime = exports.unstable_now();\n              var hasRemainingTime = true;\n\n              _callback(hasRemainingTime, currentTime);\n\n              _callback = null;\n            } catch (e) {\n              setTimeout(_flushCallback, 0);\n              throw e;\n            }\n          }\n        };\n\n        requestHostCallback = function (cb) {\n          if (_callback !== null) {\n            // Protect against re-entrancy.\n            setTimeout(requestHostCallback, 0, cb);\n          } else {\n            _callback = cb;\n            setTimeout(_flushCallback, 0);\n          }\n        };\n\n        requestHostTimeout = function (cb, ms) {\n          _timeoutID = setTimeout(cb, ms);\n        };\n\n        cancelHostTimeout = function () {\n          clearTimeout(_timeoutID);\n        };\n\n        exports.unstable_shouldYield = function () {\n          return false;\n        };\n\n        requestPaint = exports.unstable_forceFrameRate = function () {};\n      } else {\n        // Capture local references to native APIs, in case a polyfill overrides them.\n        var _setTimeout = window.setTimeout;\n        var _clearTimeout = window.clearTimeout;\n\n        if (typeof console !== 'undefined') {\n          // TODO: Scheduler no longer requires these methods to be polyfilled. But\n          // maybe we want to continue warning if they don't exist, to preserve the\n          // option to rely on it in the future?\n          var requestAnimationFrame = window.requestAnimationFrame;\n          var cancelAnimationFrame = window.cancelAnimationFrame;\n\n          if (typeof requestAnimationFrame !== 'function') {\n            // Using console['error'] to evade Babel and ESLint\n            console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n          }\n\n          if (typeof cancelAnimationFrame !== 'function') {\n            // Using console['error'] to evade Babel and ESLint\n            console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n          }\n        }\n\n        var isMessageLoopRunning = false;\n        var scheduledHostCallback = null;\n        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n        // thread, like user events. By default, it yields multiple times per frame.\n        // It does not attempt to align with frame boundaries, since most tasks don't\n        // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n        var yieldInterval = 5;\n        var deadline = 0; // TODO: Make this configurable\n\n        {\n          // `isInputPending` is not available. Since we have no way of knowing if\n          // there's pending input, always yield at the end of the frame.\n          exports.unstable_shouldYield = function () {\n            return exports.unstable_now() >= deadline;\n          }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n          requestPaint = function () {};\n        }\n\n        exports.unstable_forceFrameRate = function (fps) {\n          if (fps < 0 || fps > 125) {\n            // Using console['error'] to evade Babel and ESLint\n            console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n            return;\n          }\n\n          if (fps > 0) {\n            yieldInterval = Math.floor(1000 / fps);\n          } else {\n            // reset the framerate\n            yieldInterval = 5;\n          }\n        };\n\n        var performWorkUntilDeadline = function () {\n          if (scheduledHostCallback !== null) {\n            var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n            // cycle. This means there's always time remaining at the beginning of\n            // the message event.\n\n            deadline = currentTime + yieldInterval;\n            var hasTimeRemaining = true;\n\n            try {\n              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n              if (!hasMoreWork) {\n                isMessageLoopRunning = false;\n                scheduledHostCallback = null;\n              } else {\n                // If there's more work, schedule the next message event at the end\n                // of the preceding one.\n                port.postMessage(null);\n              }\n            } catch (error) {\n              // If a scheduler task throws, exit the current browser task so the\n              // error can be observed.\n              port.postMessage(null);\n              throw error;\n            }\n          } else {\n            isMessageLoopRunning = false;\n          } // Yielding to the browser will give it a chance to paint, so we can\n\n        };\n\n        var channel = new MessageChannel();\n        var port = channel.port2;\n        channel.port1.onmessage = performWorkUntilDeadline;\n\n        requestHostCallback = function (callback) {\n          scheduledHostCallback = callback;\n\n          if (!isMessageLoopRunning) {\n            isMessageLoopRunning = true;\n            port.postMessage(null);\n          }\n        };\n\n        requestHostTimeout = function (callback, ms) {\n          taskTimeoutID = _setTimeout(function () {\n            callback(exports.unstable_now());\n          }, ms);\n        };\n\n        cancelHostTimeout = function () {\n          _clearTimeout(taskTimeoutID);\n\n          taskTimeoutID = -1;\n        };\n      }\n\n      function push(heap, node) {\n        var index = heap.length;\n        heap.push(node);\n        siftUp(heap, node, index);\n      }\n\n      function peek(heap) {\n        var first = heap[0];\n        return first === undefined ? null : first;\n      }\n\n      function pop(heap) {\n        var first = heap[0];\n\n        if (first !== undefined) {\n          var last = heap.pop();\n\n          if (last !== first) {\n            heap[0] = last;\n            siftDown(heap, last, 0);\n          }\n\n          return first;\n        } else {\n          return null;\n        }\n      }\n\n      function siftUp(heap, node, i) {\n        var index = i;\n\n        while (true) {\n          var parentIndex = index - 1 >>> 1;\n          var parent = heap[parentIndex];\n\n          if (parent !== undefined && compare(parent, node) > 0) {\n            // The parent is larger. Swap positions.\n            heap[parentIndex] = node;\n            heap[index] = parent;\n            index = parentIndex;\n          } else {\n            // The parent is smaller. Exit.\n            return;\n          }\n        }\n      }\n\n      function siftDown(heap, node, i) {\n        var index = i;\n        var length = heap.length;\n\n        while (index < length) {\n          var leftIndex = (index + 1) * 2 - 1;\n          var left = heap[leftIndex];\n          var rightIndex = leftIndex + 1;\n          var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n          if (left !== undefined && compare(left, node) < 0) {\n            if (right !== undefined && compare(right, left) < 0) {\n              heap[index] = right;\n              heap[rightIndex] = node;\n              index = rightIndex;\n            } else {\n              heap[index] = left;\n              heap[leftIndex] = node;\n              index = leftIndex;\n            }\n          } else if (right !== undefined && compare(right, node) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            // Neither child is smaller. Exit.\n            return;\n          }\n        }\n      }\n\n      function compare(a, b) {\n        // Compare sort index first, then task id.\n        var diff = a.sortIndex - b.sortIndex;\n        return diff !== 0 ? diff : a.id - b.id;\n      } // TODO: Use symbols?\n\n\n      var ImmediatePriority = 1;\n      var UserBlockingPriority = 2;\n      var NormalPriority = 3;\n      var LowPriority = 4;\n      var IdlePriority = 5;\n\n      function markTaskErrored(task, ms) {}\n      /* eslint-disable no-var */\n      // Math.pow(2, 30) - 1\n      // 0b111111111111111111111111111111\n\n\n      var maxSigned31BitInt = 1073741823; // Times out immediately\n\n      var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n      var NORMAL_PRIORITY_TIMEOUT = 5000;\n      var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n      var taskQueue = [];\n      var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n      var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n      var currentTask = null;\n      var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n      var isPerformingWork = false;\n      var isHostCallbackScheduled = false;\n      var isHostTimeoutScheduled = false;\n\n      function advanceTimers(currentTime) {\n        // Check for tasks that are no longer delayed and add them to the queue.\n        var timer = peek(timerQueue);\n\n        while (timer !== null) {\n          if (timer.callback === null) {\n            // Timer was cancelled.\n            pop(timerQueue);\n          } else if (timer.startTime <= currentTime) {\n            // Timer fired. Transfer to the task queue.\n            pop(timerQueue);\n            timer.sortIndex = timer.expirationTime;\n            push(taskQueue, timer);\n          } else {\n            // Remaining timers are pending.\n            return;\n          }\n\n          timer = peek(timerQueue);\n        }\n      }\n\n      function handleTimeout(currentTime) {\n        isHostTimeoutScheduled = false;\n        advanceTimers(currentTime);\n\n        if (!isHostCallbackScheduled) {\n          if (peek(taskQueue) !== null) {\n            isHostCallbackScheduled = true;\n            requestHostCallback(flushWork);\n          } else {\n            var firstTimer = peek(timerQueue);\n\n            if (firstTimer !== null) {\n              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n            }\n          }\n        }\n      }\n\n      function flushWork(hasTimeRemaining, initialTime) {\n        isHostCallbackScheduled = false;\n\n        if (isHostTimeoutScheduled) {\n          // We scheduled a timeout but it's no longer needed. Cancel it.\n          isHostTimeoutScheduled = false;\n          cancelHostTimeout();\n        }\n\n        isPerformingWork = true;\n        var previousPriorityLevel = currentPriorityLevel;\n\n        try {\n          var currentTime;\n          if (enableProfiling) ;else {\n            // No catch in prod code path.\n            return workLoop(hasTimeRemaining, initialTime);\n          }\n        } finally {\n          currentTask = null;\n          currentPriorityLevel = previousPriorityLevel;\n          isPerformingWork = false;\n        }\n      }\n\n      function workLoop(hasTimeRemaining, initialTime) {\n        var currentTime = initialTime;\n        advanceTimers(currentTime);\n        currentTask = peek(taskQueue);\n\n        while (currentTask !== null && !enableSchedulerDebugging) {\n          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {\n            // This currentTask hasn't expired, and we've reached the deadline.\n            break;\n          }\n\n          var callback = currentTask.callback;\n\n          if (typeof callback === 'function') {\n            currentTask.callback = null;\n            currentPriorityLevel = currentTask.priorityLevel;\n            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n            var continuationCallback = callback(didUserCallbackTimeout);\n            currentTime = exports.unstable_now();\n\n            if (typeof continuationCallback === 'function') {\n              currentTask.callback = continuationCallback;\n            } else {\n              if (currentTask === peek(taskQueue)) {\n                pop(taskQueue);\n              }\n            }\n\n            advanceTimers(currentTime);\n          } else {\n            pop(taskQueue);\n          }\n\n          currentTask = peek(taskQueue);\n        } // Return whether there's additional work\n\n\n        if (currentTask !== null) {\n          return true;\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n\n          return false;\n        }\n      }\n\n      function unstable_runWithPriority(priorityLevel, eventHandler) {\n        switch (priorityLevel) {\n          case ImmediatePriority:\n          case UserBlockingPriority:\n          case NormalPriority:\n          case LowPriority:\n          case IdlePriority:\n            break;\n\n          default:\n            priorityLevel = NormalPriority;\n        }\n\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = priorityLevel;\n\n        try {\n          return eventHandler();\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      }\n\n      function unstable_next(eventHandler) {\n        var priorityLevel;\n\n        switch (currentPriorityLevel) {\n          case ImmediatePriority:\n          case UserBlockingPriority:\n          case NormalPriority:\n            // Shift down to normal priority\n            priorityLevel = NormalPriority;\n            break;\n\n          default:\n            // Anything lower than normal priority should remain at the current level.\n            priorityLevel = currentPriorityLevel;\n            break;\n        }\n\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = priorityLevel;\n\n        try {\n          return eventHandler();\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      }\n\n      function unstable_wrapCallback(callback) {\n        var parentPriorityLevel = currentPriorityLevel;\n        return function () {\n          // This is a fork of runWithPriority, inlined for performance.\n          var previousPriorityLevel = currentPriorityLevel;\n          currentPriorityLevel = parentPriorityLevel;\n\n          try {\n            return callback.apply(this, arguments);\n          } finally {\n            currentPriorityLevel = previousPriorityLevel;\n          }\n        };\n      }\n\n      function unstable_scheduleCallback(priorityLevel, callback, options) {\n        var currentTime = exports.unstable_now();\n        var startTime;\n\n        if (typeof options === 'object' && options !== null) {\n          var delay = options.delay;\n\n          if (typeof delay === 'number' && delay > 0) {\n            startTime = currentTime + delay;\n          } else {\n            startTime = currentTime;\n          }\n        } else {\n          startTime = currentTime;\n        }\n\n        var timeout;\n\n        switch (priorityLevel) {\n          case ImmediatePriority:\n            timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n            break;\n\n          case UserBlockingPriority:\n            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n            break;\n\n          case IdlePriority:\n            timeout = IDLE_PRIORITY_TIMEOUT;\n            break;\n\n          case LowPriority:\n            timeout = LOW_PRIORITY_TIMEOUT;\n            break;\n\n          case NormalPriority:\n          default:\n            timeout = NORMAL_PRIORITY_TIMEOUT;\n            break;\n        }\n\n        var expirationTime = startTime + timeout;\n        var newTask = {\n          id: taskIdCounter++,\n          callback: callback,\n          priorityLevel: priorityLevel,\n          startTime: startTime,\n          expirationTime: expirationTime,\n          sortIndex: -1\n        };\n\n        if (startTime > currentTime) {\n          // This is a delayed task.\n          newTask.sortIndex = startTime;\n          push(timerQueue, newTask);\n\n          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n            // All tasks are delayed, and this is the task with the earliest delay.\n            if (isHostTimeoutScheduled) {\n              // Cancel an existing timeout.\n              cancelHostTimeout();\n            } else {\n              isHostTimeoutScheduled = true;\n            } // Schedule a timeout.\n\n\n            requestHostTimeout(handleTimeout, startTime - currentTime);\n          }\n        } else {\n          newTask.sortIndex = expirationTime;\n          push(taskQueue, newTask); // wait until the next time we yield.\n\n          if (!isHostCallbackScheduled && !isPerformingWork) {\n            isHostCallbackScheduled = true;\n            requestHostCallback(flushWork);\n          }\n        }\n\n        return newTask;\n      }\n\n      function unstable_pauseExecution() {}\n\n      function unstable_continueExecution() {\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      function unstable_getFirstCallbackNode() {\n        return peek(taskQueue);\n      }\n\n      function unstable_cancelCallback(task) {\n        // remove from the queue because you can't remove arbitrary nodes from an\n        // array based heap, only the first one.)\n        task.callback = null;\n      }\n\n      function unstable_getCurrentPriorityLevel() {\n        return currentPriorityLevel;\n      }\n\n      var unstable_requestPaint = requestPaint;\n      var unstable_Profiling = null;\n      exports.unstable_IdlePriority = IdlePriority;\n      exports.unstable_ImmediatePriority = ImmediatePriority;\n      exports.unstable_LowPriority = LowPriority;\n      exports.unstable_NormalPriority = NormalPriority;\n      exports.unstable_Profiling = unstable_Profiling;\n      exports.unstable_UserBlockingPriority = UserBlockingPriority;\n      exports.unstable_cancelCallback = unstable_cancelCallback;\n      exports.unstable_continueExecution = unstable_continueExecution;\n      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n      exports.unstable_next = unstable_next;\n      exports.unstable_pauseExecution = unstable_pauseExecution;\n      exports.unstable_requestPaint = unstable_requestPaint;\n      exports.unstable_runWithPriority = unstable_runWithPriority;\n      exports.unstable_scheduleCallback = unstable_scheduleCallback;\n      exports.unstable_wrapCallback = unstable_wrapCallback;\n    })();\n  }\n})(scheduler_development);","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/packages/flow/lib/node_modules/scheduler/cjs/scheduler.development.js"],"names":["__exports","scheduler_development","default","exports","process","env","NODE_ENV","enableSchedulerDebugging","enableProfiling","requestHostCallback","requestHostTimeout","cancelHostTimeout","requestPaint","hasPerformanceNow","performance","now","localPerformance","unstable_now","localDate","Date","initialTime","window","MessageChannel","_callback","_timeoutID","_flushCallback","currentTime","hasRemainingTime","e","setTimeout","cb","ms","clearTimeout","unstable_shouldYield","unstable_forceFrameRate","_setTimeout","_clearTimeout","console","requestAnimationFrame","cancelAnimationFrame","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","yieldInterval","deadline","fps","Math","floor","performWorkUntilDeadline","hasTimeRemaining","hasMoreWork","port","postMessage","error","channel","port2","port1","onmessage","callback","push","heap","node","index","length","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","handleTimeout","flushWork","firstTimer","previousPriorityLevel","workLoop","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_requestPaint","unstable_Profiling","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority"],"mappings":"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","sourcesContent":["import { __exports as scheduler_development } from '../../../_virtual/scheduler.development.js';\nexport { __exports as default } from '../../../_virtual/scheduler.development.js';\n\n/** @license React v0.20.2\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (exports) {\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = false;\n\nvar requestHostCallback;\nvar requestHostTimeout;\nvar cancelHostTimeout;\nvar requestPaint;\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n}\n\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _timeoutID = null;\n\n  var _flushCallback = function () {\n    if (_callback !== null) {\n      try {\n        var currentTime = exports.unstable_now();\n        var hasRemainingTime = true;\n\n        _callback(hasRemainingTime, currentTime);\n\n        _callback = null;\n      } catch (e) {\n        setTimeout(_flushCallback, 0);\n        throw e;\n      }\n    }\n  };\n\n  requestHostCallback = function (cb) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0);\n    }\n  };\n\n  requestHostTimeout = function (cb, ms) {\n    _timeoutID = setTimeout(cb, ms);\n  };\n\n  cancelHostTimeout = function () {\n    clearTimeout(_timeoutID);\n  };\n\n  exports.unstable_shouldYield = function () {\n    return false;\n  };\n\n  requestPaint = exports.unstable_forceFrameRate = function () {};\n} else {\n  // Capture local references to native APIs, in case a polyfill overrides them.\n  var _setTimeout = window.setTimeout;\n  var _clearTimeout = window.clearTimeout;\n\n  if (typeof console !== 'undefined') {\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\n    // maybe we want to continue warning if they don't exist, to preserve the\n    // option to rely on it in the future?\n    var requestAnimationFrame = window.requestAnimationFrame;\n    var cancelAnimationFrame = window.cancelAnimationFrame;\n\n    if (typeof requestAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n    }\n\n    if (typeof cancelAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n    }\n  }\n\n  var isMessageLoopRunning = false;\n  var scheduledHostCallback = null;\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n  // thread, like user events. By default, it yields multiple times per frame.\n  // It does not attempt to align with frame boundaries, since most tasks don't\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n  var yieldInterval = 5;\n  var deadline = 0; // TODO: Make this configurable\n\n  {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    exports.unstable_shouldYield = function () {\n      return exports.unstable_now() >= deadline;\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n    requestPaint = function () {};\n  }\n\n  exports.unstable_forceFrameRate = function (fps) {\n    if (fps < 0 || fps > 125) {\n      // Using console['error'] to evade Babel and ESLint\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n      return;\n    }\n\n    if (fps > 0) {\n      yieldInterval = Math.floor(1000 / fps);\n    } else {\n      // reset the framerate\n      yieldInterval = 5;\n    }\n  };\n\n  var performWorkUntilDeadline = function () {\n    if (scheduledHostCallback !== null) {\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n      // cycle. This means there's always time remaining at the beginning of\n      // the message event.\n\n      deadline = currentTime + yieldInterval;\n      var hasTimeRemaining = true;\n\n      try {\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n        if (!hasMoreWork) {\n          isMessageLoopRunning = false;\n          scheduledHostCallback = null;\n        } else {\n          // If there's more work, schedule the next message event at the end\n          // of the preceding one.\n          port.postMessage(null);\n        }\n      } catch (error) {\n        // If a scheduler task throws, exit the current browser task so the\n        // error can be observed.\n        port.postMessage(null);\n        throw error;\n      }\n    } else {\n      isMessageLoopRunning = false;\n    } // Yielding to the browser will give it a chance to paint, so we can\n  };\n\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  requestHostCallback = function (callback) {\n    scheduledHostCallback = callback;\n\n    if (!isMessageLoopRunning) {\n      isMessageLoopRunning = true;\n      port.postMessage(null);\n    }\n  };\n\n  requestHostTimeout = function (callback, ms) {\n    taskTimeoutID = _setTimeout(function () {\n      callback(exports.unstable_now());\n    }, ms);\n  };\n\n  cancelHostTimeout = function () {\n    _clearTimeout(taskTimeoutID);\n\n    taskTimeoutID = -1;\n  };\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    var currentTime; if (enableProfiling) ; else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}\n}(scheduler_development));\n"]},"metadata":{},"sourceType":"module"}