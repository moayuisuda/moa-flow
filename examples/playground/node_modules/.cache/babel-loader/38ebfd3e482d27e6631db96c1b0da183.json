{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { DCHECK } from '../../utils';\nimport { CSSMathVariadic } from './CSSMathVariadic';\nimport { typeCheck, CSSStyleValueType, CSSNumericValueType, Nested, ParenLess } from '.';\n/**\n * Represents the sum of one or more CSSNumericValues.\n * @see https://drafts.css-houdini.org/css-typed-om/#cssmathsum\n */\n\nvar CSSMathSum =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathSum, _super);\n\n  function CSSMathSum() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.operator = 'sum';\n    return _this;\n  }\n\n  CSSMathSum.create = function (values) {\n    var error = false;\n    var finalType = typeCheck(values, CSSNumericValueType.add, error);\n    return error ? null : new CSSMathSum(values, finalType);\n  };\n\n  CSSMathSum.numericTypeFromUnitMap = function (units) {\n    var type = new CSSNumericValueType();\n    Object.keys(units).forEach(function (key) {\n      var exp = units[key];\n      var error = false;\n      type = CSSNumericValueType.multiply(type, new CSSNumericValueType(Number(key), exp), error);\n      DCHECK(!error);\n    });\n    return type;\n  };\n\n  CSSMathSum.canCreateNumericTypeFromSumValue = function (sum) {\n    var _this = this;\n\n    DCHECK(!!sum.length);\n    var first_type = this.numericTypeFromUnitMap(sum[0].units);\n    return sum.every(function (term) {\n      var error = false;\n      CSSNumericValueType.add(first_type, _this.numericTypeFromUnitMap(term.units), error);\n      return !error;\n    });\n  };\n\n  CSSMathSum.prototype.clone = function () {\n    return new CSSMathSum(this.values, this.type_);\n  };\n\n  CSSMathSum.prototype.getType = function () {\n    return CSSStyleValueType.kSumType;\n  }; // toCalcExpressionNode() {\n  //   return this.toCalcExporessionNodeForVariadic(CSSMathOperator.kAdd);\n  // }\n\n\n  CSSMathSum.prototype.sumValue = function () {\n    var sum = [];\n    this.numericValues().forEach(function (value) {\n      var child_sum = value.sumValue();\n\n      if (!child_sum.length) {\n        return null;\n      }\n\n      child_sum.forEach(function (term) {\n        var index = sum.findIndex(function (s) {\n          return JSON.stringify(s.units) === JSON.stringify(term.units);\n        });\n\n        if (index === -1) {\n          sum.push(__assign({}, term));\n        } else {\n          sum[index].value += term.value;\n        }\n      });\n    });\n    if (!CSSMathSum.canCreateNumericTypeFromSumValue(sum)) return null;\n    return sum;\n  };\n\n  CSSMathSum.prototype.buildCSSText = function (nested, paren_less, result) {\n    if (paren_less == ParenLess.kNo) {\n      result += nested === Nested.kYes ? '(' : 'calc(';\n    }\n\n    var values = this.numericValues();\n    result = values[0].buildCSSText(Nested.kYes, ParenLess.kNo, result);\n\n    for (var i = 1; i < values.length; i++) {\n      var arg = values[i];\n\n      if (arg.getType() === CSSStyleValueType.kNegateType) {\n        result += ' - ';\n        result = arg.value.buildCSSText(Nested.kYes, ParenLess.kNo, result);\n      } else {\n        result += ' + ';\n        result = arg.buildCSSText(Nested.kYes, ParenLess.kNo, result);\n      }\n    }\n\n    if (paren_less === ParenLess.kNo) {\n      result += ')';\n    }\n\n    return result;\n  };\n\n  return CSSMathSum;\n}(CSSMathVariadic);\n\nexport { CSSMathSum };","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/@antv/g/es/css/cssom/CSSMathSum.js"],"names":["__assign","__extends","DCHECK","CSSMathVariadic","typeCheck","CSSStyleValueType","CSSNumericValueType","Nested","ParenLess","CSSMathSum","_super","_this","apply","arguments","operator","create","values","error","finalType","add","numericTypeFromUnitMap","units","type","Object","keys","forEach","key","exp","multiply","Number","canCreateNumericTypeFromSumValue","sum","length","first_type","every","term","prototype","clone","type_","getType","kSumType","sumValue","numericValues","value","child_sum","index","findIndex","s","JSON","stringify","push","buildCSSText","nested","paren_less","result","kNo","kYes","i","arg","kNegateType"],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { DCHECK } from '../../utils';\nimport { CSSMathVariadic } from './CSSMathVariadic';\nimport { typeCheck, CSSStyleValueType, CSSNumericValueType, Nested, ParenLess } from '.';\n/**\n * Represents the sum of one or more CSSNumericValues.\n * @see https://drafts.css-houdini.org/css-typed-om/#cssmathsum\n */\n\nvar CSSMathSum =\n/** @class */\nfunction (_super) {\n  __extends(CSSMathSum, _super);\n\n  function CSSMathSum() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.operator = 'sum';\n    return _this;\n  }\n\n  CSSMathSum.create = function (values) {\n    var error = false;\n    var finalType = typeCheck(values, CSSNumericValueType.add, error);\n    return error ? null : new CSSMathSum(values, finalType);\n  };\n\n  CSSMathSum.numericTypeFromUnitMap = function (units) {\n    var type = new CSSNumericValueType();\n    Object.keys(units).forEach(function (key) {\n      var exp = units[key];\n      var error = false;\n      type = CSSNumericValueType.multiply(type, new CSSNumericValueType(Number(key), exp), error);\n      DCHECK(!error);\n    });\n    return type;\n  };\n\n  CSSMathSum.canCreateNumericTypeFromSumValue = function (sum) {\n    var _this = this;\n\n    DCHECK(!!sum.length);\n    var first_type = this.numericTypeFromUnitMap(sum[0].units);\n    return sum.every(function (term) {\n      var error = false;\n      CSSNumericValueType.add(first_type, _this.numericTypeFromUnitMap(term.units), error);\n      return !error;\n    });\n  };\n\n  CSSMathSum.prototype.clone = function () {\n    return new CSSMathSum(this.values, this.type_);\n  };\n\n  CSSMathSum.prototype.getType = function () {\n    return CSSStyleValueType.kSumType;\n  }; // toCalcExpressionNode() {\n  //   return this.toCalcExporessionNodeForVariadic(CSSMathOperator.kAdd);\n  // }\n\n\n  CSSMathSum.prototype.sumValue = function () {\n    var sum = [];\n    this.numericValues().forEach(function (value) {\n      var child_sum = value.sumValue();\n\n      if (!child_sum.length) {\n        return null;\n      }\n\n      child_sum.forEach(function (term) {\n        var index = sum.findIndex(function (s) {\n          return JSON.stringify(s.units) === JSON.stringify(term.units);\n        });\n\n        if (index === -1) {\n          sum.push(__assign({}, term));\n        } else {\n          sum[index].value += term.value;\n        }\n      });\n    });\n    if (!CSSMathSum.canCreateNumericTypeFromSumValue(sum)) return null;\n    return sum;\n  };\n\n  CSSMathSum.prototype.buildCSSText = function (nested, paren_less, result) {\n    if (paren_less == ParenLess.kNo) {\n      result += nested === Nested.kYes ? '(' : 'calc(';\n    }\n\n    var values = this.numericValues();\n    result = values[0].buildCSSText(Nested.kYes, ParenLess.kNo, result);\n\n    for (var i = 1; i < values.length; i++) {\n      var arg = values[i];\n\n      if (arg.getType() === CSSStyleValueType.kNegateType) {\n        result += ' - ';\n        result = arg.value.buildCSSText(Nested.kYes, ParenLess.kNo, result);\n      } else {\n        result += ' + ';\n        result = arg.buildCSSText(Nested.kYes, ParenLess.kNo, result);\n      }\n    }\n\n    if (paren_less === ParenLess.kNo) {\n      result += ')';\n    }\n\n    return result;\n  };\n\n  return CSSMathSum;\n}(CSSMathVariadic);\n\nexport { CSSMathSum };"]},"metadata":{},"sourceType":"module"}