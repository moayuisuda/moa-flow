{"ast":null,"code":"import arrayEach from './_arrayEach.js';\nimport arrayPush from './_arrayPush.js';\nimport baseFunctions from './_baseFunctions.js';\nimport copyArray from './_copyArray.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport keys from './keys.js';\n/**\n * Adds all own enumerable string keyed function properties of a source\n * object to the destination object. If `object` is a function, then methods\n * are added to its prototype as well.\n *\n * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n * avoid conflicts caused by modifying the original.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {Function|Object} [object=lodash] The destination object.\n * @param {Object} source The object of functions to add.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n * @returns {Function|Object} Returns `object`.\n * @example\n *\n * function vowels(string) {\n *   return _.filter(string, function(v) {\n *     return /[aeiou]/i.test(v);\n *   });\n * }\n *\n * _.mixin({ 'vowels': vowels });\n * _.vowels('fred');\n * // => ['e']\n *\n * _('fred').vowels().value();\n * // => ['e']\n *\n * _.mixin({ 'vowels': vowels }, { 'chain': false });\n * _('fred').vowels();\n * // => ['e']\n */\n\nfunction mixin(object, source, options) {\n  var props = keys(source),\n      methodNames = baseFunctions(source, props);\n  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n      isFunc = isFunction(object);\n  arrayEach(methodNames, function (methodName) {\n    var func = source[methodName];\n    object[methodName] = func;\n\n    if (isFunc) {\n      object.prototype[methodName] = function () {\n        var chainAll = this.__chain__;\n\n        if (chain || chainAll) {\n          var result = object(this.__wrapped__),\n              actions = result.__actions__ = copyArray(this.__actions__);\n          actions.push({\n            'func': func,\n            'args': arguments,\n            'thisArg': object\n          });\n          result.__chain__ = chainAll;\n          return result;\n        }\n\n        return func.apply(object, arrayPush([this.value()], arguments));\n      };\n    }\n  });\n  return object;\n}\n\nexport default mixin;","map":{"version":3,"sources":["/Users/dennis.zhang/Desktop/其它代码库/moa-flow/node_modules/lodash-es/mixin.js"],"names":["arrayEach","arrayPush","baseFunctions","copyArray","isFunction","isObject","keys","mixin","object","source","options","props","methodNames","chain","isFunc","methodName","func","prototype","chainAll","__chain__","result","__wrapped__","actions","__actions__","push","arguments","apply","value"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AACtC,MAAIC,KAAK,GAAGL,IAAI,CAACG,MAAD,CAAhB;AAAA,MACIG,WAAW,GAAGV,aAAa,CAACO,MAAD,EAASE,KAAT,CAD/B;AAGA,MAAIE,KAAK,GAAG,EAAER,QAAQ,CAACK,OAAD,CAAR,IAAqB,WAAWA,OAAlC,KAA8C,CAAC,CAACA,OAAO,CAACG,KAApE;AAAA,MACIC,MAAM,GAAGV,UAAU,CAACI,MAAD,CADvB;AAGAR,EAAAA,SAAS,CAACY,WAAD,EAAc,UAASG,UAAT,EAAqB;AAC1C,QAAIC,IAAI,GAAGP,MAAM,CAACM,UAAD,CAAjB;AACAP,IAAAA,MAAM,CAACO,UAAD,CAAN,GAAqBC,IAArB;;AACA,QAAIF,MAAJ,EAAY;AACVN,MAAAA,MAAM,CAACS,SAAP,CAAiBF,UAAjB,IAA+B,YAAW;AACxC,YAAIG,QAAQ,GAAG,KAAKC,SAApB;;AACA,YAAIN,KAAK,IAAIK,QAAb,EAAuB;AACrB,cAAIE,MAAM,GAAGZ,MAAM,CAAC,KAAKa,WAAN,CAAnB;AAAA,cACIC,OAAO,GAAGF,MAAM,CAACG,WAAP,GAAqBpB,SAAS,CAAC,KAAKoB,WAAN,CAD5C;AAGAD,UAAAA,OAAO,CAACE,IAAR,CAAa;AAAE,oBAAQR,IAAV;AAAgB,oBAAQS,SAAxB;AAAmC,uBAAWjB;AAA9C,WAAb;AACAY,UAAAA,MAAM,CAACD,SAAP,GAAmBD,QAAnB;AACA,iBAAOE,MAAP;AACD;;AACD,eAAOJ,IAAI,CAACU,KAAL,CAAWlB,MAAX,EAAmBP,SAAS,CAAC,CAAC,KAAK0B,KAAL,EAAD,CAAD,EAAiBF,SAAjB,CAA5B,CAAP;AACD,OAXD;AAYD;AACF,GAjBQ,CAAT;AAmBA,SAAOjB,MAAP;AACD;;AAED,eAAeD,KAAf","sourcesContent":["import arrayEach from './_arrayEach.js';\nimport arrayPush from './_arrayPush.js';\nimport baseFunctions from './_baseFunctions.js';\nimport copyArray from './_copyArray.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport keys from './keys.js';\n\n/**\n * Adds all own enumerable string keyed function properties of a source\n * object to the destination object. If `object` is a function, then methods\n * are added to its prototype as well.\n *\n * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n * avoid conflicts caused by modifying the original.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {Function|Object} [object=lodash] The destination object.\n * @param {Object} source The object of functions to add.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n * @returns {Function|Object} Returns `object`.\n * @example\n *\n * function vowels(string) {\n *   return _.filter(string, function(v) {\n *     return /[aeiou]/i.test(v);\n *   });\n * }\n *\n * _.mixin({ 'vowels': vowels });\n * _.vowels('fred');\n * // => ['e']\n *\n * _('fred').vowels().value();\n * // => ['e']\n *\n * _.mixin({ 'vowels': vowels }, { 'chain': false });\n * _('fred').vowels();\n * // => ['e']\n */\nfunction mixin(object, source, options) {\n  var props = keys(source),\n      methodNames = baseFunctions(source, props);\n\n  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n      isFunc = isFunction(object);\n\n  arrayEach(methodNames, function(methodName) {\n    var func = source[methodName];\n    object[methodName] = func;\n    if (isFunc) {\n      object.prototype[methodName] = function() {\n        var chainAll = this.__chain__;\n        if (chain || chainAll) {\n          var result = object(this.__wrapped__),\n              actions = result.__actions__ = copyArray(this.__actions__);\n\n          actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n          result.__chain__ = chainAll;\n          return result;\n        }\n        return func.apply(object, arrayPush([this.value()], arguments));\n      };\n    }\n  });\n\n  return object;\n}\n\nexport default mixin;\n"]},"metadata":{},"sourceType":"module"}