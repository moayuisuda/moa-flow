[{"/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/index.tsx":"1","/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/reportWebVitals.ts":"2","/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/App.tsx":"3","/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/BizNode.tsx":"4","/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/BizEdge.tsx":"5","/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/Context.tsx":"6"},{"size":500,"mtime":1652341443275,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1652341443276,"results":"9","hashOfConfig":"8"},{"size":2178,"mtime":1652422580343,"results":"10","hashOfConfig":"8"},{"size":4316,"mtime":1652422392301,"results":"11","hashOfConfig":"8"},{"size":529,"mtime":1652341609158,"results":"12","hashOfConfig":"8"},{"size":119,"mtime":1652422312285,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12xgxj3",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/index.tsx",[],[],"/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/reportWebVitals.ts",[],[],"/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/App.tsx",["35"],[],"import { Flow, RightClickPanel, Canvas } from \"@ali/flow-infra-g\";\nimport type { ModelType } from \"@ali/flow-infra-g\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { Button, message } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nimport BizEdge from \"./BizEdge\";\nimport BizNode from \"./BizNode\";\nimport BizContext from \"./Context\";\n\nimport testData from \"./test.json\";\n\nfunction App() {\n  const modelRef = useRef<ModelType>();\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const model = modelRef.current as ModelType;\n\n    // 放一些额外的业务逻辑到实例里，在节点里可以在this.context中获取\n    model.extra = { alert: (e: string) => message.info(e) };\n\n    model.regist(\"BizNode\", BizNode);\n    model.regist(\"BizEdge\", BizEdge);\n    // 将默认连线设置为自定义连线\n    model.setLinkEdge(\"BizEdge\");\n\n    model.setCanvasData(testData);\n\n    // setInterval(() => {\n    //   setCount((count) => count + 1);\n    // }, 1000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* react组件引用 */}\n      <Flow\n        multiSelect\n        modelRef={modelRef}\n        canvasData={testData}\n        onEvent={(e) => {\n          // if (e.type === \"data:change\") return;\n          // message.info(`[${e.type}]}`);\n        }}\n      >\n        {/* Provider包裹画布组件 */}\n        <BizContext.Provider\n          value={{\n            count,\n          }}\n        >\n          <Canvas />\n        </BizContext.Provider>\n\n        {/* 右键菜单组件，可以拿到context */}\n        <RightClickPanel>\n          {(context: ModelType) => {\n            return (\n              <Button\n                onClick={() => {\n                  const { getCellData, selectCells } = context;\n                  message.info(\n                    `当前选中的节点是 ${getCellData(selectCells[0])?.label}`\n                  );\n                }}\n              >\n                获取选中节点\n              </Button>\n            );\n          }}\n        </RightClickPanel>\n      </Flow>\n      <h1>111</h1>\n      <h1>111</h1>\n      <h1>111</h1>\n      <h1>111</h1>\n      <h1>111</h1>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/BizNode.tsx",["36"],[],"import React from \"react\";\nimport {\n  Node,\n  Graph,\n  Interactor,\n  ModelType,\n  PortDataType,\n  NodeDataType,\n  Portal,\n  ConsumerBridge,\n} from \"@ali/flow-infra-g\";\nimport { message, Input, Modal } from \"antd\";\nimport BizContext from \"./Context\";\n\nconst { Rect, Text, Circle } = Graph;\nconst { Port } = Interactor;\n\ntype BizPortDataType = PortDataType & {\n  label: string;\n  portType: \"in\" | \"out\" | \"control-out\" | \"control-in\";\n};\n\ntype BizNodeDataType = {\n  ports?: BizPortDataType[];\n  label?: string;\n} & NodeDataType;\nclass BizNode extends Node<BizNodeDataType, { modalVisible: boolean }> {\n  static metaData = {\n    label: \"\",\n  };\n\n  static getBounds(cellData: BizNodeDataType) {\n    return {\n      x: cellData.x,\n      y: cellData.y,\n      width: 200,\n      height: 100,\n    };\n  }\n\n  constructor(props: { data: BizNodeDataType }, context: ModelType) {\n    super(props, context);\n\n    this.state = {\n      modalVisible: true,\n    };\n  }\n\n  getStroke = () => {\n    const isSelect = this.isSelect();\n    const { color } = this.context;\n\n    if (isSelect) {\n      return {\n        stroke: color.active,\n        lineWidth: 3,\n      };\n    } else\n      return {\n        stroke: undefined,\n        lineWidth: 0,\n      };\n  };\n\n  // 只有这个方法是必须的\n  content() {\n    const { color } = this.context;\n    const { data } = this.props;\n    const { label, ports } = data;\n    const { width, height } = BizNode.getBounds(data);\n\n    const inPorts =\n      ports?.filter((portData) => portData.portType === \"in\") || [];\n    const outPorts =\n      ports?.filter((portData) => portData.portType === \"out\") || [];\n\n    return (\n      <ConsumerBridge context={BizContext}>\n        {(bizContext) => (\n          <Interactor {...this.props.data}>\n            <Rect\n              width={width}\n              height={height}\n              fill=\"white\"\n              shadowColor=\"rgba(0,0,0,0.1)\"\n              shadowBlur={10}\n              radius={10}\n              {...this.getStroke()}\n            />\n            <Rect width={width} height={40} fill={color.deepGrey} radius={10} />\n            <Text\n              x={10}\n              y={10}\n              fontWeight=\"bold\"\n              textBaseline={\"top\"}\n              text={(label || \"\") + bizContext.count}\n              fill=\"white\"\n            />\n\n            <Text\n              x={20}\n              y={60}\n              text={\"连接nodes: \" + JSON.stringify(this.getLinkNodes())}\n            />\n            <Text\n              x={20}\n              y={90}\n              text={\"连接ports: \" + JSON.stringify(this.getLinkPorts())}\n            />\n\n            <Portal y={100}>\n              <Input value={bizContext.count} style={{ width: 200 }}></Input>\n              {/* <Modal\n                visible={this.state.modalVisible}\n                onCancel={() => this.setState({ modalVisible: false })}\n              ></Modal> */}\n            </Portal>\n\n            {/* in的port */}\n            {inPorts.map((portData: PortDataType) => (\n              <Port\n                y={70}\n                data={portData}\n                key={portData.label}\n                anchor={{\n                  x: data.x - 20,\n                  y: data.y + 70,\n                }}\n              >\n                <Circle\n                  lineWidth={4}\n                  stroke={color.primary}\n                  fill=\"white\"\n                  r={10}\n                ></Circle>\n              </Port>\n            ))}\n            {/* out的port */}\n            {outPorts.map((portData: PortDataType) => (\n              <Port\n                x={width}\n                y={70}\n                data={portData}\n                key={portData.label}\n                anchor={{\n                  x: data.x + width + 20,\n                  y: data.y + 70,\n                }}\n                link={(target: PortDataType, source: PortDataType) => {\n                  message.info(JSON.stringify(target));\n                  return true;\n                }}\n              >\n                <Circle\n                  lineWidth={4}\n                  stroke={color.primary}\n                  fill=\"white\"\n                  r={10}\n                ></Circle>\n              </Port>\n            ))}\n          </Interactor>\n        )}\n      </ConsumerBridge>\n    );\n  }\n}\n\nexport default BizNode;\n",["37","38"],"/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/BizEdge.tsx",[],[],"/Users/dennis.zhang/Desktop/其它代码库/moa-flow/examples/playground/src/Context.tsx",[],[],{"ruleId":"39","severity":1,"message":"40","line":16,"column":17,"nodeType":"41","messageId":"42","endLine":16,"endColumn":25},{"ruleId":"39","severity":1,"message":"43","line":12,"column":26,"nodeType":"41","messageId":"42","endLine":12,"endColumn":31},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},"@typescript-eslint/no-unused-vars","'setCount' is assigned a value but never used.","Identifier","unusedVar","'Modal' is defined but never used.","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-global-assign","no-unsafe-negation"]