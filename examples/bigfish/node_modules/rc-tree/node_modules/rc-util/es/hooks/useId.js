import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from 'react';
var uuid = 0;
/** @private Note only worked in develop env. Not work in production. */

export function resetUuid() {
  if (process.env.NODE_ENV !== 'production') {
    uuid = 0;
  }
}
export default function useId(id) {
  var _React$useId;

  // Inner id for accessibility usage. Only work in client side
  var _React$useState = React.useState('ssr-id'),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      innerId = _React$useState2[0],
      setInnerId = _React$useState2[1]; // eslint-disable-next-line react-hooks/rules-of-hooks


  var reactNativeId = (_React$useId = React.useId) === null || _React$useId === void 0 ? void 0 : _React$useId.call(React);
  React.useEffect(function () {
    if (!React.useId) {
      var nextId = uuid;
      uuid += 1;
      setInnerId("rc_unique_".concat(nextId));
    }
  }, []); // Developer passed id is single source of truth

  if (id) {
    return id;
  } // Test env always return mock id


  if (process.env.NODE_ENV === 'test') {
    return 'test-id';
  } // Return react native id or inner id


  return reactNativeId || innerId;
}