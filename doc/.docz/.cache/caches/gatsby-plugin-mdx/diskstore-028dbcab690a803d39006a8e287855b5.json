{"expireTime":9007200928162739000,"key":"gatsby-plugin-mdx-entire-payload-57e1303e27966dc398852ec6a13db517-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/admin/code/moa-flow/moa-fow-version-dom/moa-flow/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":138,"offset":139},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":141},"end":{"line":5,"column":29,"offset":169},"indent":[]}},{"type":"import","value":"import { FormattedMessage } from \"@components/FormattedMessage\";\nimport { Playground } from \"@components/Playground\";","position":{"start":{"line":8,"column":1,"offset":172},"end":{"line":9,"column":53,"offset":289},"indent":[1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"API","position":{"start":{"line":11,"column":3,"offset":293},"end":{"line":11,"column":6,"offset":296},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":291},"end":{"line":11,"column":6,"offset":296},"indent":[]}},{"type":"jsx","value":"<FormattedMessage id=\"API\" />","position":{"start":{"line":13,"column":1,"offset":298},"end":{"line":13,"column":30,"offset":327},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"flowProps","position":{"start":{"line":15,"column":4,"offset":332},"end":{"line":15,"column":13,"offset":341},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":329},"end":{"line":15,"column":13,"offset":341},"indent":[]}},{"type":"jsx","value":"<Playground>test</Playground>","position":{"start":{"line":17,"column":1,"offset":343},"end":{"line":17,"column":30,"offset":372},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"link?: (source: D, target: D) => boolean;\ndir: PortDir;\nanchor: { x: number; y: number } | (() => { x: number; y: number });\ndata: Object;","position":{"start":{"line":19,"column":1,"offset":374},"end":{"line":24,"column":4,"offset":523},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"portProps","position":{"start":{"line":26,"column":4,"offset":528},"end":{"line":26,"column":13,"offset":537},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":525},"end":{"line":26,"column":13,"offset":537},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"canvasData?: any; // 画布的数据\nonEvent?: (e: { type: string; data: any }) => void; // 可在外层监听线条连接等事件，但不推荐，\n//在edge内部也可用Port的link属性来定义连接时的行为，尽量将行为内聚在组件model中\n\nonLoad?: (model: FlowModel) => void;\nflowModelRef?: any;\nwidth?: number;\nheight?: number;\ngrid?: number;\nmultiSelect?: boolean; // 是否开启多选\ncomponents?: Record<string, React.FC<any>>;\nmodels?: Record<string, typeof CellModel>;\nlinkEdge?: string; // 当前默认连接的edge","position":{"start":{"line":28,"column":1,"offset":539},"end":{"line":42,"column":4,"offset":961},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"flowModelProps","position":{"start":{"line":44,"column":4,"offset":966},"end":{"line":44,"column":18,"offset":980},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":963},"end":{"line":44,"column":18,"offset":980},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"get height: () => number\nset height: (grid: number) => void\n\nget width: () => number\nset width: (grid: number) => void\n\nget grid: () => number\nset grid: (grid: number) => void\n\nget linkEdge: () => number\nset linkEdge: (linkEdge: string) => void\n\nget scale: () => number\nset scale: (scale: number) => void\n\nget x: () => number\nset x: (x: number) => void\n\nget y: () => number\nset y: (y: number) => void\n\n// 右键菜单的visible\nget contextMenuVisible: () => boolean\nset contextMenuVisible: (visible: boolean) => void\n\n// 获取当前正在连接的port\ngetLinkingPort: () => string\n\n// 获取当前鼠标的[画布坐标]\ngetCursorCoord: (e: React.MouseEvent, isCanvasCoord: boolean = true) => {x: Number, y: number};\n\ncanvasData: Object\n\n// 设置画布数据\nsetCanvasData: (canvasData: CanvasDataType) => void;\n\n// 设置某个Cell的data，包括node，edge，port\nsetCellData = (id: string, data: any, deepMerge: boolean = true) => void;\n\n// 获取某个node连接的所有edge\ngetNodeEdges: (nodeId: string) => string[];\n\n//获取某个port连接的所有port\ngetPortLinkPorts: (portId: string) => string[];\n\n// 获取某个port连接的所有node\ngetPortLinkNodes: (portId: string) => string[]\n\n// 获取某个node连接的所有port\ngetLinkPorts: (nodeId: string) => string[];\n\n// 获取某个node连接的所有node\ngetLinkNodes: (nodeId: string) => string[];\n\n// 删除某个Cell\ndeleCell: (id: string) => string;\n\n// 增添Cell，返回增添cell的id\naddCell: (componentName: string, initOptions?: any) => string\n\n// 手动对port进行连线，返回增添edge的id\nlink: (source: string, target: string) => string\n\n// 调整某个Cell的层级\nmoveTo: (id: string, index: number) => void\n\ngetCellData: (id: string) => Object\n\ngetCellModel: (id: string) => CellModel;\n\ngetPortInstance: (id: string) => React.Component","position":{"start":{"line":46,"column":1,"offset":982},"end":{"line":118,"column":4,"offset":2587},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"cellModelProps","position":{"start":{"line":120,"column":4,"offset":2592},"end":{"line":120,"column":18,"offset":2606},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":2589},"end":{"line":120,"column":18,"offset":2606},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"NodeModel 和 EdgeModel 都是继承于 CellModel","position":{"start":{"line":122,"column":1,"offset":2608},"end":{"line":122,"column":38,"offset":2645},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2608},"end":{"line":122,"column":38,"offset":2645},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"defaultData = (): any => ({\n    id: \"\", // 自动生成\n    component: \"\", // 取注册的component，如没有则自动生成\n    cellType: \"\", // 自动生成\n  });\n\ncontext: FlowModel;\n\ndata: CellDataType;\n\n// 是否被选中\nisSelect: boolean\n\n// 获取外层包裹div/g的元素实例\ngetWrapperRef: () => HTMLDivElement\n\nsetData = (data: any, rec: boolean = true): void\n\n// 获取某个Model合并了原型链上所有父class的defaultData后的defaultData\nstatic getDefaultData: () => Object","position":{"start":{"line":124,"column":1,"offset":2647},"end":{"line":145,"column":4,"offset":3049},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"nodeModelProps","position":{"start":{"line":147,"column":4,"offset":3054},"end":{"line":147,"column":18,"offset":3068},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":3051},"end":{"line":147,"column":18,"offset":3068},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"getLinkNodes: () => string[]\ngetLinkPorts: () => string[]\ngetNodeEdges: () => string[]\n","position":{"start":{"line":149,"column":1,"offset":3070},"end":{"line":154,"column":4,"offset":3168},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"edgeModelProps","position":{"start":{"line":156,"column":4,"offset":3173},"end":{"line":156,"column":18,"offset":3187},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":3170},"end":{"line":156,"column":18,"offset":3187},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"defaultData: () => ({\n  source: \"\", // 连线会自动更改\n  target: \"\", // 连线会自动更改\n});\n\ngetLinkNodesData: () => {source: Object, target: Object}\n\ngetPointAt: (ratio: number) => {x: number, y: number}\n\n// 是否正在连线\nisLinking: () => boolean\n\n// 用作<path>的d属性中\nd: string\n","position":{"start":{"line":158,"column":1,"offset":3189},"end":{"line":174,"column":4,"offset":3453},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":177,"column":1,"offset":3456},"end":{"line":177,"column":31,"offset":3486},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":177,"column":31,"offset":3486}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/admin/code/moa-flow/moa-fow-version-dom/moa-flow/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { FormattedMessage } from \"@components/FormattedMessage\";\nimport { Playground } from \"@components/Playground\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h1>\n    <FormattedMessage id=\"API\" mdxType=\"FormattedMessage\" />\n    <h2 {...{\n      \"id\": \"flowprops\"\n    }}>{`flowProps`}</h2>\n    <Playground __position={1} __code={'test'} __scope={{\n      props,\n      DefaultLayout,\n      FormattedMessage,\n      Playground,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">test</Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`link?: (source: D, target: D) => boolean;\ndir: PortDir;\nanchor: { x: number; y: number } | (() => { x: number; y: number });\ndata: Object;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"portprops\"\n    }}>{`portProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`canvasData?: any; // 画布的数据\nonEvent?: (e: { type: string; data: any }) => void; // 可在外层监听线条连接等事件，但不推荐，\n//在edge内部也可用Port的link属性来定义连接时的行为，尽量将行为内聚在组件model中\n\nonLoad?: (model: FlowModel) => void;\nflowModelRef?: any;\nwidth?: number;\nheight?: number;\ngrid?: number;\nmultiSelect?: boolean; // 是否开启多选\ncomponents?: Record<string, React.FC<any>>;\nmodels?: Record<string, typeof CellModel>;\nlinkEdge?: string; // 当前默认连接的edge\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"flowmodelprops\"\n    }}>{`flowModelProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`get height: () => number\nset height: (grid: number) => void\n\nget width: () => number\nset width: (grid: number) => void\n\nget grid: () => number\nset grid: (grid: number) => void\n\nget linkEdge: () => number\nset linkEdge: (linkEdge: string) => void\n\nget scale: () => number\nset scale: (scale: number) => void\n\nget x: () => number\nset x: (x: number) => void\n\nget y: () => number\nset y: (y: number) => void\n\n// 右键菜单的visible\nget contextMenuVisible: () => boolean\nset contextMenuVisible: (visible: boolean) => void\n\n// 获取当前正在连接的port\ngetLinkingPort: () => string\n\n// 获取当前鼠标的[画布坐标]\ngetCursorCoord: (e: React.MouseEvent, isCanvasCoord: boolean = true) => {x: Number, y: number};\n\ncanvasData: Object\n\n// 设置画布数据\nsetCanvasData: (canvasData: CanvasDataType) => void;\n\n// 设置某个Cell的data，包括node，edge，port\nsetCellData = (id: string, data: any, deepMerge: boolean = true) => void;\n\n// 获取某个node连接的所有edge\ngetNodeEdges: (nodeId: string) => string[];\n\n//获取某个port连接的所有port\ngetPortLinkPorts: (portId: string) => string[];\n\n// 获取某个port连接的所有node\ngetPortLinkNodes: (portId: string) => string[]\n\n// 获取某个node连接的所有port\ngetLinkPorts: (nodeId: string) => string[];\n\n// 获取某个node连接的所有node\ngetLinkNodes: (nodeId: string) => string[];\n\n// 删除某个Cell\ndeleCell: (id: string) => string;\n\n// 增添Cell，返回增添cell的id\naddCell: (componentName: string, initOptions?: any) => string\n\n// 手动对port进行连线，返回增添edge的id\nlink: (source: string, target: string) => string\n\n// 调整某个Cell的层级\nmoveTo: (id: string, index: number) => void\n\ngetCellData: (id: string) => Object\n\ngetCellModel: (id: string) => CellModel;\n\ngetPortInstance: (id: string) => React.Component\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"cellmodelprops\"\n    }}>{`cellModelProps`}</h2>\n    <p>{`NodeModel 和 EdgeModel 都是继承于 CellModel`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`defaultData = (): any => ({\n    id: \"\", // 自动生成\n    component: \"\", // 取注册的component，如没有则自动生成\n    cellType: \"\", // 自动生成\n  });\n\ncontext: FlowModel;\n\ndata: CellDataType;\n\n// 是否被选中\nisSelect: boolean\n\n// 获取外层包裹div/g的元素实例\ngetWrapperRef: () => HTMLDivElement\n\nsetData = (data: any, rec: boolean = true): void\n\n// 获取某个Model合并了原型链上所有父class的defaultData后的defaultData\nstatic getDefaultData: () => Object\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nodemodelprops\"\n    }}>{`nodeModelProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`getLinkNodes: () => string[]\ngetLinkPorts: () => string[]\ngetNodeEdges: () => string[]\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"edgemodelprops\"\n    }}>{`edgeModelProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`defaultData: () => ({\n  source: \"\", // 连线会自动更改\n  target: \"\", // 连线会自动更改\n});\n\ngetLinkNodesData: () => {source: Object, target: Object}\n\ngetPointAt: (ratio: number) => {x: number, y: number}\n\n// 是否正在连线\nisLinking: () => boolean\n\n// 用作<path>的d属性中\nd: string\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}