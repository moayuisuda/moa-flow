{"expireTime":9007200928146207000,"key":"gatsby-plugin-mdx-entire-payload-bb9f12739c3a5b67ff0c8d97af897af9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/admin/code/moa-flow/moa-fow-version-dom/moa-flow/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":138,"offset":139},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":141},"end":{"line":5,"column":29,"offset":169},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";\nimport { FormattedMessage } from \"@components/FormattedMessage\";","position":{"start":{"line":8,"column":1,"offset":172},"end":{"line":9,"column":65,"offset":271},"indent":[1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"API","position":{"start":{"line":11,"column":3,"offset":275},"end":{"line":11,"column":6,"offset":278},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":273},"end":{"line":11,"column":6,"offset":278},"indent":[]}},{"type":"jsx","value":"<FormattedMessage id=\"API\" />\nmoa-flow 具有完善的 ts 支持，可以直接在代码中看到对应的标注，此文档暂仅作参考","position":{"start":{"line":13,"column":1,"offset":280},"end":{"line":14,"column":46,"offset":355},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"flowProps","position":{"start":{"line":16,"column":4,"offset":360},"end":{"line":16,"column":13,"offset":369},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":357},"end":{"line":16,"column":13,"offset":369},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"link?: (source: D, target: D) => boolean;\ndir: PortDir;\nanchor: { x: number; y: number } | (() => { x: number; y: number });\ndata: Object;","position":{"start":{"line":18,"column":1,"offset":371},"end":{"line":23,"column":4,"offset":520},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"portProps","position":{"start":{"line":25,"column":4,"offset":525},"end":{"line":25,"column":13,"offset":534},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":522},"end":{"line":25,"column":13,"offset":534},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"canvasData?: any; // 画布的数据\nonEvent?: (e: { type: string; data: any }) => void; // 可在外层监听线条连接等事件，但不推荐，\n//在edge内部也可用Port的link属性来定义连接时的行为，尽量将行为内聚在组件model中\n\nonLoad?: (model: FlowModel) => void;\nflowModelRef?: any;\nwidth?: number;\nheight?: number;\ngrid?: number;\nmultiSelect?: boolean; // 是否开启多选\ncomponents?: Record<string, React.FC<any>>;\nmodels?: Record<string, typeof CellModel>;\nlinkEdge?: string; // 当前默认连接的edge","position":{"start":{"line":27,"column":1,"offset":536},"end":{"line":41,"column":4,"offset":958},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"flowModelProps","position":{"start":{"line":43,"column":4,"offset":963},"end":{"line":43,"column":18,"offset":977},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":960},"end":{"line":43,"column":18,"offset":977},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"get height: () => number\nset height: (grid: number) => void\n\nget width: () => number\nset width: (grid: number) => void\n\nget grid: () => number\nset grid: (grid: number) => void\n\nget linkEdge: () => number\nset linkEdge: (linkEdge: string) => void\n\nget scale: () => number\nset scale: (scale: number) => void\n\nget x: () => number\nset x: (x: number) => void\n\nget y: () => number\nset y: (y: number) => void\n\n// 右键菜单的visible\nget contextMenuVisible: () => boolean\nset contextMenuVisible: (visible: boolean) => void\n\n// 获取当前正在连接的port\ngetLinkingPort: () => string\n\n// 获取当前鼠标的[画布坐标]\ngetCursorCoord: (e: React.MouseEvent, isCanvasCoord: boolean = true) => {x: Number, y: number};\n\ncanvasData: Object\n\n// 设置画布数据\nsetCanvasData: (canvasData: CanvasDataType) => void;\n\n// 设置某个Cell的data，包括node，edge，port\nsetCellData = (id: string, data: any, deepMerge: boolean = true) => void;\n\n// 获取某个node连接的所有edge\ngetNodeEdges: (nodeId: string) => string[];\n\n//获取某个port连接的所有port\ngetPortLinkPorts: (portId: string) => string[];\n\n// 获取某个port连接的所有node\ngetPortLinkNodes: (portId: string) => string[]\n\n// 获取某个node连接的所有port\ngetLinkPorts: (nodeId: string) => string[];\n\n// 获取某个node连接的所有node\ngetLinkNodes: (nodeId: string) => string[];\n\n// 删除某个Cell\ndeleCell: (id: string) => string;\n\n// 增添Cell，返回增添cell的id\naddCell: (componentName: string, initOptions?: any) => string\n\n// 手动对port进行连线，返回增添edge的id\nlink: (source: string, target: string) => string\n\n// 调整某个Cell的层级\nmoveTo: (id: string, index: number) => void\n\ngetCellData: (id: string) => Object\n\ngetCellModel: (id: string) => CellModel;\n\ngetPortInstance: (id: string) => React.Component","position":{"start":{"line":45,"column":1,"offset":979},"end":{"line":117,"column":4,"offset":2584},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"cellModelProps","position":{"start":{"line":119,"column":4,"offset":2589},"end":{"line":119,"column":18,"offset":2603},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2586},"end":{"line":119,"column":18,"offset":2603},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"NodeModel 和 EdgeModel 都是继承于 CellModel","position":{"start":{"line":121,"column":1,"offset":2605},"end":{"line":121,"column":38,"offset":2642},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2605},"end":{"line":121,"column":38,"offset":2642},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"defaultData = (): any => ({\n    id: \"\", // 自动生成\n    component: \"\", // 取注册的component，如没有则自动生成\n    cellType: \"\", // 自动生成\n  });\n\ncontext: FlowModel;\n\ndata: CellDataType;\n\n// 是否被选中\nisSelect: boolean\n\n// 获取外层包裹div/g的元素实例\ngetWrapperRef: () => HTMLDivElement\n\nsetData = (data: any, rec: boolean = true): void\n\n// 获取某个Model合并了原型链上所有父class的defaultData后的defaultData\nstatic getDefaultData: () => Object","position":{"start":{"line":123,"column":1,"offset":2644},"end":{"line":144,"column":4,"offset":3046},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"nodeModelProps","position":{"start":{"line":146,"column":4,"offset":3051},"end":{"line":146,"column":18,"offset":3065},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":3048},"end":{"line":146,"column":18,"offset":3065},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"getLinkNodes: () => string[]\ngetLinkPorts: () => string[]\ngetNodeEdges: () => string[]\n","position":{"start":{"line":148,"column":1,"offset":3067},"end":{"line":153,"column":4,"offset":3165},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"edgeModelProps","position":{"start":{"line":155,"column":4,"offset":3170},"end":{"line":155,"column":18,"offset":3184},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":3167},"end":{"line":155,"column":18,"offset":3184},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"defaultData: () => ({\n  source: \"\", // 连线会自动更改\n  target: \"\", // 连线会自动更改\n});\n\ngetLinkNodesData: () => {source: Object, target: Object}\n\ngetPointAt: (ratio: number) => {x: number, y: number}\n\n// 是否正在连线\nisLinking: () => boolean\n\n// 用作<path>的d属性中\nd: string\n","position":{"start":{"line":157,"column":1,"offset":3186},"end":{"line":173,"column":4,"offset":3450},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":176,"column":1,"offset":3453},"end":{"line":176,"column":31,"offset":3483},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":176,"column":31,"offset":3483}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/admin/code/moa-flow/moa-fow-version-dom/moa-flow/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nimport { FormattedMessage } from \"@components/FormattedMessage\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h1>\n    <FormattedMessage id=\"API\" mdxType=\"FormattedMessage\" />\nmoa-flow 具有完善的 ts 支持，可以直接在代码中看到对应的标注，此文档暂仅作参考\n    <h2 {...{\n      \"id\": \"flowprops\"\n    }}>{`flowProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`link?: (source: D, target: D) => boolean;\ndir: PortDir;\nanchor: { x: number; y: number } | (() => { x: number; y: number });\ndata: Object;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"portprops\"\n    }}>{`portProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`canvasData?: any; // 画布的数据\nonEvent?: (e: { type: string; data: any }) => void; // 可在外层监听线条连接等事件，但不推荐，\n//在edge内部也可用Port的link属性来定义连接时的行为，尽量将行为内聚在组件model中\n\nonLoad?: (model: FlowModel) => void;\nflowModelRef?: any;\nwidth?: number;\nheight?: number;\ngrid?: number;\nmultiSelect?: boolean; // 是否开启多选\ncomponents?: Record<string, React.FC<any>>;\nmodels?: Record<string, typeof CellModel>;\nlinkEdge?: string; // 当前默认连接的edge\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"flowmodelprops\"\n    }}>{`flowModelProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`get height: () => number\nset height: (grid: number) => void\n\nget width: () => number\nset width: (grid: number) => void\n\nget grid: () => number\nset grid: (grid: number) => void\n\nget linkEdge: () => number\nset linkEdge: (linkEdge: string) => void\n\nget scale: () => number\nset scale: (scale: number) => void\n\nget x: () => number\nset x: (x: number) => void\n\nget y: () => number\nset y: (y: number) => void\n\n// 右键菜单的visible\nget contextMenuVisible: () => boolean\nset contextMenuVisible: (visible: boolean) => void\n\n// 获取当前正在连接的port\ngetLinkingPort: () => string\n\n// 获取当前鼠标的[画布坐标]\ngetCursorCoord: (e: React.MouseEvent, isCanvasCoord: boolean = true) => {x: Number, y: number};\n\ncanvasData: Object\n\n// 设置画布数据\nsetCanvasData: (canvasData: CanvasDataType) => void;\n\n// 设置某个Cell的data，包括node，edge，port\nsetCellData = (id: string, data: any, deepMerge: boolean = true) => void;\n\n// 获取某个node连接的所有edge\ngetNodeEdges: (nodeId: string) => string[];\n\n//获取某个port连接的所有port\ngetPortLinkPorts: (portId: string) => string[];\n\n// 获取某个port连接的所有node\ngetPortLinkNodes: (portId: string) => string[]\n\n// 获取某个node连接的所有port\ngetLinkPorts: (nodeId: string) => string[];\n\n// 获取某个node连接的所有node\ngetLinkNodes: (nodeId: string) => string[];\n\n// 删除某个Cell\ndeleCell: (id: string) => string;\n\n// 增添Cell，返回增添cell的id\naddCell: (componentName: string, initOptions?: any) => string\n\n// 手动对port进行连线，返回增添edge的id\nlink: (source: string, target: string) => string\n\n// 调整某个Cell的层级\nmoveTo: (id: string, index: number) => void\n\ngetCellData: (id: string) => Object\n\ngetCellModel: (id: string) => CellModel;\n\ngetPortInstance: (id: string) => React.Component\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"cellmodelprops\"\n    }}>{`cellModelProps`}</h2>\n    <p>{`NodeModel 和 EdgeModel 都是继承于 CellModel`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`defaultData = (): any => ({\n    id: \"\", // 自动生成\n    component: \"\", // 取注册的component，如没有则自动生成\n    cellType: \"\", // 自动生成\n  });\n\ncontext: FlowModel;\n\ndata: CellDataType;\n\n// 是否被选中\nisSelect: boolean\n\n// 获取外层包裹div/g的元素实例\ngetWrapperRef: () => HTMLDivElement\n\nsetData = (data: any, rec: boolean = true): void\n\n// 获取某个Model合并了原型链上所有父class的defaultData后的defaultData\nstatic getDefaultData: () => Object\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nodemodelprops\"\n    }}>{`nodeModelProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`getLinkNodes: () => string[]\ngetLinkPorts: () => string[]\ngetNodeEdges: () => string[]\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"edgemodelprops\"\n    }}>{`edgeModelProps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`defaultData: () => ({\n  source: \"\", // 连线会自动更改\n  target: \"\", // 连线会自动更改\n});\n\ngetLinkNodesData: () => {source: Object, target: Object}\n\ngetPointAt: (ratio: number) => {x: number, y: number}\n\n// 是否正在连线\nisLinking: () => boolean\n\n// 用作<path>的d属性中\nd: string\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}