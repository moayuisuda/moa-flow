import { fromValues } from '../../../../_gl-matrix@3.4.3@gl-matrix/esm/vec3.js';
import { fromValues as fromValues$1 } from '../../../../_gl-matrix@3.4.3@gl-matrix/esm/quat.js';
import { create } from '../../../../_gl-matrix@3.4.3@gl-matrix/esm/mat4.js';

/**
 * do RTS transformation for 2D/3D
 */

var Transform =
/** @class */
function () {
  function Transform() {
    this.dirtyFlag = false;
    this.localDirtyFlag = false;
    this.frozen = false;
    /**
     * local space RTS
     */

    this.localPosition = fromValues(0, 0, 0);
    this.localRotation = fromValues$1(0, 0, 0, 1);
    this.localScale = fromValues(1, 1, 1);
    this.localTransform = create();
    /**
     * world space RTS
     */

    this.position = fromValues(0, 0, 0);
    this.rotation = fromValues$1(0, 0, 0, 1);
    this.scaling = fromValues(1, 1, 1);
    this.worldTransform = create();
    /**
     * the origin of scaling and rotation
     */

    this.origin = fromValues(0, 0, 0); // /**
    //  * apply lerp to RTS, which can be used in camera animation
    //  *
    //  * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html
    //  */
    // lerp = (() => {
    //   const aS = vec3.create();
    //   const aR = quat.create();
    //   const aT = vec3.create();
    //   const bS = vec3.create();
    //   const bR = quat.create();
    //   const bT = vec3.create();
    //   return (a: Transform, b: Transform, t: number) => {
    //     this.setDirty();
    //     mat4.getScaling(aS, a.worldTransform);
    //     mat4.getTranslation(aT, a.worldTransform);
    //     mat4.getRotation(aR, a.worldTransform);
    //     mat4.getScaling(bS, b.worldTransform);
    //     mat4.getTranslation(bT, b.worldTransform);
    //     mat4.getRotation(bR, b.worldTransform);
    //     vec3.lerp(this.localScale, aS, bS, t);
    //     quat.slerp(this.localRotation, aR, bR, t);
    //     vec3.lerp(this.localPosition, aT, bT, t);
    //   };
    // })();
  }

  Transform.tag = 'c-transform';
  return Transform;
}();

export { Transform };
