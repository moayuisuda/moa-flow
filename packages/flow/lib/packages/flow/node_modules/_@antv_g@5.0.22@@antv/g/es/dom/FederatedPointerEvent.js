import { __extends } from '../../../../_tslib@2.4.0@tslib/tslib.es6.js';
import { FederatedMouseEvent } from './FederatedMouseEvent.js';

var FederatedPointerEvent =
/** @class */
function (_super) {
  __extends(FederatedPointerEvent, _super);

  function FederatedPointerEvent() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    /**
     * The width of the pointer's contact along the x-axis, measured in CSS pixels.
     * radiusX of TouchEvents will be represented by this value.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width
     */


    _this.width = 0;
    /**
     * The height of the pointer's contact along the y-axis, measured in CSS pixels.
     * radiusY of TouchEvents will be represented by this value.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height
     */

    _this.height = 0;
    /**
     * Indicates whether or not the pointer device that created the event is the primary pointer.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary
     */

    _this.isPrimary = false;
    return _this;
  }
  /**
   * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/getCoalescedEvents
   */


  FederatedPointerEvent.prototype.getCoalescedEvents = function () {
    if (this.type === 'pointermove' || this.type === 'mousemove' || this.type === 'touchmove') {
      return [this];
    }

    return [];
  };
  /**
   * @see https://chromestatus.com/feature/5765569655603200
   */


  FederatedPointerEvent.prototype.getPredictedEvents = function () {
    throw new Error('getPredictedEvents is not supported!');
  };

  return FederatedPointerEvent;
}(FederatedMouseEvent);

export { FederatedPointerEvent };
