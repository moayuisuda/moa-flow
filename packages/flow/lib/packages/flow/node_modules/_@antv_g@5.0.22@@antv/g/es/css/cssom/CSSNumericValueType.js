import { DCHECK_NE, DCHECK_EQ } from '../../utils/assert.js';
import '../../../../../_inversify@5.1.1@inversify/lib/inversify.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/core.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/inversify/index.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/container.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/register.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/index.js';
import { UnitType } from './types.js';
import './CSSColorValue.js';
import './CSSKeywordValue.js';
import './CSSMathOperator.js';
import './CSSMathInvert.js';
import './CSSMathMax.js';
import './CSSMathMin.js';
import './CSSMathNegate.js';
import './CSSMathProduct.js';
import './CSSMathSum.js';
import './CSSMathValue.js';
import './CSSMathVariadic.js';
import './CSSNumericValue.js';
import './CSSRGB.js';
import './CSSGradientValue.js';
import './CSSStyleValue.js';
import './CSSTransformValue.js';
import './CSSTranslate.js';
import './CSSUnitValue.js';
import '../parser/dimension.js';
import '../../types.js';
import '../../shapes/Rectangle.js';
import '../parser/filter.js';
import '../parser/transform.js';
import '../properties/CSSPropertyLengthOrPercentage.js';
import '../properties/CSSPropertyLocalPosition.js';
import '../properties/CSSPropertyOpacity.js';
import '../properties/CSSPropertyColor.js';
import '../properties/CSSPropertyFilter.js';
import '../properties/CSSPropertyLineDash.js';
import '../properties/CSSPropertyShadowBlur.js';
import '../properties/CSSPropertyOffsetPath.js';
import '../properties/CSSPropertyOffsetDistance.js';
import '../properties/CSSPropertyAnchor.js';
import '../properties/CSSPropertyZIndex.js';
import '../properties/CSSPropertyTransform.js';
import '../properties/CSSPropertyTransformOrigin.js';
import '../properties/CSSPropertyPath.js';
import '../properties/CSSPropertyPoints.js';
import '../properties/CSSPropertyClipPath.js';
import '../properties/CSSPropertyText.js';
import '../properties/CSSPropertyTextTransform.js';
import '../StyleValueRegistry.js';
import '../LayoutRegistry.js';
import '../../utils/custom-easing.js';

var BaseType;

(function (BaseType) {
  BaseType[BaseType["kLength"] = 0] = "kLength";
  BaseType[BaseType["kAngle"] = 1] = "kAngle";
  BaseType[BaseType["kTime"] = 2] = "kTime";
  BaseType[BaseType["kFrequency"] = 3] = "kFrequency";
  BaseType[BaseType["kResolution"] = 4] = "kResolution";
  BaseType[BaseType["kFlex"] = 5] = "kFlex";
  BaseType[BaseType["kPercent"] = 6] = "kPercent";
  BaseType[BaseType["kNumBaseTypes"] = 7] = "kNumBaseTypes";
})(BaseType || (BaseType = {}));

function unitTypeToBaseType(unit) {
  DCHECK_NE(unit, UnitType.kNumber);

  switch (unit) {
    case UnitType.kEms:
    case UnitType.kExs:
    case UnitType.kPixels:
    case UnitType.kCentimeters:
    case UnitType.kMillimeters:
    case UnitType.kQuarterMillimeters:
    case UnitType.kInches:
    case UnitType.kPoints:
    case UnitType.kPicas:
    case UnitType.kUserUnits:
    case UnitType.kViewportWidth:
    case UnitType.kViewportHeight:
    case UnitType.kViewportInlineSize:
    case UnitType.kViewportBlockSize:
    case UnitType.kViewportMin:
    case UnitType.kViewportMax:
    case UnitType.kSmallViewportWidth:
    case UnitType.kSmallViewportHeight:
    case UnitType.kSmallViewportInlineSize:
    case UnitType.kSmallViewportBlockSize:
    case UnitType.kSmallViewportMin:
    case UnitType.kSmallViewportMax:
    case UnitType.kLargeViewportWidth:
    case UnitType.kLargeViewportHeight:
    case UnitType.kLargeViewportInlineSize:
    case UnitType.kLargeViewportBlockSize:
    case UnitType.kLargeViewportMin:
    case UnitType.kLargeViewportMax:
    case UnitType.kDynamicViewportWidth:
    case UnitType.kDynamicViewportHeight:
    case UnitType.kDynamicViewportInlineSize:
    case UnitType.kDynamicViewportBlockSize:
    case UnitType.kDynamicViewportMin:
    case UnitType.kDynamicViewportMax:
    case UnitType.kContainerWidth:
    case UnitType.kContainerHeight:
    case UnitType.kContainerInlineSize:
    case UnitType.kContainerBlockSize:
    case UnitType.kContainerMin:
    case UnitType.kContainerMax:
    case UnitType.kRems:
    case UnitType.kChs:
      return BaseType.kLength;

    case UnitType.kMilliseconds:
    case UnitType.kSeconds:
      return BaseType.kTime;

    case UnitType.kDegrees:
    case UnitType.kRadians:
    case UnitType.kGradians:
    case UnitType.kTurns:
      return BaseType.kAngle;

    case UnitType.kHertz:
    case UnitType.kKilohertz:
      return BaseType.kFrequency;

    case UnitType.kDotsPerPixel:
    case UnitType.kDotsPerInch:
    case UnitType.kDotsPerCentimeter:
      return BaseType.kResolution;

    case UnitType.kFraction:
      return BaseType.kFlex;

    case UnitType.kPercentage:
      return BaseType.kPercent;

    default:
      return BaseType.kLength;
  }
}
function baseTypeToString(baseType) {
  switch (baseType) {
    case BaseType.kLength:
      return 'length';

    case BaseType.kAngle:
      return 'angle';

    case BaseType.kTime:
      return 'time';

    case BaseType.kFrequency:
      return 'frequency';

    case BaseType.kResolution:
      return 'resolution';

    case BaseType.kFlex:
      return 'flex';

    case BaseType.kPercent:
      return 'percent';
  }

  return '';
}

var CSSNumericValueType =
/** @class */
function () {
  function CSSNumericValueType(unit, exponent) {
    if (unit === void 0) {
      unit = UnitType.kNumber;
    }

    if (exponent === void 0) {
      exponent = 1;
    }

    this.exponents = [];
    this.numNonZeroEntries = 0;
    this.percentHint = BaseType.kPercent;
    this.hasPercentHint = false;
    this.exponents = new Array(BaseType.kNumBaseTypes).fill(0);

    if (unit !== UnitType.kNumber) {
      this.setExponent(unitTypeToBaseType(unit), exponent);
    }
  }

  CSSNumericValueType.prototype.applyPercentHint = function (hint) {
    DCHECK_NE(hint, BaseType.kPercent);
    this.setExponent(hint, this.exponent(hint) + this.exponent(BaseType.kPercent));
    this.setExponent(BaseType.kPercent, 0);
    this.percentHint = hint;
    this.hasPercentHint = true;
  };

  CSSNumericValueType.prototype.hasNonZeroEntries = function () {
    return this.numNonZeroEntries > 0;
  };

  CSSNumericValueType.prototype.isOnlyNonZeroEntry = function (baseType, value) {
    DCHECK_NE(value, 0);
    return this.numNonZeroEntries === 1 && this.exponent(baseType) === value;
  };

  CSSNumericValueType.prototype.exponent = function (type) {
    return this.exponents[type];
  };

  CSSNumericValueType.prototype.setExponent = function (type, newValue) {
    var oldValue = this.exponents[type];

    if (oldValue == 0 && newValue !== 0) {
      this.numNonZeroEntries++;
    } else if (oldValue !== 0 && newValue == 0) {
      this.numNonZeroEntries--;
    }

    this.exponents[type] = newValue;
  };

  CSSNumericValueType.negateExponents = function (type) {
    type.exponents.forEach(function (v) {
      return v *= -1;
    });
    return type;
  };

  CSSNumericValueType.prototype.matchesBaseType = function (baseType) {
    DCHECK_NE(baseType, BaseType.kPercent);
    return this.isOnlyNonZeroEntry(baseType, 1) && !this.hasPercentHint;
  };

  CSSNumericValueType.prototype.matchesPercentage = function () {
    return this.isOnlyNonZeroEntry(BaseType.kPercent, 1);
  };

  CSSNumericValueType.prototype.matchesBaseTypePercentage = function (baseType) {
    DCHECK_NE(baseType, BaseType.kPercent);
    return this.isOnlyNonZeroEntry(baseType, 1) || this.isOnlyNonZeroEntry(BaseType.kPercent, 1);
  };

  CSSNumericValueType.prototype.matchesNumber = function () {
    return !this.hasNonZeroEntries() && !this.hasPercentHint;
  };

  CSSNumericValueType.prototype.matchesNumberPercentage = function () {
    return !this.hasNonZeroEntries() || this.isOnlyNonZeroEntry(BaseType.kPercent, 1);
  };

  CSSNumericValueType.add = function (type1, type2, error) {
    if (type1.hasPercentHint && type2.hasPercentHint && type1.percentHint != type2.percentHint) {
      return type1;
    }

    if (type1.hasPercentHint) type2.applyPercentHint(type1.percentHint);else if (type2.hasPercentHint) type1.applyPercentHint(type2.percentHint);
    DCHECK_EQ(type1.percentHint, type2.percentHint); // Match up base types. Try to use the percent hint to match up any
    // differences.

    for (var i = 0; i < BaseType.kNumBaseTypes; ++i) {
      var base_type = i;

      if (type1.exponents[i] !== type2.exponents[i]) {
        if (base_type !== BaseType.kPercent) {
          type1.applyPercentHint(base_type);
          type2.applyPercentHint(base_type);
        }

        if (type1.exponents[i] !== type2.exponents[i]) {
          return type1;
        }
      }
    }
    return type1;
  };

  CSSNumericValueType.multiply = function (type1, type2, error) {
    if (type1.hasPercentHint && type2.hasPercentHint && type1.percentHint != type2.percentHint) {
      return type1;
    }

    if (type1.hasPercentHint) type2.applyPercentHint(type1.percentHint);else if (type2.hasPercentHint) type1.applyPercentHint(type2.percentHint);

    for (var i = 0; i < BaseType.kNumBaseTypes; ++i) {
      var base_type = i;
      type1.setExponent(base_type, type1.exponent(base_type) + type2.exponent(base_type));
    }
    return type1;
  };

  return CSSNumericValueType;
}();

export { BaseType, CSSNumericValueType, baseTypeToString, unitTypeToBaseType };
