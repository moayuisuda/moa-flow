import isNumber from '../../../../_lodash-es@4.17.21@lodash-es/isNumber.js';
import isString from '../../../../_lodash-es@4.17.21@lodash-es/isString.js';

var genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];
function toFontString(attributes) {
  var fontSize = attributes.fontSize,
      fontFamily = attributes.fontFamily,
      fontStyle = attributes.fontStyle,
      fontVariant = attributes.fontVariant,
      fontWeight = attributes.fontWeight; // build canvas api font setting from individual components. Convert a numeric this.fontSize to px

  var fontSizeString = isNumber(fontSize) ? "".concat(fontSize, "px") : fontSize.toString(); // Clean-up fontFamily property by quoting each font name
  // this will support font names with spaces
  // @ts-ignore

  var fontFamilies = isString(fontFamily) ? fontFamily.split(',') : [fontFamily.value];

  for (var i = fontFamilies.length - 1; i >= 0; i--) {
    // Trim any extra white-space
    var fontFamily_1 = fontFamilies[i].trim(); // Check if font already contains strings

    if (!/([\"\'])[^\'\"]+\1/.test(fontFamily_1) && genericFontFamilies.indexOf(fontFamily_1) < 0) {
      fontFamily_1 = "\"".concat(fontFamily_1, "\"");
    }

    fontFamilies[i] = fontFamily_1;
  }

  return "".concat(fontStyle, " ").concat(fontVariant, " ").concat(fontWeight, " ").concat(fontSizeString, " ").concat(fontFamilies.join(','));
}

export { toFontString };
