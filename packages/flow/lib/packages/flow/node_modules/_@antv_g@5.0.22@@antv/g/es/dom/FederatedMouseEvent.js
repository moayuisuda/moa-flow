import { __extends } from '../../../../_tslib@2.4.0@tslib/tslib.es6.js';
import { FederatedEvent } from './FederatedEvent.js';
import { Point } from '../shapes/Point.js';

var FederatedMouseEvent =
/** @class */
function (_super) {
  __extends(FederatedMouseEvent, _super);

  function FederatedMouseEvent() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    /**
     * The coordinates of the mouse event relative to the canvas.
     */


    _this.client = new Point();
    /**
     * The movement in this pointer relative to the last `mousemove` event.
     */

    _this.movement = new Point();
    /**
     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is
     * not supported at the moment.
     */

    _this.offset = new Point();
    /**
     * The pointer coordinates in world space.
     */

    _this.global = new Point();
    /**
     * The pointer coordinates in sceen space.
     */

    _this.screen = new Point();
    return _this;
  }

  Object.defineProperty(FederatedMouseEvent.prototype, "clientX", {
    get: function get() {
      return this.client.x;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "clientY", {
    get: function get() {
      return this.client.y;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "movementX", {
    get: function get() {
      return this.movement.x;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "movementY", {
    get: function get() {
      return this.movement.y;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "offsetX", {
    get: function get() {
      return this.offset.x;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "offsetY", {
    get: function get() {
      return this.offset.y;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "globalX", {
    get: function get() {
      return this.global.x;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "globalY", {
    get: function get() {
      return this.global.y;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "screenX", {
    get: function get() {
      return this.screen.x;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FederatedMouseEvent.prototype, "screenY", {
    get: function get() {
      return this.screen.y;
    },
    enumerable: false,
    configurable: true
  });

  FederatedMouseEvent.prototype.getModifierState = function (key) {
    return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);
  };

  FederatedMouseEvent.prototype.initMouseEvent = function () {
    throw new Error('Method not implemented.');
  };

  return FederatedMouseEvent;
}(FederatedEvent);

export { FederatedMouseEvent };
