import { UnitType, Nested, ParenLess, UnitCategory } from './types.js';

// import type { CSSValue } from '../CSSValue';

var data = [{
  name: 'em',
  unit_type: UnitType.kEms
}, // {
//   name: 'ex',
//   unit_type: UnitType.kExs,
// },
{
  name: 'px',
  unit_type: UnitType.kPixels
}, // {
//   name: "cm",
//   unit_type: UnitType.kCentimeters,
// },
// {
//   name: "mm",
//   unit_type: UnitType.kMillimeters,
// },
// {
//   name: "q",
//   unit_type: UnitType.kQuarterMillimeters,
// },
// {
//   name: "in",
//   unit_type: UnitType.kInches,
// },
// {
//   name: "pt",
//   unit_type: UnitType.kPoints,
// },
// {
//   name: "pc",
//   unit_type: UnitType.kPicas,
// },
{
  name: 'deg',
  unit_type: UnitType.kDegrees
}, {
  name: 'rad',
  unit_type: UnitType.kRadians
}, {
  name: 'grad',
  unit_type: UnitType.kGradians
}, {
  name: 'ms',
  unit_type: UnitType.kMilliseconds
}, {
  name: 's',
  unit_type: UnitType.kSeconds
}, // {
//   name: "hz",
//   unit_type: UnitType.kHertz,
// },
// {
//   name: "khz",
//   unit_type: UnitType.kKilohertz,
// },
// {
//   name: "dpi",
//   unit_type: "kDotsPerInch",
// },
// {
//   name: "dpcm",
//   unit_type: "kDotsPerCentimeter",
// },
// {
//   name: "dppx",
//   unit_type: "kDotsPerPixel",
// },
// {
//   name: "x",
//   unit_type: "kDotsPerPixel",
// },
// {
//   name: "vw",
//   unit_type: "kViewportWidth",
// },
// {
//   name: "vh",
//   unit_type: "kViewportHeight",
// },
// {
//   name: "vi",
//   unit_type: "kViewportInlineSize",
// },
// {
//   name: "vb",
//   unit_type: "kViewportBlockSize",
// },
// {
//   name: "vmin",
//   unit_type: UnitType.kViewportMin,
// },
// {
//   name: "vmax",
//   unit_type: UnitType.kViewportMax,
// },
// {
//   name: "svw",
//   unit_type: "kSmallViewportWidth",
// },
// {
//   name: "svh",
//   unit_type: "kSmallViewportHeight",
// },
// {
//   name: "svi",
//   unit_type: "kSmallViewportInlineSize",
// },
// {
//   name: "svb",
//   unit_type: "kSmallViewportBlockSize",
// },
// {
//   name: "svmin",
//   unit_type: "kSmallViewportMin",
// },
// {
//   name: "svmax",
//   unit_type: "kSmallViewportMax",
// },
// {
//   name: "lvw",
//   unit_type: "kLargeViewportWidth",
// },
// {
//   name: "lvh",
//   unit_type: "kLargeViewportHeight",
// },
// {
//   name: "lvi",
//   unit_type: "kLargeViewportInlineSize",
// },
// {
//   name: "lvb",
//   unit_type: "kLargeViewportBlockSize",
// },
// {
//   name: "lvmin",
//   unit_type: UnitType.kLargeViewportMin,
// },
// {
//   name: "lvmax",
//   unit_type: UnitType.kLargeViewportMax,
// },
// {
//   name: "dvw",
//   unit_type: UnitType.kDynamicViewportWidth,
// },
// {
//   name: "dvh",
//   unit_type: UnitType.kDynamicViewportHeight,
// },
// {
//   name: "dvi",
//   unit_type: UnitType.kDynamicViewportInlineSize,
// },
// {
//   name: "dvb",
//   unit_type: UnitType.kDynamicViewportBlockSize,
// },
// {
//   name: "dvmin",
//   unit_type: UnitType.kDynamicViewportMin,
// },
// {
//   name: "dvmax",
//   unit_type: UnitType.kDynamicViewportMax,
// },
// {
//   name: "cqw",
//   unit_type: UnitType.kContainerWidth,
// },
// {
//   name: "cqh",
//   unit_type: UnitType.kContainerHeight,
// },
// {
//   name: "cqi",
//   unit_type: UnitType.kContainerInlineSize,
// },
// {
//   name: "cqb",
//   unit_type: UnitType.kContainerBlockSize,
// },
// {
//   name: "cqmin",
//   unit_type: UnitType.kContainerMin,
// },
// {
//   name: "cqmax",
//   unit_type: UnitType.kContainerMax,
// },
{
  name: 'rem',
  unit_type: UnitType.kRems
}, // {
//   name: 'fr',
//   unit_type: UnitType.kFraction,
// },
{
  name: 'turn',
  unit_type: UnitType.kTurns
} // {
//   name: 'ch',
//   unit_type: UnitType.kChs,
// },
// {
//   name: '__qem',
//   unit_type: UnitType.kQuirkyEms,
// },
];
var CSSStyleValueType;

(function (CSSStyleValueType) {
  CSSStyleValueType[CSSStyleValueType["kUnknownType"] = 0] = "kUnknownType";
  CSSStyleValueType[CSSStyleValueType["kUnparsedType"] = 1] = "kUnparsedType";
  CSSStyleValueType[CSSStyleValueType["kKeywordType"] = 2] = "kKeywordType"; // Start of CSSNumericValue subclasses

  CSSStyleValueType[CSSStyleValueType["kUnitType"] = 3] = "kUnitType";
  CSSStyleValueType[CSSStyleValueType["kSumType"] = 4] = "kSumType";
  CSSStyleValueType[CSSStyleValueType["kProductType"] = 5] = "kProductType";
  CSSStyleValueType[CSSStyleValueType["kNegateType"] = 6] = "kNegateType";
  CSSStyleValueType[CSSStyleValueType["kInvertType"] = 7] = "kInvertType";
  CSSStyleValueType[CSSStyleValueType["kMinType"] = 8] = "kMinType";
  CSSStyleValueType[CSSStyleValueType["kMaxType"] = 9] = "kMaxType";
  CSSStyleValueType[CSSStyleValueType["kClampType"] = 10] = "kClampType"; // End of CSSNumericValue subclasses

  CSSStyleValueType[CSSStyleValueType["kTransformType"] = 11] = "kTransformType";
  CSSStyleValueType[CSSStyleValueType["kPositionType"] = 12] = "kPositionType";
  CSSStyleValueType[CSSStyleValueType["kURLImageType"] = 13] = "kURLImageType";
  CSSStyleValueType[CSSStyleValueType["kColorType"] = 14] = "kColorType";
  CSSStyleValueType[CSSStyleValueType["kUnsupportedColorType"] = 15] = "kUnsupportedColorType";
})(CSSStyleValueType || (CSSStyleValueType = {}));

function parseCSSStyleValue(propertyName, value) {
  // const propertyId = cssPropertyID(propertyName);
  // if (propertyId === CSSPropertyID.kInvalid) {
  //   return [];
  // }
  // const customPropertyName = propertyId === CSSPropertyID.kVariable ? propertyName : null;
  // return fromString(propertyId, customPropertyName, value);
  return [];
}
/**
 * CSSStyleValue is the base class for all CSS values accessible from Typed OM.
 * Values that are not yet supported as specific types are also returned as base CSSStyleValues.
 *
 * Spec @see https://drafts.css-houdini.org/css-typed-om/#stylevalue-objects
 * Docs @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue
 */


var CSSStyleValue =
/** @class */
function () {
  function CSSStyleValue() {}

  CSSStyleValue.parse = function (propertyName, value) {
    return parseCSSStyleValue()[0];
  };

  CSSStyleValue.parseAll = function (propertyName, value) {
    return parseCSSStyleValue();
  };

  CSSStyleValue.unitFromName = function (name) {
    if (!name) {
      return UnitType.kUnknown;
    }

    if (name === 'number') {
      return UnitType.kNumber;
    }

    if (name === 'percent' || name === '%') {
      return UnitType.kPercentage;
    }

    return this.stringToUnitType(name);
  };

  CSSStyleValue.unitTypeToUnitCategory = function (type) {
    switch (type) {
      case UnitType.kNumber:
      case UnitType.kInteger:
        return UnitCategory.kUNumber;

      case UnitType.kPercentage:
        return UnitCategory.kUPercent;

      case UnitType.kPixels:
      case UnitType.kCentimeters:
      case UnitType.kMillimeters:
      case UnitType.kQuarterMillimeters:
      case UnitType.kInches:
      case UnitType.kPoints:
      case UnitType.kPicas:
      case UnitType.kUserUnits:
        return UnitCategory.kULength;

      case UnitType.kMilliseconds:
      case UnitType.kSeconds:
        return UnitCategory.kUTime;

      case UnitType.kDegrees:
      case UnitType.kRadians:
      case UnitType.kGradians:
      case UnitType.kTurns:
        return UnitCategory.kUAngle;

      case UnitType.kHertz:
      case UnitType.kKilohertz:
        return UnitCategory.kUFrequency;

      case UnitType.kDotsPerPixel:
      case UnitType.kDotsPerInch:
      case UnitType.kDotsPerCentimeter:
        return UnitCategory.kUResolution;

      default:
        return UnitCategory.kUOther;
    }
  };

  CSSStyleValue.unitTypeToString = function (type) {
    switch (type) {
      case UnitType.kNumber:
      case UnitType.kInteger:
      case UnitType.kUserUnits:
        return '';

      case UnitType.kPercentage:
        return '%';

      case UnitType.kEms:
      case UnitType.kQuirkyEms:
        return 'em';
      // case UnitType.kExs:
      //   return 'ex';

      case UnitType.kRems:
        return 'rem';
      // case UnitType.kChs:
      //   return 'ch';

      case UnitType.kPixels:
        return 'px';
      // case UnitType.kCentimeters:
      //   return 'cm';
      // case UnitType.kDotsPerPixel:
      //   return 'dppx';
      // case UnitType.kDotsPerInch:
      //   return 'dpi';
      // case UnitType.kDotsPerCentimeter:
      //   return 'dpcm';
      // case UnitType.kMillimeters:
      //   return 'mm';
      // case UnitType.kQuarterMillimeters:
      //   return 'q';
      // case UnitType.kInches:
      //   return 'in';
      // case UnitType.kPoints:
      //   return 'pt';
      // case UnitType.kPicas:
      //   return 'pc';

      case UnitType.kDegrees:
        return 'deg';

      case UnitType.kRadians:
        return 'rad';

      case UnitType.kGradians:
        return 'grad';

      case UnitType.kMilliseconds:
        return 'ms';

      case UnitType.kSeconds:
        return 's';
      // case UnitType.kHertz:
      //   return 'hz';
      // case UnitType.kKilohertz:
      //   return 'khz';

      case UnitType.kTurns:
        return 'turn';
    }

    return '';
  };

  CSSStyleValue.stringToUnitType = function (name) {
    return data.find(function (item) {
      return item.name === name;
    }).unit_type;
  };

  CSSStyleValue.canonicalUnitTypeForCategory = function (category) {
    // The canonical unit type is chosen according to the way
    // CSSPropertyParser.ValidUnit() chooses the default unit in each category
    // (based on unitflags).
    switch (category) {
      case UnitCategory.kUNumber:
        return UnitType.kNumber;

      case UnitCategory.kULength:
        return UnitType.kPixels;

      case UnitCategory.kUPercent:
        return UnitType.kUnknown;
      // Cannot convert between numbers and percent.

      case UnitCategory.kUTime:
        return UnitType.kSeconds;

      case UnitCategory.kUAngle:
        return UnitType.kDegrees;

      case UnitCategory.kUFrequency:
        return UnitType.kHertz;

      case UnitCategory.kUResolution:
        return UnitType.kDotsPerPixel;

      default:
        return UnitType.kUnknown;
    }
  };
  /**
   * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/css_primitive_value.cc#353
   */


  CSSStyleValue.conversionToCanonicalUnitsScaleFactor = function (unit_type) {
    var factor = 1.0; // FIXME: the switch can be replaced by an array of scale factors.

    switch (unit_type) {
      // These are "canonical" units in their respective categories.
      case UnitType.kPixels:
      case UnitType.kUserUnits:
      case UnitType.kDegrees:
      case UnitType.kSeconds:
      case UnitType.kHertz:
        break;

      case UnitType.kMilliseconds:
        factor = 0.001;
        break;

      case UnitType.kCentimeters:
        // factor = kCssPixelsPerCentimeter;
        break;

      case UnitType.kDotsPerCentimeter:
        // factor = 1 / kCssPixelsPerCentimeter;
        break;

      case UnitType.kMillimeters:
        // factor = kCssPixelsPerMillimeter;
        break;

      case UnitType.kQuarterMillimeters:
        // factor = kCssPixelsPerQuarterMillimeter;
        break;

      case UnitType.kInches:
        // factor = kCssPixelsPerInch;
        break;

      case UnitType.kDotsPerInch:
        // factor = 1 / kCssPixelsPerInch;
        break;

      case UnitType.kPoints:
        // factor = kCssPixelsPerPoint;
        break;

      case UnitType.kPicas:
        // factor = kCssPixelsPerPica;
        break;

      case UnitType.kRadians:
        factor = 180 / Math.PI;
        break;

      case UnitType.kGradians:
        factor = 0.9;
        break;

      case UnitType.kTurns:
        factor = 360;
        break;

      case UnitType.kKilohertz:
        factor = 1000;
        break;
    }

    return factor;
  };

  CSSStyleValue.isAngle = function (unit) {
    return unit === UnitType.kDegrees || unit === UnitType.kRadians || unit === UnitType.kGradians || unit === UnitType.kTurns;
  };

  CSSStyleValue.isViewportPercentageLength = function (type) {
    return type >= UnitType.kViewportWidth && type <= UnitType.kDynamicViewportMax;
  };

  CSSStyleValue.isContainerPercentageLength = function (type) {
    return type >= UnitType.kContainerWidth && type <= UnitType.kContainerMax;
  };

  CSSStyleValue.isLength = function (type) {
    return type >= UnitType.kEms && type <= UnitType.kUserUnits || type == UnitType.kQuirkyEms;
  };

  CSSStyleValue.isRelativeUnit = function (type) {
    return type === UnitType.kPercentage || type === UnitType.kEms || type === UnitType.kExs || type === UnitType.kRems || type === UnitType.kChs || this.isViewportPercentageLength(type) || this.isContainerPercentageLength(type);
  };

  CSSStyleValue.isTime = function (unit) {
    return unit === UnitType.kSeconds || unit === UnitType.kMilliseconds;
  };

  CSSStyleValue.isFrequency = function (unit) {
    return unit == UnitType.kHertz || unit == UnitType.kKilohertz;
  };

  CSSStyleValue.isResolution = function (type) {
    return type >= UnitType.kDotsPerPixel && type <= UnitType.kDotsPerCentimeter;
  };

  CSSStyleValue.isFlex = function (unit) {
    return unit === UnitType.kFraction;
  }; // protected abstract toCSSValue(): CSSValue;


  CSSStyleValue.prototype.toString = function () {
    return this.buildCSSText(Nested.kNo, ParenLess.kNo, '');
  };

  CSSStyleValue.prototype.isNumericValue = function () {
    return this.getType() >= CSSStyleValueType.kUnitType && this.getType() <= CSSStyleValueType.kClampType;
  };

  return CSSStyleValue;
}();

export { CSSStyleValue, CSSStyleValueType };
