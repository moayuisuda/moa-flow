import { __decorate } from '../../../../../_tslib@2.4.0@tslib/tslib.es6.js';
import { singleton } from '../../../../../_mana-syringe@0.3.1@mana-syringe/es/decorator.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/container.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/core.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../../_inversify@5.1.1@inversify/lib/inversify.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/register.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/index.js';
import '../../shapes/AABB.js';
import '../../shapes/BoundingSphere.js';
import '../../shapes/Frustum.js';
import '../../shapes/Plane.js';
import '../../shapes/Ray.js';
import '../../shapes/Point.js';
import { Rectangle } from '../../shapes/Rectangle.js';
import '../cssom/types.js';
import '../cssom/CSSColorValue.js';
import { CSSKeywordValue } from '../cssom/CSSKeywordValue.js';
import '../cssom/CSSMathOperator.js';
import '../cssom/CSSMathInvert.js';
import '../cssom/CSSMathMax.js';
import '../cssom/CSSMathMin.js';
import '../cssom/CSSMathNegate.js';
import '../cssom/CSSMathProduct.js';
import '../cssom/CSSMathSum.js';
import '../cssom/CSSMathValue.js';
import '../cssom/CSSMathVariadic.js';
import '../cssom/CSSNumericValue.js';
import '../cssom/CSSNumericValueType.js';
import '../cssom/CSSRGB.js';
import '../cssom/CSSGradientValue.js';
import '../cssom/CSSStyleValue.js';
import '../cssom/CSSTransformValue.js';
import '../cssom/CSSTranslate.js';
import '../cssom/CSSUnitValue.js';
import '../parser/dimension.js';
import { parsePath, mergePaths } from '../parser/path.js';
import '../parser/filter.js';
import '../parser/transform.js';

var CSSPropertyPath =
/** @class */
function () {
  function CSSPropertyPath() {
    /**
     * path2Curve
     */
    this.parser = parsePath;
    this.mixer = mergePaths;
  }

  CSSPropertyPath.prototype.calculator = function (name, oldParsed, parsed) {
    if (parsed instanceof CSSKeywordValue) {
      return {
        absolutePath: [],
        hasArc: false,
        segments: [],
        polygons: [],
        polylines: [],
        curve: [],
        totalLength: 0,
        curveSegments: [],
        zCommandIndexes: [],
        rect: new Rectangle(0, 0, 0, 0)
      };
    }

    return parsed;
  };
  /**
   * update local position
   */


  CSSPropertyPath.prototype.postProcessor = function (object) {
    var _a = object.parsedStyle,
        x = _a.x,
        y = _a.y,
        z = _a.z;
    object.setLocalPosition(x && x.value || 0, y && y.value || 0, z && z.value || 0);
  };

  CSSPropertyPath = __decorate([singleton()], CSSPropertyPath);
  return CSSPropertyPath;
}();

export { CSSPropertyPath };
