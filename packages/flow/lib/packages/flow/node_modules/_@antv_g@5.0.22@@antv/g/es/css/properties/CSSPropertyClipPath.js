import { __decorate } from '../../../../../_tslib@2.4.0@tslib/tslib.es6.js';
import { singleton } from '../../../../../_mana-syringe@0.3.1@mana-syringe/es/decorator.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/container.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/core.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../../_inversify@5.1.1@inversify/lib/inversify.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/register.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/index.js';
import { dirtifyToRoot } from '../../services/SceneGraphService.js';
import '../../services/ContextService.js';
import '../../services/RenderingContext.js';
import '../../services/RenderingService.js';
import '../../services/EventService.js';
import '../../services/SceneGraphSelector.js';
import '../../services/TextService.js';
import '../../services/OffscreenCanvasCreator.js';
import '../../services/aabb/interfaces.js';
import '../../services/aabb/CircleUpdater.js';
import '../../services/aabb/EllipseUpdater.js';
import '../../services/aabb/RectUpdater.js';
import '../../services/aabb/TextUpdater.js';
import '../../services/aabb/LineUpdater.js';
import '../../services/aabb/PolylineUpdater.js';
import '../../services/aabb/PathUpdater.js';

/**
 * @see /zh/docs/api/basic/display-object#clippath
 * @example
  const image = new Image({
    style: {
      width: 200,
      height: 200,
      clipPath: new Circle({
        style: {
          x: 100, // 处于被裁剪图形局部坐标系下
          y: 100,
          r: 50,
        },
      }),
    }
  });
 */

var CSSPropertyClipPath =
/** @class */
function () {
  function CSSPropertyClipPath() {}

  CSSPropertyClipPath.prototype.calculator = function (name, oldClipPath, newClipPath, object) {
    // clear ref to old clip path
    if (oldClipPath && oldClipPath !== newClipPath && oldClipPath.style.clipPathTargets) {
      var index = oldClipPath.style.clipPathTargets.indexOf(object);
      oldClipPath.style.clipPathTargets.splice(index, 1);
    }

    if (newClipPath) {
      if (!newClipPath.style.clipPathTargets) {
        newClipPath.style.clipPathTargets = [];
      }

      newClipPath.style.clipPathTargets.push(object);
    }

    dirtifyToRoot(object);
    return newClipPath;
  };

  CSSPropertyClipPath = __decorate([singleton()], CSSPropertyClipPath);
  return CSSPropertyClipPath;
}();

export { CSSPropertyClipPath };
