import { __extends } from '../../../../../_tslib@2.4.0@tslib/tslib.es6.js';
import { CSSStyleValueType, CSSStyleValue } from './CSSStyleValue.js';

var GradientPatternType;

(function (GradientPatternType) {
  GradientPatternType[GradientPatternType["Constant"] = 0] = "Constant";
  GradientPatternType[GradientPatternType["LinearGradient"] = 1] = "LinearGradient";
  GradientPatternType[GradientPatternType["RadialGradient"] = 2] = "RadialGradient";
  GradientPatternType[GradientPatternType["Pattern"] = 3] = "Pattern";
})(GradientPatternType || (GradientPatternType = {}));

var CSSGradientValue =
/** @class */
function (_super) {
  __extends(CSSGradientValue, _super);

  function CSSGradientValue(type, value) {
    var _this = _super.call(this) || this;

    _this.type = type;
    _this.value = value;
    return _this;
  }

  CSSGradientValue.prototype.clone = function () {
    return new CSSGradientValue(this.type, this.value);
  };

  CSSGradientValue.prototype.buildCSSText = function (n, p, result) {
    var text = '';

    if (this.type === GradientPatternType.LinearGradient) {
      text = "linear-gradient(".concat(this.value.steps.map(function (step) {
        return step.join(',');
      }).join(','), ")");
    } else if (this.type === GradientPatternType.RadialGradient) {
      text = "radial-gradient(".concat(this.value.steps.map(function (step) {
        return step.join(',');
      }).join(','), ")");
    } else if (this.type === GradientPatternType.Pattern) {
      text = "url(".concat(this.value.src, ")");
    }

    return result += text;
  };

  CSSGradientValue.prototype.getType = function () {
    return CSSStyleValueType.kColorType;
  };

  return CSSGradientValue;
}(CSSStyleValue);

export { CSSGradientValue, GradientPatternType };
