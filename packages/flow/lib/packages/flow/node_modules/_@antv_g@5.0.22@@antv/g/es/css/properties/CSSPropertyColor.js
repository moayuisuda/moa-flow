import { __decorate } from '../../../../../_tslib@2.4.0@tslib/tslib.es6.js';
import { singleton } from '../../../../../_mana-syringe@0.3.1@mana-syringe/es/decorator.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/container.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/core.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../../_inversify@5.1.1@inversify/lib/inversify.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/register.js';
import '../../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/index.js';
import { parseColor, mergeColors } from '../parser/color.js';
import '../parser/dimension.js';
import '../cssom/types.js';
import '../cssom/CSSColorValue.js';
import { CSSKeywordValue } from '../cssom/CSSKeywordValue.js';
import '../cssom/CSSMathOperator.js';
import '../cssom/CSSMathInvert.js';
import '../cssom/CSSMathMax.js';
import '../cssom/CSSMathMin.js';
import '../cssom/CSSMathNegate.js';
import '../cssom/CSSMathProduct.js';
import '../cssom/CSSMathSum.js';
import '../cssom/CSSMathValue.js';
import '../cssom/CSSMathVariadic.js';
import '../cssom/CSSNumericValue.js';
import '../cssom/CSSNumericValueType.js';
import { CSSRGB } from '../cssom/CSSRGB.js';
import '../cssom/CSSGradientValue.js';
import '../cssom/CSSStyleValue.js';
import '../cssom/CSSTransformValue.js';
import '../cssom/CSSTranslate.js';
import '../cssom/CSSUnitValue.js';
import '../../types.js';
import '../../shapes/Rectangle.js';
import '../parser/filter.js';
import '../parser/transform.js';

/**
 * opacity
 */

var CSSPropertyColor =
/** @class */
function () {
  function CSSPropertyColor() {
    this.parser = parseColor;
    this.mixer = mergeColors;
  }

  CSSPropertyColor.prototype.calculator = function (name, oldParsed, parsed, object, registry) {
    if (parsed instanceof CSSKeywordValue) {
      // 'unset' 'none'
      return new CSSRGB(0, 0, 0, 0, parsed.value === 'none');
    }

    return parsed;
  };

  CSSPropertyColor = __decorate([singleton()], CSSPropertyColor);
  return CSSPropertyColor;
}();

export { CSSPropertyColor };
