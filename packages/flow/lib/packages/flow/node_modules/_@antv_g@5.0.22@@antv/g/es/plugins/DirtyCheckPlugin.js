import { __decorate, __metadata } from '../../../../_tslib@2.4.0@tslib/tslib.es6.js';
import { inject, singleton } from '../../../../_mana-syringe@0.3.1@mana-syringe/es/decorator.js';
import '../../../../_mana-syringe@0.3.1@mana-syringe/es/container.js';
import '../../../../_mana-syringe@0.3.1@mana-syringe/es/core.js';
import '../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../_inversify@5.1.1@inversify/lib/inversify.js';
import '../../../../_mana-syringe@0.3.1@mana-syringe/es/register.js';
import '../../../../_mana-syringe@0.3.1@mana-syringe/es/contribution/index.js';
import { RenderingPluginContribution } from '../services/RenderingService.js';
import { RenderReason, RenderingContext } from '../services/RenderingContext.js';

/**
 * Filter dirty renderables and calculate the "dirty rectangle" which will be clear when frame began
 */

var DirtyCheckPlugin =
/** @class */
function () {
  function DirtyCheckPlugin() {}

  DirtyCheckPlugin_1 = DirtyCheckPlugin;

  DirtyCheckPlugin.prototype.apply = function (renderingService) {
    var _this = this;

    renderingService.hooks.dirtycheck.tap(DirtyCheckPlugin_1.tag, function (object) {
      if (object) {
        // const { enableDirtyRectangleRendering } = this.canvasConfig.renderer.getConfig();
        var renderable = object.renderable;

        var isDirty = renderable.dirty || _this.renderingContext.renderReasons.has(RenderReason.CAMERA_CHANGED); // if (isDirty || !enableDirtyRectangleRendering) {


        if (isDirty) {
          return object;
        } else {
          return null;
        }
      }

      return object;
    });
  };

  var DirtyCheckPlugin_1;
  DirtyCheckPlugin.tag = 'DirtyCheckPlugin';

  __decorate([inject(RenderingContext), __metadata("design:type", Object)], DirtyCheckPlugin.prototype, "renderingContext", void 0);

  DirtyCheckPlugin = DirtyCheckPlugin_1 = __decorate([singleton({
    contrib: RenderingPluginContribution
  })], DirtyCheckPlugin);
  return DirtyCheckPlugin;
}();

export { DirtyCheckPlugin };
