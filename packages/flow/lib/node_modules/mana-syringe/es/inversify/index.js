import '../../../inversify/lib/inversify.js';
import { Utils, Syringe } from '../core.js';
import { __exports as inversify } from '../../../../_virtual/inversify.js';

function bindSingleton(toBind) {
  return toBind.inSingletonScope();
}
function bindTransient(toBind) {
  return toBind.inTransientScope();
}
function bindLifecycle(toBind, option) {
  if (option.lifecycle === Syringe.Lifecycle.singleton) {
    return bindSingleton(toBind);
  }

  return bindTransient(toBind);
}
function bindNamed(toBind, named) {
  toBind.whenTargetNamed(namedToIdentifier(named));
}
function bindGeneralToken(token, register) {
  return register.bind(tokenToIdentifier(token));
}
function bindMonoToken(token, register) {
  if (register.isBound(tokenToIdentifier(token))) {
    try {
      return register.rebind(tokenToIdentifier(token));
    } catch (ex) {
      // not bind in crrent container
      return register.bind(tokenToIdentifier(token));
    }
  }

  return register.bind(tokenToIdentifier(token));
} // eslint-disable-next-line @typescript-eslint/no-explicit-any

function namedToIdentifier(named) {
  if (Utils.isDefinedToken(named)) {
    return named.symbol;
  }

  return named;
} // eslint-disable-next-line @typescript-eslint/no-explicit-any

function tokenToIdentifier(token) {
  if (Utils.isDefinedToken(token)) {
    return token.symbol;
  }

  return token;
}
var GlobalContainer = new inversify.Container();

export { GlobalContainer, bindGeneralToken, bindLifecycle, bindMonoToken, bindNamed, bindSingleton, bindTransient, namedToIdentifier, tokenToIdentifier };
