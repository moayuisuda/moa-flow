import { __decorate, __metadata } from '../../../tslib/tslib.es6.js';
import { ContextService, RenderingContext, RenderingPluginContribution } from '@antv/g';
import { inject, singleton } from 'mana-syringe';

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
/**
 * listen to mouse/touch/pointer events on DOM wrapper, trigger pointer events
 */

var DOMInteractionPlugin =
/** @class */
function () {
  function DOMInteractionPlugin() {}

  DOMInteractionPlugin_1 = DOMInteractionPlugin;

  DOMInteractionPlugin.prototype.apply = function (renderingService) {
    var _this = this;

    var canvas = this.renderingContext.root.ownerDocument.defaultView;
    var SUPPORT_ONLY_TOUCH = canvas.supportTouchEvent && MOBILE_REGEX.test(navigator.userAgent);

    var onPointerMove = function onPointerMove(ev) {
      renderingService.hooks.pointerMove.call(ev);
    };

    var onPointerUp = function onPointerUp(ev) {
      renderingService.hooks.pointerUp.call(ev);
    };

    var onPointerDown = function onPointerDown(ev) {
      renderingService.hooks.pointerDown.call(ev);
    };

    var onPointerOver = function onPointerOver(ev) {
      renderingService.hooks.pointerOver.call(ev);
    };

    var onPointerOut = function onPointerOut(ev) {
      renderingService.hooks.pointerOut.call(ev);
    };

    var onPointerWheel = function onPointerWheel(ev) {
      renderingService.hooks.pointerWheel.call(ev);
    };

    var addPointerEventListener = function addPointerEventListener($el) {
      globalThis.document.addEventListener('pointermove', onPointerMove, true);
      $el.addEventListener('pointerdown', onPointerDown, true);
      $el.addEventListener('pointerleave', onPointerOut, true);
      $el.addEventListener('pointerover', onPointerOver, true);
      globalThis.addEventListener('pointerup', onPointerUp, true);
    };

    var addTouchEventListener = function addTouchEventListener($el) {
      $el.addEventListener('touchstart', onPointerDown, true);
      $el.addEventListener('touchend', onPointerUp, true);
      $el.addEventListener('touchmove', onPointerMove, true);
    };

    var addMouseEventListener = function addMouseEventListener($el) {
      globalThis.document.addEventListener('mousemove', onPointerMove, true);
      $el.addEventListener('mousedown', onPointerDown, true);
      $el.addEventListener('mouseout', onPointerOut, true);
      $el.addEventListener('mouseover', onPointerOver, true);
      globalThis.addEventListener('mouseup', onPointerUp, true);
    };

    var removePointerEventListener = function removePointerEventListener($el) {
      globalThis.document.removeEventListener('pointermove', onPointerMove, true);
      $el.removeEventListener('pointerdown', onPointerDown, true);
      $el.removeEventListener('pointerleave', onPointerOut, true);
      $el.removeEventListener('pointerover', onPointerOver, true);
      globalThis.removeEventListener('pointerup', onPointerUp, true);
    };

    var removeTouchEventListener = function removeTouchEventListener($el) {
      $el.removeEventListener('touchstart', onPointerDown, true);
      $el.removeEventListener('touchend', onPointerUp, true);
      $el.removeEventListener('touchmove', onPointerMove, true);
    };

    var removeMouseEventListener = function removeMouseEventListener($el) {
      globalThis.document.removeEventListener('mousemove', onPointerMove, true);
      $el.removeEventListener('mousedown', onPointerDown, true);
      $el.removeEventListener('mouseout', onPointerOut, true);
      $el.removeEventListener('mouseover', onPointerOver, true);
      globalThis.removeEventListener('mouseup', onPointerUp, true);
    };

    renderingService.hooks.init.tap(DOMInteractionPlugin_1.tag, function () {
      var $el = _this.contextService.getDomElement();

      if (canvas.supportPointerEvent) {
        addPointerEventListener($el);
      } else if (SUPPORT_ONLY_TOUCH) {
        addTouchEventListener($el);
      } else if (!canvas.supportTouchEvent) {
        addMouseEventListener($el);
      } else {
        addTouchEventListener($el);
        addMouseEventListener($el);
      } // use passive event listeners
      // @see https://zhuanlan.zhihu.com/p/24555031


      $el.addEventListener('wheel', onPointerWheel, {
        passive: true,
        capture: true
      });
    });
    renderingService.hooks.destroy.tap(DOMInteractionPlugin_1.tag, function () {
      var $el = _this.contextService.getDomElement();

      if (canvas.supportPointerEvent) {
        removePointerEventListener($el);
      } else if (SUPPORT_ONLY_TOUCH) {
        removeTouchEventListener($el);
      } else if (!canvas.supportTouchEvent) {
        removeMouseEventListener($el);
      } else {
        removeTouchEventListener($el);
        removeMouseEventListener($el);
      }

      $el.removeEventListener('wheel', onPointerWheel, true);
    });
  };

  var DOMInteractionPlugin_1;
  DOMInteractionPlugin.tag = 'DOMInteractionPlugin';

  __decorate([inject(ContextService), __metadata("design:type", Object)], DOMInteractionPlugin.prototype, "contextService", void 0);

  __decorate([inject(RenderingContext), __metadata("design:type", Object)], DOMInteractionPlugin.prototype, "renderingContext", void 0);

  DOMInteractionPlugin = DOMInteractionPlugin_1 = __decorate([singleton({
    contrib: RenderingPluginContribution
  })], DOMInteractionPlugin);
  return DOMInteractionPlugin;
}();

export { DOMInteractionPlugin };
