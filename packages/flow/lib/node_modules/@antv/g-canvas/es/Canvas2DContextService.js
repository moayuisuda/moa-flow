import { __decorate, __metadata } from '../../../tslib/tslib.es6.js';
import { CanvasConfig, ContextService, isBrowser } from '@antv/g';
import { inject, singleton } from 'mana-syringe';
import { setDOMSize } from './utils/dom.js';
import isString from '../../../lodash-es/isString.js';

var Canvas2DContextService =
/** @class */
function () {
  function Canvas2DContextService() {}

  Canvas2DContextService.prototype.init = function () {
    var _a = this.canvasConfig,
        container = _a.container,
        canvas = _a.canvas,
        devicePixelRatio = _a.devicePixelRatio;

    if (canvas) {
      this.$canvas = canvas;

      if (container && canvas.parentElement !== container) {
        container.appendChild(canvas);
      }

      this.$container = canvas.parentElement;
      this.canvasConfig.container = this.$container;
    } else if (container) {
      // create container
      this.$container = isString(container) ? document.getElementById(container) : container;

      if (this.$container) {
        // create canvas
        var $canvas = document.createElement('canvas');
        this.$container.appendChild($canvas);

        if (!this.$container.style.position) {
          this.$container.style.position = 'relative';
        }

        this.$canvas = $canvas;
      }
    }

    this.context = this.$canvas.getContext('2d'); // use user-defined dpr first

    var dpr = devicePixelRatio || isBrowser && window.devicePixelRatio || 1;
    dpr = dpr >= 1 ? Math.ceil(dpr) : 1;
    this.dpr = dpr;
    this.resize(this.canvasConfig.width, this.canvasConfig.height);
  };

  Canvas2DContextService.prototype.getContext = function () {
    return this.context;
  };

  Canvas2DContextService.prototype.getDomElement = function () {
    return this.$canvas;
  };

  Canvas2DContextService.prototype.getDPR = function () {
    return this.dpr;
  };

  Canvas2DContextService.prototype.getBoundingClientRect = function () {
    if (this.$canvas.getBoundingClientRect) {
      return this.$canvas.getBoundingClientRect();
    }
  };

  Canvas2DContextService.prototype.destroy = function () {
    // @ts-ignore
    if (this.$container && this.$canvas && this.$canvas.parentNode) {
      // destroy context
      // @ts-ignore
      this.$container.removeChild(this.$canvas);
    }
  };

  Canvas2DContextService.prototype.resize = function (width, height) {
    if (this.$canvas) {
      // set canvas width & height
      this.$canvas.width = this.dpr * width;
      this.$canvas.height = this.dpr * height; // set CSS style width & height

      setDOMSize(this.$canvas, width, height);
      var dpr = this.getDPR(); // scale all drawing operations by the dpr
      // @see https://www.html5rocks.com/en/tutorials/canvas/hidpi/

      this.context.scale(dpr, dpr);
    }
  };

  Canvas2DContextService.prototype.applyCursorStyle = function (cursor) {
    if (this.$container && this.$container.style) {
      this.$container.style.cursor = cursor;
    }
  };

  __decorate([inject(CanvasConfig), __metadata("design:type", Object)], Canvas2DContextService.prototype, "canvasConfig", void 0);

  Canvas2DContextService = __decorate([singleton({
    token: ContextService
  })], Canvas2DContextService);
  return Canvas2DContextService;
}();

export { Canvas2DContextService };
