import { Shape } from '@antv/g';
import { GlobalContainer, Module } from 'mana-syringe';
import RBush from '../../../rbush/index.js';
export { default as RBush } from '../../../rbush/index.js';
import { StyleRendererFactory, StyleRenderer } from './shapes/styles/interfaces.js';
export { StyleRenderer } from './shapes/styles/interfaces.js';
import { DefaultRenderer } from './shapes/styles/Default.js';
import { ImageRenderer } from './shapes/styles/Image.js';
import { TextRenderer } from './shapes/styles/Text.js';
import { GradientPool } from './shapes/GradientPool.js';
import { ImagePool } from './shapes/ImagePool.js';
import { PathGenerator, PathGeneratorFactory } from './shapes/paths/index.js';
export { PathGenerator, PathGeneratorFactory } from './shapes/paths/index.js';
import { RBushRoot, CanvasRendererPlugin } from './CanvasRendererPlugin.js';
export { RBushRoot } from './CanvasRendererPlugin.js';
import { LoadImagePlugin } from './LoadImagePlugin.js';
export { RBushNode } from './components/RBushNode.js';
import { generatePath } from './shapes/paths/Circle.js';
import { generatePath as generatePath$1 } from './shapes/paths/Ellipse.js';
import { generatePath as generatePath$2 } from './shapes/paths/Rect.js';
import { generatePath as generatePath$3 } from './shapes/paths/Line.js';
import { generatePath as generatePath$4 } from './shapes/paths/Polyline.js';
import { generatePath as generatePath$5 } from './shapes/paths/Polygon.js';
import { generatePath as generatePath$6 } from './shapes/paths/Path.js';

/**
 * register shape renderers
 */

GlobalContainer.register({
  token: {
    token: PathGenerator,
    named: Shape.CIRCLE
  },
  useValue: generatePath
});
GlobalContainer.register({
  token: {
    token: PathGenerator,
    named: Shape.ELLIPSE
  },
  useValue: generatePath$1
});
GlobalContainer.register({
  token: {
    token: PathGenerator,
    named: Shape.RECT
  },
  useValue: generatePath$2
});
GlobalContainer.register({
  token: {
    token: PathGenerator,
    named: Shape.LINE
  },
  useValue: generatePath$3
});
GlobalContainer.register({
  token: {
    token: PathGenerator,
    named: Shape.POLYLINE
  },
  useValue: generatePath$4
});
GlobalContainer.register({
  token: {
    token: PathGenerator,
    named: Shape.POLYGON
  },
  useValue: generatePath$5
});
GlobalContainer.register({
  token: {
    token: PathGenerator,
    named: Shape.PATH
  },
  useValue: generatePath$6
});
GlobalContainer.register({
  token: PathGeneratorFactory,
  useFactory: function useFactory(ctx) {
    var cache = {};
    return function (tagName) {
      if (!cache[tagName]) {
        if (ctx.container.isBoundNamed(PathGenerator, tagName)) {
          cache[tagName] = ctx.container.getNamed(PathGenerator, tagName);
        }
      }

      return cache[tagName];
    };
  }
});
var containerModule = Module(function (register) {
  register(ImagePool);
  register({
    token: RBushRoot,
    useValue: new RBush()
  });
  register(DefaultRenderer);
  register(ImageRenderer);
  register(TextRenderer);
  register({
    token: StyleRendererFactory,
    useFactory: function useFactory(ctx) {
      var cache = {};
      return function (tagName) {
        if (!cache[tagName]) {
          if (ctx.container.isBoundNamed(StyleRenderer, tagName)) {
            cache[tagName] = ctx.container.getNamed(StyleRenderer, tagName);
          }
        }

        return cache[tagName];
      };
    }
  });
  register(GradientPool);
  register(CanvasRendererPlugin);
  register(LoadImagePlugin);
});

var Plugin =
/** @class */
function () {
  function Plugin() {}

  Plugin.prototype.init = function (container) {
    container.load(containerModule, true);
  };

  Plugin.prototype.destroy = function (container) {
    container.unload(containerModule);
  };

  return Plugin;
}();

export { Plugin };
