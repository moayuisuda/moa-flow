import { __decorate, __metadata } from '../../../../tslib/tslib.es6.js';
import { CanvasConfig, isBrowser } from '@antv/g';
import { inject, singleton } from 'mana-syringe';

var ImagePool =
/** @class */
function () {
  function ImagePool() {
    this.imageCache = {};
    this.patternCache = {};
  }

  ImagePool.prototype.getImageSync = function (src) {
    return this.imageCache[src];
  };

  ImagePool.prototype.getOrCreateImage = function (src) {
    var _this = this;

    if (this.imageCache[src]) {
      return Promise.resolve(this.imageCache[src]);
    } // @see https://github.com/antvis/g/issues/938


    var createImage = this.canvasConfig.createImage;
    return new Promise(function (resolve, reject) {
      var image;

      if (createImage) {
        image = createImage();
      } else if (isBrowser) {
        image = new window.Image();
      }

      if (image) {
        image.onload = function () {
          resolve(image);
        };

        image.onerror = function (ev) {
          reject(ev);
        };

        image.crossOrigin = 'Anonymous';
        image.src = src;
        _this.imageCache[src] = image;
      }
    });
  };

  ImagePool.prototype.getPatternSync = function (pattern) {
    var patternKey = this.generatePatternKey(pattern);

    if (this.patternCache[patternKey]) {
      return this.patternCache[patternKey];
    }
  };

  ImagePool.prototype.createPattern = function (patternParams, context) {
    var _this = this;

    return this.getOrCreateImage(patternParams.src).then(function (image) {
      var patternKey = _this.generatePatternKey(patternParams); // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createPattern


      var pattern = context.createPattern(image, patternParams.repetition);

      if (pattern) {
        _this.patternCache[patternKey] = pattern;
      }

      return _this.patternCache[patternKey];
    });
  };

  ImagePool.prototype.generatePatternKey = function (pattern) {
    var src = pattern.src,
        repetition = pattern.repetition;
    return "pattern-".concat(src, "-").concat(repetition);
  };

  __decorate([inject(CanvasConfig), __metadata("design:type", Object)], ImagePool.prototype, "canvasConfig", void 0);

  ImagePool = __decorate([singleton()], ImagePool);
  return ImagePool;
}();

export { ImagePool };
