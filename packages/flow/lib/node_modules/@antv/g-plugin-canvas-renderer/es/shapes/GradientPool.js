import { __read, __decorate } from '../../../../tslib/tslib.es6.js';
import { GradientPatternType } from '@antv/g';
import { singleton } from 'mana-syringe';

var GradientPool =
/** @class */
function () {
  function GradientPool() {
    this.gradientCache = {};
  }

  GradientPool.prototype.getOrCreateGradient = function (params, context) {
    var key = this.generateCacheKey(params);
    var type = params.type,
        x0 = params.x0,
        y0 = params.y0,
        x1 = params.x1,
        y1 = params.y1,
        steps = params.steps,
        width = params.width,
        height = params.height;

    if (this.gradientCache[key]) {
      return this.gradientCache[key];
    }

    var gradient = null;

    if (type === GradientPatternType.LinearGradient) {
      // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createLinearGradient
      gradient = context.createLinearGradient(x0 * width, y0 * height, x1 * width, y1 * height);
    } else if (type === GradientPatternType.RadialGradient) {
      var r = Math.sqrt(width * width + height * height) / 2; // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createRadialGradient

      gradient = context.createRadialGradient(x0 * width, y0 * height, 0, x1 * width, y1 * height, params.r1 * r);
    }

    if (gradient) {
      steps.forEach(function (_a) {
        var _b = __read(_a, 2),
            offset = _b[0],
            color = _b[1];

        gradient === null || gradient === void 0 ? void 0 : gradient.addColorStop(Number(offset), color);
      });
      this.gradientCache[key] = gradient;
    }

    return this.gradientCache[key];
  };

  GradientPool.prototype.generateCacheKey = function (params) {
    // @ts-ignore
    var type = params.type,
        x0 = params.x0,
        y0 = params.y0,
        x1 = params.x1,
        y1 = params.y1,
        r1 = params.r1,
        steps = params.steps,
        width = params.width,
        height = params.height;
    return "gradient-".concat(type, "-").concat(x0, "-").concat(y0, "-").concat(x1, "-").concat(y1, "-").concat(r1 || 0, "-").concat(width, "-").concat(height, "-").concat(steps.map(function (step) {
      return step.join('');
    }).join('-'));
  };

  GradientPool = __decorate([singleton()], GradientPool);
  return GradientPool;
}();

export { GradientPool };
