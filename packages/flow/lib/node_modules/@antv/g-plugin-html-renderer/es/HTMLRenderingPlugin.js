import { __decorate, __metadata } from '../../../tslib/tslib.es6.js';
import { inject, singleton } from 'mana-syringe';
import { ElementEvent, Shape, CSSRGB, CSSGradientValue, GradientPatternType, ContextService, RenderingContext, RenderingPluginContribution } from '@antv/g';
import isString from '../../../lodash-es/isString.js';

var HTML_PREFIX = 'g-html-';

var HTMLRenderingPlugin =
/** @class */
function () {
  function HTMLRenderingPlugin() {}

  HTMLRenderingPlugin_1 = HTMLRenderingPlugin;

  HTMLRenderingPlugin.prototype.apply = function (renderingService) {
    var _this = this;

    var handleMounted = function handleMounted(e) {
      var object = e.target;

      if (object.nodeName === Shape.HTML) {
        var innerHTML = object.parsedStyle.innerHTML;
        var existedId = HTML_PREFIX + object.entity;

        var $container = _this.contextService.getDomElement().parentNode;

        if ($container) {
          var $existedElement = $container.querySelector('#' + existedId);

          if (!$existedElement) {
            var $div = document.createElement('div');
            object.parsedStyle.$el = $div;
            $div.id = existedId;

            if (isString(innerHTML)) {
              $div.innerHTML = innerHTML;
            } else {
              $div.appendChild(innerHTML);
            }

            $container.appendChild($div);
          }
        }
      }
    };

    var handleUnmounted = function handleUnmounted(e) {
      var object = e.target;

      if (object.nodeName === Shape.HTML) {
        var existedId = HTML_PREFIX + object.entity;

        var $container = _this.contextService.getDomElement().parentNode;

        if ($container) {
          var $existedElement = $container.querySelector('#' + existedId);

          if ($existedElement) {
            $container.removeChild($existedElement);
          }
        }
      }
    };

    renderingService.hooks.init.tap(HTMLRenderingPlugin_1.tag, function () {
      _this.renderingContext.root.addEventListener(ElementEvent.MOUNTED, handleMounted);

      _this.renderingContext.root.addEventListener(ElementEvent.UNMOUNTED, handleUnmounted);
    });
    renderingService.hooks.destroy.tap(HTMLRenderingPlugin_1.tag, function () {
      _this.renderingContext.root.removeEventListener(ElementEvent.MOUNTED, handleMounted);

      _this.renderingContext.root.removeEventListener(ElementEvent.UNMOUNTED, handleUnmounted);
    });
    renderingService.hooks.render.tap(HTMLRenderingPlugin_1.tag, function (object) {
      if (object.nodeName === Shape.HTML) {
        var existedId = HTML_PREFIX + object.entity;

        var $container = _this.contextService.getDomElement().parentNode;

        if ($container) {
          var $existedElement = $container.querySelector('#' + existedId);

          _this.updateCSSStyle($existedElement, object.parsedStyle, object);
        }
      }
    });
  };

  HTMLRenderingPlugin.prototype.updateCSSStyle = function ($el, parsedStyle, object) {
    var zIndex = parsedStyle.zIndex,
        visibility = parsedStyle.visibility,
        opacity = parsedStyle.opacity,
        fill = parsedStyle.fill,
        lineWidth = parsedStyle.lineWidth,
        lineDash = parsedStyle.lineDash,
        stroke = parsedStyle.stroke,
        width = parsedStyle.width,
        height = parsedStyle.height,
        _a = parsedStyle.style,
        initialStyle = _a === void 0 ? '' : _a,
        _b = parsedStyle.className,
        className = _b === void 0 ? '' : _b;
    var contentWidth = 0;
    var contentHeight = 0;
    var widthValue = width.value;
    var heightValue = height.value;
    contentWidth = widthValue;
    contentHeight = heightValue;
    var style = {}; // use absolute position

    style.position = 'absolute';
    style.top = 0;
    style.left = 0;
    style.width = "".concat(contentWidth, "px");
    style.height = "".concat(contentHeight, "px"); // use transform

    style.transform = "matrix3d(".concat(object.getWorldTransform().join(','), ")"); // use unparsed transform origin

    if (object.style.transformOrigin) {
      style['transform-origin'] = object.style.transformOrigin;
    } // z-index


    style['z-index'] = zIndex.value; // visibility

    style.visibility = visibility.value; // opacity

    style.opacity = opacity.value; // backgroundColor

    if (fill) {
      var color = '';

      if (fill instanceof CSSRGB) {
        color = fill.toString();
      } else if (fill instanceof CSSGradientValue) {
        if (fill.type === GradientPatternType.LinearGradient) {
          var steps = fill.value.steps.map(function (cur) {
            //  ['0', '#ffffff'],
            return "".concat(cur[1], " ").concat(Number(cur[0]) * 100, "%");
          }).join(','); // @see https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient()

          color = "linear-gradient(to right, ".concat(steps, ");");
        }
      }

      style.background = color;
    } // border


    style['border-width'] = "".concat((lineWidth === null || lineWidth === void 0 ? void 0 : lineWidth.value) || 0, "px");

    if (stroke) {
      style['border-color'] = stroke.toString();
      style['border-style'] = 'solid';
    }

    if (lineDash) {
      style['border-style'] = 'dashed';
    } // filters


    if (object.style.filter) {
      // use unparsed filter directly
      style.filter = object.style.filter;
    }

    if (className) {
      if (Array.isArray(className)) {
        className.forEach(function (c) {
          $el.classList.add(c);
        });
      } else {
        $el.classList.add(className);
      }
    }

    $el.setAttribute('style', Object.keys(style).map(function (key) {
      return "".concat(key, ":").concat(style[key]);
    }).join(';') + initialStyle);
  };

  var HTMLRenderingPlugin_1;
  HTMLRenderingPlugin.tag = 'HTMLRenderingPlugin';

  __decorate([inject(ContextService), __metadata("design:type", Object)], HTMLRenderingPlugin.prototype, "contextService", void 0);

  __decorate([inject(RenderingContext), __metadata("design:type", Object)], HTMLRenderingPlugin.prototype, "renderingContext", void 0);

  HTMLRenderingPlugin = HTMLRenderingPlugin_1 = __decorate([singleton({
    contrib: RenderingPluginContribution
  })], HTMLRenderingPlugin);
  return HTMLRenderingPlugin;
}();

export { HTMLRenderingPlugin };
