import { __extends, __awaiter, __generator } from '../../../../tslib/tslib.es6.js';
import { Node } from './Node.js';
import { AnimationTimeline } from './AnimationTimeline.js';
import '../display-objects/DisplayObject.js';
import '../display-objects/CustomElement.js';
import '../display-objects/Circle.js';
import '../display-objects/Ellipse.js';
import { Group } from '../display-objects/Group.js';
import '../display-objects/Image.js';
import '../display-objects/Line.js';
import '../display-objects/Path.js';
import '../display-objects/Polygon.js';
import '../display-objects/Polyline.js';
import '../display-objects/Rect.js';
import { Text } from '../display-objects/Text.js';
import '../display-objects/HTML.js';
import '../css/cssom/types.js';
import '../css/cssom/CSSColorValue.js';
import '../css/cssom/CSSKeywordValue.js';
import '../css/cssom/CSSMathOperator.js';
import '../css/cssom/CSSMathInvert.js';
import '../css/cssom/CSSMathMax.js';
import '../css/cssom/CSSMathMin.js';
import '../css/cssom/CSSMathNegate.js';
import '../css/cssom/CSSMathProduct.js';
import '../css/cssom/CSSMathSum.js';
import '../css/cssom/CSSMathValue.js';
import '../css/cssom/CSSMathVariadic.js';
import '../css/cssom/CSSNumericValue.js';
import '../css/cssom/CSSNumericValueType.js';
import '../css/cssom/CSSRGB.js';
import '../css/cssom/CSSGradientValue.js';
import '../css/cssom/CSSStyleValue.js';
import '../css/cssom/CSSTransformValue.js';
import '../css/cssom/CSSTranslate.js';
import '../css/cssom/CSSUnitValue.js';
import '../css/parser/dimension.js';
import '../types.js';
import '../shapes/Rectangle.js';
import '../css/parser/filter.js';
import '../css/parser/transform.js';
import '../css/properties/CSSPropertyLengthOrPercentage.js';
import '../css/properties/CSSPropertyLocalPosition.js';
import '../css/properties/CSSPropertyOpacity.js';
import '../css/properties/CSSPropertyColor.js';
import '../css/properties/CSSPropertyFilter.js';
import '../css/properties/CSSPropertyLineDash.js';
import '../css/properties/CSSPropertyShadowBlur.js';
import '../css/properties/CSSPropertyOffsetPath.js';
import '../css/properties/CSSPropertyOffsetDistance.js';
import '../css/properties/CSSPropertyAnchor.js';
import '../css/properties/CSSPropertyZIndex.js';
import '../css/properties/CSSPropertyTransform.js';
import '../css/properties/CSSPropertyTransformOrigin.js';
import '../css/properties/CSSPropertyPath.js';
import '../css/properties/CSSPropertyPoints.js';
import '../css/properties/CSSPropertyClipPath.js';
import '../css/properties/CSSPropertyText.js';
import '../css/properties/CSSPropertyTextTransform.js';
import '../../../../inversify/lib/inversify.js';
import '../../../../mana-syringe/es/core.js';
import '../../../../mana-syringe/es/inversify/index.js';
import '../../../../mana-syringe/es/container.js';
import '../../../../mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../mana-syringe/es/register.js';
import '../../../../mana-syringe/es/contribution/index.js';
import { BUILT_IN_PROPERTIES } from '../css/StyleValueRegistry.js';
import '../css/LayoutRegistry.js';

/**
 * the entry of DOM tree
 * Document -> Node -> EventTarget
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document
 */

var Document =
/** @class */
function (_super) {
  __extends(Document, _super);

  function Document() {
    var _this = _super.call(this) || this;
    /**
     * only document has defaultView, points to canvas,
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView
     */


    _this.defaultView = null;
    _this.ownerDocument = null;
    _this.nodeName = 'document'; // create timeline

    _this.timeline = new AnimationTimeline(_this);
    /**
     * for inherited properties, the initial value is used on the root element only,
     * as long as no specified value is supplied.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/initial_value
     */

    var initialStyle = {};
    BUILT_IN_PROPERTIES.forEach(function (_a) {
      var name = _a.name,
          inherited = _a.inherited,
          defaultValue = _a.defaultValue;

      if (inherited && defaultValue) {
        initialStyle[name] = defaultValue;
      }
    }); // like <html> in DOM tree

    _this.documentElement = new Group({
      id: 'g-root',
      style: initialStyle
    });
    _this.documentElement.ownerDocument = _this;
    _this.documentElement.parentNode = _this;
    _this.childNodes = [_this.documentElement];
    return _this;
  }

  Object.defineProperty(Document.prototype, "children", {
    get: function get() {
      return this.childNodes;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Document.prototype, "childElementCount", {
    get: function get() {
      return this.childNodes.length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Document.prototype, "firstElementChild", {
    get: function get() {
      return this.firstChild;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Document.prototype, "lastElementChild", {
    get: function get() {
      return this.lastChild;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * @example const circle = document.createElement('circle', { style: { r: 10 } });
   */

  Document.prototype.createElement = function (tagName, options) {
    // d3 will use <tspan>
    var clazz = this.defaultView.customElements.get(tagName);

    if (!clazz) {
      console.warn('Unsupported tagName: ', tagName);
      clazz = tagName === 'tspan' ? Text : Group;
    }

    return new clazz(options);
  };

  Document.prototype.createElementNS = function (namespaceURI, tagName, options) {
    return this.createElement(tagName, options);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Document.prototype.cloneNode = function (deep) {
    throw new Error('Method not implemented.');
  };

  Document.prototype.destroy = function () {
    try {
      this.documentElement.destroy();
    } catch (e) {}

    this.timeline.destroy();
  };
  /**
   * Do picking with API instead of triggering interactive events.
   *
   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/elementFromPoint
   */


  Document.prototype.elementFromPoint = function (x, y) {
    return __awaiter(this, void 0, void 0, function () {
      var _a, viewportX, viewportY, _b, width, height, _c, clientX, clientY, picked;

      return __generator(this, function (_d) {
        switch (_d.label) {
          case 0:
            _a = this.defaultView.canvas2Viewport({
              x: x,
              y: y
            }), viewportX = _a.x, viewportY = _a.y;
            _b = this.defaultView.getConfig(), width = _b.width, height = _b.height; // outside canvas' viewport

            if (viewportX < 0 || viewportY < 0 || viewportX > width || viewportY > height) {
              return [2
              /*return*/
              , null];
            }

            _c = this.defaultView.viewport2Client({
              x: viewportX,
              y: viewportY
            }), clientX = _c.x, clientY = _c.y;
            return [4
            /*yield*/
            , this.defaultView.getRenderingService().hooks.pick.promise({
              topmost: true,
              position: {
                x: x,
                y: y,
                viewportX: viewportX,
                viewportY: viewportY,
                clientX: clientX,
                clientY: clientY
              },
              picked: []
            })];

          case 1:
            picked = _d.sent().picked;
            return [2
            /*return*/
            , picked && picked[0] || this.documentElement];
        }
      });
    });
  };
  /**
   * Do picking with API instead of triggering interactive events.
   *
   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/elementsFromPoint
   */


  Document.prototype.elementsFromPoint = function (x, y) {
    return __awaiter(this, void 0, void 0, function () {
      var _a, viewportX, viewportY, _b, width, height, _c, clientX, clientY, picked;

      return __generator(this, function (_d) {
        switch (_d.label) {
          case 0:
            _a = this.defaultView.canvas2Viewport({
              x: x,
              y: y
            }), viewportX = _a.x, viewportY = _a.y;
            _b = this.defaultView.getConfig(), width = _b.width, height = _b.height; // outside canvas' viewport

            if (viewportX < 0 || viewportY < 0 || viewportX > width || viewportY > height) {
              return [2
              /*return*/
              , []];
            }

            _c = this.defaultView.viewport2Client({
              x: viewportX,
              y: viewportY
            }), clientX = _c.x, clientY = _c.y;
            return [4
            /*yield*/
            , this.defaultView.getRenderingService().hooks.pick.promise({
              topmost: false,
              position: {
                x: x,
                y: y,
                viewportX: viewportX,
                viewportY: viewportY,
                clientX: clientX,
                clientY: clientY
              },
              picked: []
            })];

          case 1:
            picked = _d.sent().picked;

            if (picked[picked.length - 1] !== this.documentElement) {
              picked.push(this.documentElement);
            }

            return [2
            /*return*/
            , picked];
        }
      });
    });
  };
  /**
   * eg. Uncaught DOMException: Failed to execute 'appendChild' on 'Node': Only one element on document allowed.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Document.prototype.appendChild = function (newChild, index) {
    throw new Error('Use document.documentElement instead.');
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Document.prototype.insertBefore = function (newChild, refChild) {
    throw new Error('Use document.documentElement instead.');
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Document.prototype.removeChild = function (oldChild, destroy) {
    throw new Error('Use document.documentElement instead.');
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Document.prototype.replaceChild = function (newChild, oldChild, destroy) {
    throw new Error('Use document.documentElement instead.');
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Document.prototype.append = function () {
    var nodes = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      nodes[_i] = arguments[_i];
    }

    throw new Error('Use document.documentElement instead.');
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Document.prototype.prepend = function () {
    var nodes = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      nodes[_i] = arguments[_i];
    }

    throw new Error('Use document.documentElement instead.');
  };
  /**
   * Execute query on documentElement.
   */


  Document.prototype.getElementById = function (id) {
    return this.documentElement.getElementById(id);
  };

  Document.prototype.getElementsByName = function (name) {
    return this.documentElement.getElementsByName(name);
  };

  Document.prototype.getElementsByTagName = function (tagName) {
    return this.documentElement.getElementsByTagName(tagName);
  };

  Document.prototype.getElementsByClassName = function (className) {
    return this.documentElement.getElementsByClassName(className);
  };

  Document.prototype.querySelector = function (selectors) {
    return this.documentElement.querySelector(selectors);
  };

  Document.prototype.querySelectorAll = function (selectors) {
    return this.documentElement.querySelectorAll(selectors);
  };

  Document.prototype.find = function (filter) {
    return this.documentElement.find(filter);
  };

  Document.prototype.findAll = function (filter) {
    return this.documentElement.findAll(filter);
  };

  return Document;
}(Node);

export { Document };
