import { __read, __spreadArray } from '../../../../tslib/tslib.es6.js';
import '../../../../eventemitter3/index.js';
import { CustomEvent } from './CustomEvent.js';
import { FederatedEvent } from './FederatedEvent.js';
import isBoolean from '../../../../lodash-es/isBoolean.js';
import isObject from '../../../../lodash-es/isObject.js';
import isFunction from '../../../../lodash-es/isFunction.js';
import { e as eventemitter3 } from '../../../../../_virtual/index4.js';

var DELEGATION_SPLITTER = ':';
/**
 * Objects that can receive events and may have listeners for them.
 * eg. Element, Canvas, DisplayObject
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget
 */

var EventTarget =
/** @class */
function () {
  function EventTarget() {
    /**
     * event emitter
     */
    this.emitter = new eventemitter3.exports.EventEmitter();
  }
  /**
   * @deprecated
   * @alias addEventListener
   */


  EventTarget.prototype.on = function (type, listener, options) {
    this.addEventListener(type, listener, options);
    return this;
  };
  /**
   * support `capture` & `once` in options
   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener
   */


  EventTarget.prototype.addEventListener = function (type, listener, options) {
    var capture = isBoolean(options) && options || isObject(options) && options.capture;
    var once = isObject(options) && options.once;
    var context = isFunction(listener) ? undefined : listener; // compatible with G 3.0
    // support using delegate name in event type, eg. 'node:click'

    var useDelegatedName = false;
    var delegatedName = '';

    if (type.indexOf(DELEGATION_SPLITTER) > -1) {
      var _a = __read(type.split(DELEGATION_SPLITTER), 2),
          name_1 = _a[0],
          eventType = _a[1];

      type = eventType;
      delegatedName = name_1;
      useDelegatedName = true;
    }

    type = capture ? "".concat(type, "capture") : type;
    listener = isFunction(listener) ? listener : listener.handleEvent; // compatible with G 3.0

    if (useDelegatedName) {
      var originListener_1 = listener;

      listener = function listener() {
        var _a;

        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        if (((_a = args[0].target) === null || _a === void 0 ? void 0 : _a.name) !== delegatedName) {
          return;
        } // @ts-ignore


        originListener_1.apply(void 0, __spreadArray([], __read(args), false));
      };
    }

    if (once) {
      this.emitter.once(type, listener, context);
    } else {
      this.emitter.on(type, listener, context);
    }

    return this;
  };
  /**
   * @deprecated
   * @alias removeEventListener
   */


  EventTarget.prototype.off = function (type, listener, options) {
    if (type) {
      this.removeEventListener(type, listener, options);
    } else {
      // remove all listeners
      this.removeAllEventListeners();
    }

    return this;
  };

  EventTarget.prototype.removeAllEventListeners = function () {
    this.emitter.removeAllListeners();
  };

  EventTarget.prototype.removeEventListener = function (type, listener, options) {
    var capture = isBoolean(options) && options || isObject(options) && options.capture;
    var context = isFunction(listener) ? undefined : listener;
    type = capture ? "".concat(type, "capture") : type;
    listener = isFunction(listener) ? listener : listener === null || listener === void 0 ? void 0 : listener.handleEvent;
    this.emitter.off(type, listener, context);
    return this;
  };
  /**
   * @deprecated
   * @alias dispatchEvent
   */
  // eslint-disable-next-line @typescript-eslint/ban-types


  EventTarget.prototype.emit = function (eventName, object) {
    this.dispatchEvent(new CustomEvent(eventName, object));
  };
  /**
   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
   */


  EventTarget.prototype.dispatchEvent = function (e) {
    var _a, _b;

    if (!(e instanceof FederatedEvent)) {
      throw new Error('DisplayObject cannot propagate events outside of the Federated Events API');
    }

    var document = // @ts-ignore
    this.ownerDocument || this.document; // assign event manager

    if (document) {
      e.manager = ((_a = document.defaultView) === null || _a === void 0 ? void 0 : _a.getEventService()) || null;
      e.defaultPrevented = false;
      e.path = [];
      e.target = this;
      (_b = e.manager) === null || _b === void 0 ? void 0 : _b.dispatchEvent(e);
    }

    return !e.defaultPrevented;
  };

  return EventTarget;
}();

export { DELEGATION_SPLITTER, EventTarget };
