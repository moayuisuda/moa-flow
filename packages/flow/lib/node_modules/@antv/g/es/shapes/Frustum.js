import { __read } from '../../../../tslib/tslib.es6.js';
import { Plane } from './Plane.js';
import { set } from '../../../../gl-matrix/esm/vec3.js';

var Mask;

(function (Mask) {
  Mask[Mask["OUTSIDE"] = 4294967295] = "OUTSIDE";
  Mask[Mask["INSIDE"] = 0] = "INSIDE";
  Mask[Mask["INDETERMINATE"] = 2147483647] = "INDETERMINATE";
})(Mask || (Mask = {}));

var Frustum =
/** @class */
function () {
  function Frustum(planes) {
    this.planes = [];

    if (planes) {
      this.planes = planes;
    } else {
      for (var i = 0; i < 6; i++) {
        this.planes.push(new Plane());
      }
    }
  }
  /**
   * extract 6 planes from projectionMatrix
   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf
   */


  Frustum.prototype.extractFromVPMatrix = function (projectionMatrix) {
    // @ts-ignore
    var _a = __read(projectionMatrix, 16),
        m0 = _a[0],
        m1 = _a[1],
        m2 = _a[2],
        m3 = _a[3],
        m4 = _a[4],
        m5 = _a[5],
        m6 = _a[6],
        m7 = _a[7],
        m8 = _a[8],
        m9 = _a[9],
        m10 = _a[10],
        m11 = _a[11],
        m12 = _a[12],
        m13 = _a[13],
        m14 = _a[14],
        m15 = _a[15]; // right


    set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);
    this.planes[0].distance = m15 - m12; // left

    set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);
    this.planes[1].distance = m15 + m12; // bottom

    set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);
    this.planes[2].distance = m15 + m13; // top

    set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);
    this.planes[3].distance = m15 - m13; // far

    set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);
    this.planes[4].distance = m15 - m14; // near

    set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);
    this.planes[5].distance = m15 + m14;
    this.planes.forEach(function (plane) {
      plane.normalize();
      plane.updatePNVertexFlag();
    });
  };

  return Frustum;
}();

export { Frustum, Mask };
