import { __extends } from '../../../../../tslib/tslib.es6.js';
import { CSSMathValue } from './CSSMathValue.js';
import { ParenLess, Nested } from './types.js';
import './CSSColorValue.js';
import './CSSKeywordValue.js';
import './CSSMathOperator.js';
import './CSSMathInvert.js';
import './CSSMathMax.js';
import './CSSMathMin.js';
import './CSSMathProduct.js';
import './CSSMathSum.js';
import './CSSMathVariadic.js';
import './CSSNumericValue.js';
import './CSSNumericValueType.js';
import './CSSRGB.js';
import './CSSGradientValue.js';
import { CSSStyleValueType } from './CSSStyleValue.js';
import './CSSTransformValue.js';
import './CSSTranslate.js';
import './CSSUnitValue.js';

var CSSMathNegate =
/** @class */
function (_super) {
  __extends(CSSMathNegate, _super);

  function CSSMathNegate(value, type) {
    var _this = _super.call(this, type) || this;

    _this.value = value;
    _this.operator = 'negate';
    return _this;
  }

  CSSMathNegate.create = function (value) {
    return new CSSMathNegate(value, value.type_);
  };

  CSSMathNegate.prototype.clone = function () {
    return new CSSMathNegate(this.value, this.type_);
  };

  CSSMathNegate.prototype.getType = function () {
    return CSSStyleValueType.kNegateType;
  };

  CSSMathNegate.prototype.equals = function (other) {
    if (other.getType() !== CSSStyleValueType.kNegateType) {
      return false;
    }

    var other_invert = other;
    return this.value.equals(other_invert.value);
  };

  CSSMathNegate.prototype.sumValue = function () {
    var sum = this.value.sumValue();

    if (sum.length === 0) {
      return null;
    }

    sum.forEach(function (term) {
      term.value *= -1;
    });
    return sum;
  }; // toCalcExpressionNode(): CSSMathExpressionNode {
  //   const right_side = this.value.toCalcExpressionNode();
  //   if (!right_side) {
  //     return null;
  //   }
  //   // return CSSMathExpressionOperation::CreateArithmeticOperationSimplified(
  //   //   CSSMathExpressionNumericLiteral::Create(
  //   //       -1, CSSPrimitiveValue::UnitType::kNumber),
  //   //   right_side, CSSMathOperator::kMultiply);
  // }


  CSSMathNegate.prototype.buildCSSText = function (nested, paren_less, result) {
    if (paren_less == ParenLess.kNo) {
      result += nested === Nested.kYes ? '(' : 'calc(';
    }

    result += '-';
    result = this.value.buildCSSText(Nested.kYes, ParenLess.kNo, result);

    if (paren_less === ParenLess.kNo) {
      result += ')';
    }

    return result;
  };

  return CSSMathNegate;
}(CSSMathValue);

export { CSSMathNegate };
