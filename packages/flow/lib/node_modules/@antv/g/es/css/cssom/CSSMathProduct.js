import { __extends } from '../../../../../tslib/tslib.es6.js';
import { DCHECK_NE } from '../../utils/assert.js';
import '../../../../../inversify/lib/inversify.js';
import '../../../../../mana-syringe/es/core.js';
import '../../../../../mana-syringe/es/inversify/index.js';
import '../../../../../mana-syringe/es/container.js';
import '../../../../../mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../../mana-syringe/es/register.js';
import '../../../../../mana-syringe/es/contribution/index.js';
import { ParenLess, Nested } from './types.js';
import './CSSColorValue.js';
import './CSSKeywordValue.js';
import './CSSMathOperator.js';
import './CSSMathInvert.js';
import './CSSMathMax.js';
import './CSSMathMin.js';
import './CSSMathNegate.js';
import './CSSMathSum.js';
import './CSSMathValue.js';
import { typeCheck, CSSMathVariadic } from './CSSMathVariadic.js';
import './CSSNumericValue.js';
import { CSSNumericValueType } from './CSSNumericValueType.js';
import './CSSRGB.js';
import './CSSGradientValue.js';
import { CSSStyleValueType } from './CSSStyleValue.js';
import './CSSTransformValue.js';
import './CSSTranslate.js';
import './CSSUnitValue.js';
import '../parser/dimension.js';
import '../../types.js';
import '../../shapes/Rectangle.js';
import '../parser/filter.js';
import '../parser/transform.js';
import '../properties/CSSPropertyLengthOrPercentage.js';
import '../properties/CSSPropertyLocalPosition.js';
import '../properties/CSSPropertyOpacity.js';
import '../properties/CSSPropertyColor.js';
import '../properties/CSSPropertyFilter.js';
import '../properties/CSSPropertyLineDash.js';
import '../properties/CSSPropertyShadowBlur.js';
import '../properties/CSSPropertyOffsetPath.js';
import '../properties/CSSPropertyOffsetDistance.js';
import '../properties/CSSPropertyAnchor.js';
import '../properties/CSSPropertyZIndex.js';
import '../properties/CSSPropertyTransform.js';
import '../properties/CSSPropertyTransformOrigin.js';
import '../properties/CSSPropertyPath.js';
import '../properties/CSSPropertyPoints.js';
import '../properties/CSSPropertyClipPath.js';
import '../properties/CSSPropertyText.js';
import '../properties/CSSPropertyTextTransform.js';
import '../StyleValueRegistry.js';
import '../LayoutRegistry.js';
import '../../utils/custom-easing.js';

/**
 * Represents the product of one or more CSSNumericValues.
 * @see https://drafts.css-houdini.org/css-typed-om/#cssmathproduct
 */

var CSSMathProduct =
/** @class */
function (_super) {
  __extends(CSSMathProduct, _super);

  function CSSMathProduct() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.operator = 'product';
    return _this;
  }

  CSSMathProduct.create = function (values) {
    var error = false;
    var finalType = typeCheck(values, CSSNumericValueType.multiply, error);
    return error ? null : new CSSMathProduct(values, finalType);
  };

  CSSMathProduct.multiplyUnitMaps = function (a, b) {
    Object.keys(b).forEach(function (key) {
      DCHECK_NE(b[key].value, 0);
      var old_value = key in a ? a[key].value : 0;

      if (old_value + b[key].value === 0) {
        delete a[key];
      } else {
        a[key] = old_value + b[key].value;
      }
    });
    return a;
  };

  CSSMathProduct.prototype.clone = function () {
    return new CSSMathProduct(this.values, this.type_);
  };

  CSSMathProduct.prototype.getType = function () {
    return CSSStyleValueType.kProductType;
  }; // toCalcExpressionNode() {
  //   return this.toCalcExporessionNodeForVariadic(CSSMathOperator.kMultiply);
  // }


  CSSMathProduct.prototype.sumValue = function () {
    var sum = [{
      value: 1,
      units: {}
    }];
    this.numericValues().forEach(function (value) {
      var child_sum = value.sumValue();

      if (!child_sum.length) {
        return null;
      }

      var new_sum = [];
      sum.forEach(function (a) {
        child_sum.forEach(function (b) {
          new_sum.push({
            value: a.value * b.value,
            units: CSSMathProduct.multiplyUnitMaps(a.units, b.units)
          });
        });
      });
      sum = new_sum;
    });
    return sum;
  };

  CSSMathProduct.prototype.buildCSSText = function (nested, paren_less, result) {
    if (paren_less == ParenLess.kNo) {
      result += nested === Nested.kYes ? '(' : 'calc(';
    }

    var values = this.numericValues();
    result = values[0].buildCSSText(Nested.kYes, ParenLess.kNo, result);

    for (var i = 1; i < values.length; i++) {
      var arg = values[i];

      if (arg.getType() === CSSStyleValueType.kInvertType) {
        result += ' / ';
        result = arg.value.buildCSSText(Nested.kYes, ParenLess.kNo, result);
      } else {
        result += ' * ';
        result = arg.buildCSSText(Nested.kYes, ParenLess.kNo, result);
      }
    }

    if (paren_less === ParenLess.kNo) {
      result += ')';
    }

    return result;
  };

  return CSSMathProduct;
}(CSSMathVariadic);

export { CSSMathProduct };
