import { __decorate } from '../../../../../tslib/tslib.es6.js';
import { singleton } from '../../../../../mana-syringe/es/decorator.js';
import '../../../../../mana-syringe/es/container.js';
import '../../../../../mana-syringe/es/core.js';
import '../../../../../mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../../inversify/lib/inversify.js';
import '../../../../../mana-syringe/es/register.js';
import '../../../../../mana-syringe/es/contribution/index.js';
import { Shape } from '../../types.js';
import '../cssom/types.js';
import '../cssom/CSSColorValue.js';
import '../cssom/CSSKeywordValue.js';
import '../cssom/CSSMathOperator.js';
import '../cssom/CSSMathInvert.js';
import '../cssom/CSSMathMax.js';
import '../cssom/CSSMathMin.js';
import '../cssom/CSSMathNegate.js';
import '../cssom/CSSMathProduct.js';
import '../cssom/CSSMathSum.js';
import '../cssom/CSSMathValue.js';
import '../cssom/CSSMathVariadic.js';
import '../cssom/CSSNumericValue.js';
import '../cssom/CSSNumericValueType.js';
import '../cssom/CSSRGB.js';
import '../cssom/CSSGradientValue.js';
import '../cssom/CSSStyleValue.js';
import '../cssom/CSSTransformValue.js';
import '../cssom/CSSTranslate.js';
import '../cssom/CSSUnitValue.js';
import '../parser/dimension.js';
import { parseNumber, clampedMergeNumbers } from '../parser/numeric.js';
import '../../shapes/Rectangle.js';
import '../parser/filter.js';
import '../parser/transform.js';

var CSSPropertyOffsetDistance =
/** @class */
function () {
  function CSSPropertyOffsetDistance() {
    this.parser = parseNumber;
    this.mixer = clampedMergeNumbers(0, 1);
  }

  CSSPropertyOffsetDistance.prototype.postProcessor = function (object) {
    if (!object.attributes.offsetPath) {
      return;
    }

    var offsetPathNodeName = object.attributes.offsetPath.nodeName;

    if (offsetPathNodeName === Shape.LINE || offsetPathNodeName === Shape.PATH || offsetPathNodeName === Shape.POLYLINE) {
      var point = object.attributes.offsetPath.getPoint(object.parsedStyle.offsetDistance.value);

      if (point) {
        object.setLocalPosition(point.x, point.y);
      }
    }
  };

  CSSPropertyOffsetDistance = __decorate([singleton()], CSSPropertyOffsetDistance);
  return CSSPropertyOffsetDistance;
}();

export { CSSPropertyOffsetDistance };
