// These units are iterated through, so be careful when adding or changing the
// order.
var UnitType;

(function (UnitType) {
  UnitType[UnitType["kUnknown"] = 0] = "kUnknown";
  UnitType[UnitType["kNumber"] = 1] = "kNumber";
  UnitType[UnitType["kPercentage"] = 2] = "kPercentage"; // Length units

  UnitType[UnitType["kEms"] = 3] = "kEms";
  UnitType[UnitType["kExs"] = 4] = "kExs";
  UnitType[UnitType["kPixels"] = 5] = "kPixels";
  UnitType[UnitType["kCentimeters"] = 6] = "kCentimeters";
  UnitType[UnitType["kMillimeters"] = 7] = "kMillimeters";
  UnitType[UnitType["kInches"] = 8] = "kInches";
  UnitType[UnitType["kPoints"] = 9] = "kPoints";
  UnitType[UnitType["kPicas"] = 10] = "kPicas";
  UnitType[UnitType["kQuarterMillimeters"] = 11] = "kQuarterMillimeters"; // https://drafts.csswg.org/css-values-4/#viewport-relative-lengths
  //
  // See also IsViewportPercentageLength.

  UnitType[UnitType["kViewportWidth"] = 12] = "kViewportWidth";
  UnitType[UnitType["kViewportHeight"] = 13] = "kViewportHeight";
  UnitType[UnitType["kViewportInlineSize"] = 14] = "kViewportInlineSize";
  UnitType[UnitType["kViewportBlockSize"] = 15] = "kViewportBlockSize";
  UnitType[UnitType["kViewportMin"] = 16] = "kViewportMin";
  UnitType[UnitType["kViewportMax"] = 17] = "kViewportMax";
  UnitType[UnitType["kSmallViewportWidth"] = 18] = "kSmallViewportWidth";
  UnitType[UnitType["kSmallViewportHeight"] = 19] = "kSmallViewportHeight";
  UnitType[UnitType["kSmallViewportInlineSize"] = 20] = "kSmallViewportInlineSize";
  UnitType[UnitType["kSmallViewportBlockSize"] = 21] = "kSmallViewportBlockSize";
  UnitType[UnitType["kSmallViewportMin"] = 22] = "kSmallViewportMin";
  UnitType[UnitType["kSmallViewportMax"] = 23] = "kSmallViewportMax";
  UnitType[UnitType["kLargeViewportWidth"] = 24] = "kLargeViewportWidth";
  UnitType[UnitType["kLargeViewportHeight"] = 25] = "kLargeViewportHeight";
  UnitType[UnitType["kLargeViewportInlineSize"] = 26] = "kLargeViewportInlineSize";
  UnitType[UnitType["kLargeViewportBlockSize"] = 27] = "kLargeViewportBlockSize";
  UnitType[UnitType["kLargeViewportMin"] = 28] = "kLargeViewportMin";
  UnitType[UnitType["kLargeViewportMax"] = 29] = "kLargeViewportMax";
  UnitType[UnitType["kDynamicViewportWidth"] = 30] = "kDynamicViewportWidth";
  UnitType[UnitType["kDynamicViewportHeight"] = 31] = "kDynamicViewportHeight";
  UnitType[UnitType["kDynamicViewportInlineSize"] = 32] = "kDynamicViewportInlineSize";
  UnitType[UnitType["kDynamicViewportBlockSize"] = 33] = "kDynamicViewportBlockSize";
  UnitType[UnitType["kDynamicViewportMin"] = 34] = "kDynamicViewportMin";
  UnitType[UnitType["kDynamicViewportMax"] = 35] = "kDynamicViewportMax"; // https://drafts.csswg.org/css-contain-3/#container-lengths
  //
  // See also IsContainerPercentageLength.

  UnitType[UnitType["kContainerWidth"] = 36] = "kContainerWidth";
  UnitType[UnitType["kContainerHeight"] = 37] = "kContainerHeight";
  UnitType[UnitType["kContainerInlineSize"] = 38] = "kContainerInlineSize";
  UnitType[UnitType["kContainerBlockSize"] = 39] = "kContainerBlockSize";
  UnitType[UnitType["kContainerMin"] = 40] = "kContainerMin";
  UnitType[UnitType["kContainerMax"] = 41] = "kContainerMax";
  UnitType[UnitType["kRems"] = 42] = "kRems";
  UnitType[UnitType["kChs"] = 43] = "kChs";
  UnitType[UnitType["kUserUnits"] = 44] = "kUserUnits"; // Angle units

  UnitType[UnitType["kDegrees"] = 45] = "kDegrees";
  UnitType[UnitType["kRadians"] = 46] = "kRadians";
  UnitType[UnitType["kGradians"] = 47] = "kGradians";
  UnitType[UnitType["kTurns"] = 48] = "kTurns"; // Time units

  UnitType[UnitType["kMilliseconds"] = 49] = "kMilliseconds";
  UnitType[UnitType["kSeconds"] = 50] = "kSeconds";
  UnitType[UnitType["kHertz"] = 51] = "kHertz";
  UnitType[UnitType["kKilohertz"] = 52] = "kKilohertz"; // Resolution

  UnitType[UnitType["kDotsPerPixel"] = 53] = "kDotsPerPixel";
  UnitType[UnitType["kDotsPerInch"] = 54] = "kDotsPerInch";
  UnitType[UnitType["kDotsPerCentimeter"] = 55] = "kDotsPerCentimeter"; // Other units

  UnitType[UnitType["kFraction"] = 56] = "kFraction";
  UnitType[UnitType["kInteger"] = 57] = "kInteger"; // This value is used to handle quirky margins in reflow roots (body, td,
  // and th) like WinIE. The basic idea is that a stylesheet can use the value
  // __qem (for quirky em) instead of em. When the quirky value is used, if
  // you're in quirks mode, the margin will collapse away inside a table cell.
  // This quirk is specified in the HTML spec but our impl is different.
  // TODO: Remove this. crbug.com/443952

  UnitType[UnitType["kQuirkyEms"] = 58] = "kQuirkyEms";
})(UnitType || (UnitType = {}));

var UnitCategory;

(function (UnitCategory) {
  UnitCategory[UnitCategory["kUNumber"] = 0] = "kUNumber";
  UnitCategory[UnitCategory["kUPercent"] = 1] = "kUPercent";
  UnitCategory[UnitCategory["kULength"] = 2] = "kULength";
  UnitCategory[UnitCategory["kUAngle"] = 3] = "kUAngle";
  UnitCategory[UnitCategory["kUTime"] = 4] = "kUTime";
  UnitCategory[UnitCategory["kUFrequency"] = 5] = "kUFrequency";
  UnitCategory[UnitCategory["kUResolution"] = 6] = "kUResolution";
  UnitCategory[UnitCategory["kUOther"] = 7] = "kUOther";
})(UnitCategory || (UnitCategory = {}));

var ValueRange;

(function (ValueRange) {
  ValueRange[ValueRange["kAll"] = 0] = "kAll";
  ValueRange[ValueRange["kNonNegative"] = 1] = "kNonNegative";
  ValueRange[ValueRange["kInteger"] = 2] = "kInteger";
  ValueRange[ValueRange["kNonNegativeInteger"] = 3] = "kNonNegativeInteger";
  ValueRange[ValueRange["kPositiveInteger"] = 4] = "kPositiveInteger";
})(ValueRange || (ValueRange = {}));

var Nested;

(function (Nested) {
  Nested[Nested["kYes"] = 0] = "kYes";
  Nested[Nested["kNo"] = 1] = "kNo";
})(Nested || (Nested = {}));

var ParenLess;

(function (ParenLess) {
  ParenLess[ParenLess["kYes"] = 0] = "kYes";
  ParenLess[ParenLess["kNo"] = 1] = "kNo";
})(ParenLess || (ParenLess = {}));

export { Nested, ParenLess, UnitCategory, UnitType, ValueRange };
