import { __extends, __rest, __assign } from '../../../../tslib/tslib.es6.js';
import LineUtil from '../../../g-math/es/line.js';
import { Shape } from '../types.js';
import { DisplayObject } from './DisplayObject.js';
import '../shapes/AABB.js';
import '../shapes/BoundingSphere.js';
import '../shapes/Frustum.js';
import '../shapes/Plane.js';
import '../shapes/Ray.js';
import { Point } from '../shapes/Point.js';
import '../shapes/Rectangle.js';

var Line =
/** @class */
function (_super) {
  __extends(Line, _super);

  function Line(_a) {
    if (_a === void 0) {
      _a = {};
    }

    var style = _a.style,
        rest = __rest(_a, ["style"]);

    return _super.call(this, __assign({
      type: Shape.LINE,
      style: __assign({
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        z1: 0,
        z2: 0,

        /**
         * @see https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-width
         */
        lineWidth: 1,
        isBillboard: false
      }, style)
    }, rest)) || this;
  }

  Line.prototype.getPoint = function (ratio) {
    var _a = this.parsedStyle,
        x1 = _a.x1,
        y1 = _a.y1,
        x2 = _a.x2,
        y2 = _a.y2;
    var point = LineUtil.pointAt(x1.value, y1.value, x2.value, y2.value, ratio);
    return new Point(point.x, point.y);
  };

  Line.prototype.getTotalLength = function () {
    var _a = this.parsedStyle,
        x1 = _a.x1,
        y1 = _a.y1,
        x2 = _a.x2,
        y2 = _a.y2;
    return LineUtil.length(x1.value, y1.value, x2.value, y2.value);
  };

  return Line;
}(DisplayObject);

export { Line };
