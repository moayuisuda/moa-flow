import { __extends, __assign, __read, __spreadArray } from '../../../../tslib/tslib.es6.js';
import '../../../../inversify/lib/inversify.js';
import '../../../../mana-syringe/es/core.js';
import '../../../../mana-syringe/es/inversify/index.js';
import { GlobalContainer } from '../../../../mana-syringe/es/container.js';
import '../../../../mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../mana-syringe/es/register.js';
import '../../../../mana-syringe/es/contribution/index.js';
import { DisplayObjectPool } from '../DisplayObjectPool.js';
import { KeyframeEffect } from '../dom/KeyframeEffect.js';
import { Element } from '../dom/Element.js';
import { ElementEvent } from '../dom/interfaces.js';
import { Shape } from '../types.js';
import { createVec3, getEuler, rad2deg, fromRotationTranslationScale, decompose } from '../utils/math.js';
import { formatAttribute } from '../utils/interpolation.js';
import { dirtifyToRoot } from '../services/SceneGraphService.js';
import '../services/ContextService.js';
import '../services/RenderingContext.js';
import '../services/RenderingService.js';
import '../services/EventService.js';
import '../services/SceneGraphSelector.js';
import '../services/TextService.js';
import '../services/OffscreenCanvasCreator.js';
import '../services/aabb/interfaces.js';
import '../services/aabb/CircleUpdater.js';
import '../services/aabb/EllipseUpdater.js';
import '../services/aabb/RectUpdater.js';
import '../services/aabb/TextUpdater.js';
import '../services/aabb/LineUpdater.js';
import '../services/aabb/PolylineUpdater.js';
import '../services/aabb/PathUpdater.js';
import { MutationEvent } from '../dom/MutationEvent.js';
import '../shapes/AABB.js';
import '../shapes/BoundingSphere.js';
import '../shapes/Frustum.js';
import '../shapes/Plane.js';
import '../shapes/Ray.js';
import '../shapes/Point.js';
import { Rectangle } from '../shapes/Rectangle.js';
import { StyleValueRegistry } from '../css/StyleValueRegistry.js';
import '../css/cssom/types.js';
import '../css/cssom/CSSColorValue.js';
import '../css/cssom/CSSKeywordValue.js';
import '../css/cssom/CSSMathOperator.js';
import '../css/cssom/CSSMathInvert.js';
import '../css/cssom/CSSMathMax.js';
import '../css/cssom/CSSMathMin.js';
import '../css/cssom/CSSMathNegate.js';
import '../css/cssom/CSSMathProduct.js';
import '../css/cssom/CSSMathSum.js';
import '../css/cssom/CSSMathValue.js';
import '../css/cssom/CSSMathVariadic.js';
import '../css/cssom/CSSNumericValue.js';
import '../css/cssom/CSSNumericValueType.js';
import '../css/cssom/CSSRGB.js';
import '../css/cssom/CSSGradientValue.js';
import '../css/cssom/CSSStyleValue.js';
import '../css/cssom/CSSTransformValue.js';
import '../css/cssom/CSSTranslate.js';
import { CSSUnitValue } from '../css/cssom/CSSUnitValue.js';
import '../css/parser/dimension.js';
import '../css/parser/filter.js';
import '../css/parser/transform.js';
import '../css/properties/CSSPropertyLengthOrPercentage.js';
import '../css/properties/CSSPropertyLocalPosition.js';
import '../css/properties/CSSPropertyOpacity.js';
import '../css/properties/CSSPropertyColor.js';
import '../css/properties/CSSPropertyFilter.js';
import '../css/properties/CSSPropertyLineDash.js';
import '../css/properties/CSSPropertyShadowBlur.js';
import '../css/properties/CSSPropertyOffsetPath.js';
import '../css/properties/CSSPropertyOffsetDistance.js';
import '../css/properties/CSSPropertyAnchor.js';
import '../css/properties/CSSPropertyZIndex.js';
import '../css/properties/CSSPropertyTransform.js';
import '../css/properties/CSSPropertyTransformOrigin.js';
import '../css/properties/CSSPropertyPath.js';
import '../css/properties/CSSPropertyPoints.js';
import '../css/properties/CSSPropertyClipPath.js';
import '../css/properties/CSSPropertyText.js';
import '../css/properties/CSSPropertyTextTransform.js';
import '../css/LayoutRegistry.js';
import isUndefined from '../../../../lodash-es/isUndefined.js';
import isEqual from '../../../../lodash-es/isEqual.js';
import isNil from '../../../../lodash-es/isNil.js';
import isObject from '../../../../lodash-es/isObject.js';
import { create } from '../../../../gl-matrix/esm/vec3.js';
import { getTranslation, getScaling, getRotation } from '../../../../gl-matrix/esm/mat4.js';
import { create as create$1 } from '../../../../gl-matrix/esm/quat.js';

var DEFAULT_STYLE_PROPS = {
  x: '',
  y: '',
  z: '',
  anchor: [0, 0],
  opacity: '',
  fillOpacity: '',
  strokeOpacity: '',
  fill: '',
  stroke: '',
  transformOrigin: '',
  visibility: '',
  pointerEvents: '',
  lineCap: '',
  lineJoin: '',
  fontSize: '',
  fontFamily: '',
  fontStyle: '',
  fontWeight: '',
  fontVariant: '',
  textAlign: '',
  textBaseline: '',
  textTransform: ''
};
/**
 * prototype chains: DisplayObject -> Element -> Node -> EventTarget
 *
 * mixins: Animatable, Transformable, Visible
 * @see https://github.com/tannerntannern/ts-mixer/blob/master/README.md#mixing-generic-classes
 *
 * Provide abilities in scene graph, such as:
 * * transform `translate/rotate/scale`
 * * add/remove child
 * * visibility and z-index
 *
 * Those abilities are implemented with those components: `Transform/Sortable/Visible`.
 *
 * Emit following events:
 * * init
 * * destroy
 * * attributeChanged
 */

var DisplayObject =
/** @class */
function (_super) {
  __extends(DisplayObject, _super);

  function DisplayObject(config) {
    var _this = this;

    var _a, _b, _c;

    _this = _super.call(this) || this;
    _this.styleValueRegistry = GlobalContainer.get(StyleValueRegistry);
    /**
     * push to active animations after calling `animate()`
     */

    _this.activeAnimations = []; // assign name, id to config
    // eg. group.get('name')

    _this.config = config; // compatible with G 3.0

    _this.config.interactive = (_a = _this.config.capture) !== null && _a !== void 0 ? _a : _this.config.interactive; // init scene graph node

    _this.id = _this.config.id || '';
    _this.name = _this.config.name || '';

    if (_this.config.className || _this.config.class) {
      _this.className = _this.config.className || _this.config.class;
    }

    _this.nodeName = _this.config.type || Shape.GROUP; // compatible with G 3.0

    _this.config.style = __assign(__assign(__assign(__assign({}, DEFAULT_STYLE_PROPS), {
      zIndex: (_b = _this.config.zIndex) !== null && _b !== void 0 ? _b : 0,
      interactive: (_c = _this.config.interactive) !== null && _c !== void 0 ? _c : true
    }), _this.config.style), _this.config.attrs);

    if (!isNil(_this.config.visible)) {
      _this.config.style.visibility = _this.config.visible === false ? 'hidden' : 'visible';
    }

    if (!isNil(_this.config.interactive)) {
      _this.config.style.pointerEvents = _this.config.interactive === false ? 'none' : 'auto';
    }

    _this.style = new Proxy(__assign(__assign({}, _this.attributes), {
      setProperty: function setProperty(propertyName, value) {
        _this.setAttribute(propertyName, value);
      },
      getPropertyValue: function getPropertyValue(propertyName) {
        return _this.getAttribute(propertyName);
      },
      removeProperty: function removeProperty(propertyName) {
        _this.removeAttribute(propertyName);
      },
      item: function item() {
        return '';
      }
    }), {
      get: function get(target, name) {
        if (name in target) {
          return target[name];
        }

        return _this.getAttribute(name);
      },
      set: function set(_, prop, value) {
        _this.setAttribute(prop, value);

        return true;
      }
    });

    _this.initAttributes(_this.config.style); // insert this group into pool


    GlobalContainer.get(DisplayObjectPool).add(_this.entity, _this);
    return _this;
  }

  DisplayObject.prototype.destroy = function () {
    _super.prototype.destroy.call(this); // remove from into pool


    GlobalContainer.get(DisplayObjectPool).remove(this.entity); // stop all active animations

    this.getAnimations().forEach(function (animation) {
      animation.cancel();
    });
  };

  DisplayObject.prototype.cloneNode = function (deep) {
    var cloned = new this.constructor({
      // copy id & name
      // @see https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode#notes
      id: this.id,
      name: this.name,
      className: this.name,
      interactive: this.interactive,
      style: __assign({}, this.attributes)
    });

    if (deep) {
      this.children.forEach(function (child) {
        var clonedChild = child.cloneNode(deep);
        cloned.appendChild(clonedChild);
      });
    }

    return cloned;
  };

  DisplayObject.prototype.initAttributes = function (attributes) {
    if (attributes === void 0) {
      attributes = {};
    }

    var renderable = this.renderable;
    this.styleValueRegistry.processProperties(this, attributes); // redraw at next frame

    renderable.dirty = true;
  };

  DisplayObject.prototype.setAttribute = function (name, value, force) {
    if (force === void 0) {
      force = false;
    }

    var _a = __read(formatAttribute(name, value), 2),
        attributeName = _a[0],
        attributeValue = _a[1]; // ignore undefined value


    if (isUndefined(value)) {
      return;
    }

    if (force || !isEqual(attributeValue, this.attributes[attributeName])) {
      this.internalSetAttribute(attributeName, attributeValue);

      _super.prototype.setAttribute.call(this, attributeName, attributeValue);
    }
  };
  /**
   * called when attributes get changed or initialized
   */


  DisplayObject.prototype.internalSetAttribute = function (name, value, parseOptions) {
    var _a;

    var _this = this;

    if (parseOptions === void 0) {
      parseOptions = {};
    }

    var renderable = this.renderable;
    var oldValue = this.attributes[name];
    var oldParsedValue = this.parsedStyle[name];
    this.styleValueRegistry.processProperties(this, (_a = {}, _a[name] = value, _a), parseOptions); // inform clip path targets

    if (this.attributes.clipPathTargets && this.attributes.clipPathTargets.length) {
      this.attributes.clipPathTargets.forEach(function (target) {
        dirtifyToRoot(target);
        target.dispatchEvent(new MutationEvent(ElementEvent.ATTR_MODIFIED, target, _this, _this, 'clipPath', MutationEvent.MODIFICATION, _this, _this));
      });
    } // redraw at next frame


    renderable.dirty = true;
    this.dispatchEvent(new MutationEvent(ElementEvent.ATTR_MODIFIED, this, oldValue, value, name, MutationEvent.MODIFICATION, oldParsedValue, this.parsedStyle[name]));
  }; // #region transformable

  /**
   * returns different values than getBoundingClientRect(), as the latter returns value relative to the viewport
   * @see https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox
   *
   * FIXME: It is worth noting that getBBox responds to original untransformed values of a drawn object.
   * @see https://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html#getBBox
   */


  DisplayObject.prototype.getBBox = function () {
    var aabb = this.getBounds();

    var _a = __read(aabb.getMin(), 2),
        left = _a[0],
        top = _a[1];

    var _b = __read(aabb.getMax(), 2),
        right = _b[0],
        bottom = _b[1];

    return new Rectangle(left, top, right - left, bottom - top);
  };

  DisplayObject.prototype.setOrigin = function (position, y, z) {
    if (y === void 0) {
      y = 0;
    }

    if (z === void 0) {
      z = 0;
    }

    this.sceneGraphService.setOrigin(this, createVec3(position, y, z));
    return this;
  };

  DisplayObject.prototype.getOrigin = function () {
    return this.sceneGraphService.getOrigin(this);
  };
  /**
   * set position in world space
   */


  DisplayObject.prototype.setPosition = function (position, y, z) {
    if (y === void 0) {
      y = 0;
    }

    if (z === void 0) {
      z = 0;
    }

    this.sceneGraphService.setPosition(this, createVec3(position, y, z));
    this.syncLocalPosition();
    return this;
  };
  /**
   * set position in local space
   */


  DisplayObject.prototype.setLocalPosition = function (position, y, z) {
    if (y === void 0) {
      y = 0;
    }

    if (z === void 0) {
      z = 0;
    }

    this.sceneGraphService.setLocalPosition(this, createVec3(position, y, z));
    this.syncLocalPosition();
    return this;
  };
  /**
   * translate in world space
   */


  DisplayObject.prototype.translate = function (position, y, z) {
    if (y === void 0) {
      y = 0;
    }

    if (z === void 0) {
      z = 0;
    }

    this.sceneGraphService.translate(this, createVec3(position, y, z));
    this.syncLocalPosition();
    return this;
  };
  /**
   * translate in local space
   */


  DisplayObject.prototype.translateLocal = function (position, y, z) {
    if (y === void 0) {
      y = 0;
    }

    if (z === void 0) {
      z = 0;
    }

    this.sceneGraphService.translateLocal(this, createVec3(position, y, z));
    this.syncLocalPosition();
    return this;
  };

  DisplayObject.prototype.getPosition = function () {
    return this.sceneGraphService.getPosition(this);
  };

  DisplayObject.prototype.getLocalPosition = function () {
    return this.sceneGraphService.getLocalPosition(this);
  };
  /**
   * compatible with G 3.0
   *
   * scaling in local space
   * scale(10) = scale(10, 10, 10)
   *
   * we can't set scale in world space
   */


  DisplayObject.prototype.scale = function (scaling, y, z) {
    return this.scaleLocal(scaling, y, z);
  };

  DisplayObject.prototype.scaleLocal = function (scaling, y, z) {
    if (typeof scaling === 'number') {
      y = y || scaling;
      z = z || scaling;
      scaling = createVec3(scaling, y, z);
    }

    this.sceneGraphService.scaleLocal(this, scaling);
    return this;
  };
  /**
   * set scaling in local space
   */


  DisplayObject.prototype.setLocalScale = function (scaling, y, z) {
    if (typeof scaling === 'number') {
      y = y || scaling;
      z = z || scaling;
      scaling = createVec3(scaling, y, z);
    }

    this.sceneGraphService.setLocalScale(this, scaling);
    return this;
  };
  /**
   * get scaling in local space
   */


  DisplayObject.prototype.getLocalScale = function () {
    return this.sceneGraphService.getLocalScale(this);
  };
  /**
   * get scaling in world space
   */


  DisplayObject.prototype.getScale = function () {
    return this.sceneGraphService.getScale(this);
  };
  /**
   * only return degrees of Z axis in world space
   */


  DisplayObject.prototype.getEulerAngles = function () {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var _a = __read(getEuler(create(), this.sceneGraphService.getWorldTransform(this)), 3);
        _a[0];
        _a[1];
        var ez = _a[2];

    return rad2deg(ez);
  };
  /**
   * only return degrees of Z axis in local space
   */


  DisplayObject.prototype.getLocalEulerAngles = function () {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var _a = __read(getEuler(create(), this.sceneGraphService.getLocalRotation(this)), 3);
        _a[0];
        _a[1];
        var ez = _a[2];

    return rad2deg(ez);
  };
  /**
   * set euler angles(degrees) in world space
   */


  DisplayObject.prototype.setEulerAngles = function (z) {
    this.sceneGraphService.setEulerAngles(this, 0, 0, z);
    return this;
  };
  /**
   * set euler angles(degrees) in local space
   */


  DisplayObject.prototype.setLocalEulerAngles = function (z) {
    this.sceneGraphService.setLocalEulerAngles(this, 0, 0, z);
    return this;
  };

  DisplayObject.prototype.rotateLocal = function (x, y, z) {
    if (isNil(y) && isNil(z)) {
      this.sceneGraphService.rotateLocal(this, 0, 0, x);
    } else {
      this.sceneGraphService.rotateLocal(this, x, y, z);
    }

    return this;
  };

  DisplayObject.prototype.rotate = function (x, y, z) {
    if (isNil(y) && isNil(z)) {
      this.sceneGraphService.rotate(this, 0, 0, x);
    } else {
      this.sceneGraphService.rotate(this, x, y, z);
    }

    return this;
  };

  DisplayObject.prototype.setRotation = function (rotation, y, z, w) {
    this.sceneGraphService.setRotation(this, rotation, y, z, w);
    return this;
  };

  DisplayObject.prototype.setLocalRotation = function (rotation, y, z, w) {
    this.sceneGraphService.setLocalRotation(this, rotation, y, z, w);
    return this;
  };

  DisplayObject.prototype.getRotation = function () {
    return this.sceneGraphService.getRotation(this);
  };

  DisplayObject.prototype.getLocalRotation = function () {
    return this.sceneGraphService.getLocalRotation(this);
  };

  DisplayObject.prototype.getLocalTransform = function () {
    return this.sceneGraphService.getLocalTransform(this);
  };

  DisplayObject.prototype.getWorldTransform = function () {
    return this.sceneGraphService.getWorldTransform(this);
  };

  DisplayObject.prototype.resetLocalTransform = function () {
    this.sceneGraphService.resetLocalTransform(this);
  };
  /**
   * sync style.x/y when local position changed
   *
   * Mixins may not declare private/protected properties
   * however, you can use ES2020 private fields
   */


  DisplayObject.prototype.syncLocalPosition = function () {
    var localPosition = this.getLocalPosition();
    this.attributes.x = localPosition[0];
    this.attributes.y = localPosition[1];
    this.attributes.z = localPosition[2]; // should not affect computed style

    this.parsedStyle.x = new CSSUnitValue(this.attributes.x, 'px');
    this.parsedStyle.y = new CSSUnitValue(this.attributes.y, 'px');
    this.parsedStyle.z = new CSSUnitValue(this.attributes.z, 'px');
  }; // #endregion transformable
  // #region animatable

  /**
   * returns an array of all Animation objects affecting this element
   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations
   */


  DisplayObject.prototype.getAnimations = function () {
    return this.activeAnimations;
  };
  /**
   * create an animation with WAAPI
   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/animate
   */


  DisplayObject.prototype.animate = function (keyframes, options) {
    var _a, _b;

    var timeline = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.timeline; // accounte for clip path, use target's timeline

    if (this.attributes.clipPathTargets && this.attributes.clipPathTargets.length) {
      var target = this.attributes.clipPathTargets[0];
      timeline = (_b = target.ownerDocument) === null || _b === void 0 ? void 0 : _b.timeline;
    } // clear old parsed transform


    delete this.parsedStyle.transform;

    if (timeline) {
      return timeline.play(new KeyframeEffect(this, keyframes, options));
    }

    return null;
  }; // #endregion animatable
  // #region visible

  /**
   * show group, which will also change visibility of its children in sceneGraphNode
   *
   * @deprecated
   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/visibility
   */


  DisplayObject.prototype.show = function () {
    this.style.visibility = 'visible';
  };
  /**
   * @deprecated
   * hide group, which will also change visibility of its children in sceneGraphNode
   */


  DisplayObject.prototype.hide = function () {
    this.style.visibility = 'hidden';
  };
  /**
   * shortcut for Used value of `visibility`
   */


  DisplayObject.prototype.isVisible = function () {
    var _a, _b;

    return ((_b = (_a = this.parsedStyle) === null || _a === void 0 ? void 0 : _a.visibility) === null || _b === void 0 ? void 0 : _b.value) === 'visible';
  };

  Object.defineProperty(DisplayObject.prototype, "interactive", {
    get: function get() {
      return this.isInteractive();
    },
    set: function set(b) {
      this.style.pointerEvents = b ? 'auto' : 'none';
    },
    enumerable: false,
    configurable: true
  });

  DisplayObject.prototype.isInteractive = function () {
    var _a, _b;

    return ((_b = (_a = this.parsedStyle) === null || _a === void 0 ? void 0 : _a.pointerEvents) === null || _b === void 0 ? void 0 : _b.value) !== 'none';
  };

  DisplayObject.prototype.isCulled = function () {
    return !!(this.cullable && this.cullable.isCulled());
  };
  /**
   * bring to front in current group
   */


  DisplayObject.prototype.toFront = function () {
    if (this.parentNode) {
      this.style.zIndex = Math.max.apply(Math, __spreadArray([], __read(this.parentNode.children.map(function (child) {
        return Number(child.style.zIndex);
      })), false)) + 1;
    }

    return this;
  };
  /**
   * send to back in current group
   */


  DisplayObject.prototype.toBack = function () {
    if (this.parentNode) {
      this.style.zIndex = Math.min.apply(Math, __spreadArray([], __read(this.parentNode.children.map(function (child) {
        return Number(child.style.zIndex);
      })), false)) - 1;
    }

    return this;
  }; // #endregion visible
  // #region deprecated

  /**
   * @deprecated
   * compatible with G 3.0
   * @deprecated
   */


  DisplayObject.prototype.getCount = function () {
    return this.childElementCount;
  };
  /**
   * @deprecated
   * compatible with G 3.0
   * @deprecated
   */


  DisplayObject.prototype.getParent = function () {
    return this.parentElement;
  };
  /**
   * @deprecated
   * compatible with G 3.0
   * @deprecated
   */


  DisplayObject.prototype.getChildren = function () {
    return this.children;
  };
  /**
   * @deprecated
   * compatible with G 3.0
   * @deprecated
   */


  DisplayObject.prototype.getFirst = function () {
    return this.firstElementChild;
  };
  /**
   * @deprecated
   * compatible with G 3.0
   * @deprecated
   * get last child group/shape
   */


  DisplayObject.prototype.getLast = function () {
    return this.lastElementChild;
  };
  /**
   * @deprecated
   * compatible with G 3.0
   * @deprecated
   * get child group/shape by index
   */


  DisplayObject.prototype.getChildByIndex = function (index) {
    return this.children[index] || null;
  };
  /**
   * compatible with G 3.0
   * @deprecated
   */


  DisplayObject.prototype.add = function (child, index) {
    return this.appendChild(child, index);
  };
  /**
   * @alias style.clipPath
   * @deprecated
   */


  DisplayObject.prototype.setClip = function (clipPath) {
    this.style.clipPath = clipPath;
  };
  /**
   * @alias style.clipPath
   * @deprecated
   */


  DisplayObject.prototype.getClip = function () {
    return this.style.clipPath || null;
  };
  /**
   * compatible with G 3.0
   * @deprecated
   */


  DisplayObject.prototype.set = function (name, value) {
    this.config[name] = value;
  };
  /**
   * compatible with G 3.0
   * @deprecated
   */


  DisplayObject.prototype.get = function (name) {
    return this.config[name];
  };
  /**
   * compatible with G 3.0
   * @alias object.config
   * @deprecated
   */


  DisplayObject.prototype.getConfig = function () {
    return this.config;
  };

  DisplayObject.prototype.attr = function () {
    var _this = this;

    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var _a = __read(args, 2),
        name = _a[0],
        value = _a[1];

    if (!name) {
      return this.attributes;
    }

    if (isObject(name)) {
      Object.keys(name).forEach(function (key) {
        _this.setAttribute(key, name[key]);
      });
      return this;
    }

    if (args.length === 2) {
      this.setAttribute(name, value);
      return this;
    }

    return this.attributes[name];
  };
  /**
   * @alias setPosition
   * @deprecated
   */


  DisplayObject.prototype.moveTo = function (position, y, z) {
    if (y === void 0) {
      y = 0;
    }

    if (z === void 0) {
      z = 0;
    }

    this.setPosition(position, y, z);
    return this;
  };
  /**
   * @alias setPosition
   * @deprecated
   */


  DisplayObject.prototype.move = function (position, y, z) {
    if (y === void 0) {
      y = 0;
    }

    if (z === void 0) {
      z = 0;
    }

    this.setPosition(position, y, z);
    return this;
  };
  /**
   * @alias style.zIndex
   * @deprecated
   */


  DisplayObject.prototype.setZIndex = function (zIndex) {
    this.style.zIndex = zIndex;
    return this;
  };
  /**
   * return 3x3 matrix in world space
   * @deprecated
   */


  DisplayObject.prototype.getMatrix = function (transformMat4) {
    var transform = transformMat4 || this.getWorldTransform();

    var _a = __read(getTranslation(create(), transform), 2),
        tx = _a[0],
        ty = _a[1];

    var _b = __read(getScaling(create(), transform), 2),
        sx = _b[0],
        sy = _b[1];

    var rotation = getRotation(create$1(), transform); // eslint-disable-next-line @typescript-eslint/no-unused-vars

    var _c = __read(getEuler(create(), rotation), 3),
        eux = _c[0];
        _c[1];
        var euz = _c[2]; // gimbal lock at 90 degrees


    return fromRotationTranslationScale(eux || euz, tx, ty, sx, sy);
  };
  /**
   * return 3x3 matrix in local space
   * @deprecated
   */


  DisplayObject.prototype.getLocalMatrix = function () {
    return this.getMatrix(this.getLocalTransform());
  };
  /**
   * set 3x3 matrix in world space
   * @deprecated
   */


  DisplayObject.prototype.setMatrix = function (mat) {
    var _a = __read(decompose(mat), 5),
        tx = _a[0],
        ty = _a[1],
        scalingX = _a[2],
        scalingY = _a[3],
        angle = _a[4];

    this.setEulerAngles(angle).setPosition(tx, ty).setLocalScale(scalingX, scalingY);
  };
  /**
   * set 3x3 matrix in local space
   * @deprecated
   */


  DisplayObject.prototype.setLocalMatrix = function (mat) {
    var _a = __read(decompose(mat), 5),
        tx = _a[0],
        ty = _a[1],
        scalingX = _a[2],
        scalingY = _a[3],
        angle = _a[4];

    this.setLocalEulerAngles(angle).setLocalPosition(tx, ty).setLocalScale(scalingX, scalingY);
  };

  return DisplayObject;
}(Element);

export { DisplayObject };
