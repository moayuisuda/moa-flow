import { __extends, __rest, __assign } from '../../../../tslib/tslib.es6.js';
import LineUtil from '../../../g-math/es/line.js';
import { Shape } from '../types.js';
import { DisplayObject } from './DisplayObject.js';
import '../shapes/AABB.js';
import '../shapes/BoundingSphere.js';
import '../shapes/Frustum.js';
import '../shapes/Plane.js';
import '../shapes/Ray.js';
import { Point } from '../shapes/Point.js';
import '../shapes/Rectangle.js';

var Polyline =
/** @class */
function (_super) {
  __extends(Polyline, _super);

  function Polyline(_a) {
    if (_a === void 0) {
      _a = {};
    }

    var style = _a.style,
        rest = __rest(_a, ["style"]);

    return _super.call(this, __assign({
      type: Shape.POLYLINE,
      style: __assign({
        points: [],
        lineWidth: 1,
        miterLimit: 4
      }, style)
    }, rest)) || this;
  }

  Polyline.prototype.getTotalLength = function () {
    return this.parsedStyle.points.totalLength;
  };

  Polyline.prototype.getPoint = function (ratio) {
    var _a = this.parsedStyle.points,
        points = _a.points,
        segments = _a.segments;
    var subt = 0;
    var index = 0;
    segments.forEach(function (v, i) {
      if (ratio >= v[0] && ratio <= v[1]) {
        subt = (ratio - v[0]) / (v[1] - v[0]);
        index = i;
      }
    });

    var _b = LineUtil.pointAt(points[index][0], points[index][1], points[index + 1][0], points[index + 1][1], subt),
        x = _b.x,
        y = _b.y;

    return new Point(x, y);
  };

  Polyline.prototype.getStartTangent = function () {
    var points = this.parsedStyle.points.points;
    var result = [];
    result.push([points[1][0], points[1][1]]);
    result.push([points[0][0], points[0][1]]);
    return result;
  };

  Polyline.prototype.getEndTangent = function () {
    var points = this.parsedStyle.points.points;
    var l = points.length - 1;
    var result = [];
    result.push([points[l - 1][0], points[l - 1][1]]);
    result.push([points[l][0], points[l][1]]);
    return result;
  };

  return Polyline;
}(DisplayObject);

export { Polyline };
