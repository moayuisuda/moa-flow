import { __extends } from '../../../../tslib/tslib.es6.js';
import { DisplayObject } from './DisplayObject.js';
import { ElementEvent } from '../dom/interfaces.js';

/**
 * shadow root
 * @see https://yuque.antfin-inc.com/antv/czqvg5/pgqipg
 */

/** @class */
(function (_super) {
  __extends(CustomElement, _super); // private shadowNodes: DisplayObject[] = [];


  function CustomElement(config) {
    if (config === void 0) {
      config = {};
    }

    var _this = _super.call(this, config) || this;

    _this.handleMounted = function (e) {
      if (e.target === e.currentTarget) {
        // this.shadowNodes.forEach((node) => {
        //   // every child and its children should turn into a shadow node
        //   // a shadow node doesn't mean to be unrenderable, it's just unsearchable in scenegraph
        //   node.shadow = true;
        // });
        if (_this.connectedCallback) {
          _this.connectedCallback();
        }
      }
    };

    _this.handleUnmounted = function (e) {
      if (e.target === e.currentTarget) {
        if (_this.disconnectedCallback) {
          _this.disconnectedCallback();
        }
      }
    }; // private handleChildInserted = (e: FederatedEvent) => {
    //   (e.target as DisplayObject).forEach((node) => {
    //     // append children like other shapes after mounted
    //     if (!this.isConnected) {
    //       this.shadowNodes.push(node as DisplayObject);
    //     }
    //   });
    // };
    // private handleChildRemoved = (e: FederatedEvent) => {
    //   (e.target as DisplayObject).forEach((node) => {
    //     node.shadow = false;
    //   });
    // };


    _this.handleAttributeChanged = function (e) {
      // only listen itself
      // RangeError: Maximum call stack size exceeded
      if (e.target !== _this) {
        return;
      }

      var attrName = e.attrName,
          prevValue = e.prevValue,
          newValue = e.newValue;

      if (_this.attributeChangedCallback) {
        _this.attributeChangedCallback(attrName, prevValue, newValue);
      }
    }; // this.addEventListener(ElementEvent.CHILD_INSERTED, this.handleChildInserted);
    // this.addEventListener(ElementEvent.CHILD_REMOVED, this.handleChildRemoved);


    if (_this.attributeChangedCallback) {
      _this.addEventListener(ElementEvent.ATTR_MODIFIED, _this.handleAttributeChanged);
    }

    if (_this.connectedCallback) {
      _this.addEventListener(ElementEvent.MOUNTED, _this.handleMounted);
    }

    if (_this.disconnectedCallback) {
      _this.addEventListener(ElementEvent.UNMOUNTED, _this.handleUnmounted);
    }

    return _this;
  }

  return CustomElement;
})(DisplayObject);
