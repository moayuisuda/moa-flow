import { __decorate, __metadata } from '../../../../tslib/tslib.es6.js';
import { singleton } from '../../../../mana-syringe/es/decorator.js';
import '../../../../mana-syringe/es/container.js';
import { Syringe } from '../../../../mana-syringe/es/core.js';
import '../../../../mana-syringe/es/contribution/contribution-protocol.js';
import '../../../../inversify/lib/inversify.js';
import '../../../../mana-syringe/es/register.js';
import '../../../../mana-syringe/es/contribution/index.js';
import { RenderingPluginContribution } from '../services/RenderingService.js';
import { contrib } from '../../../../mana-syringe/es/contribution/decorator.js';

var CullingStrategyContribution = Syringe.defineToken('CullingStrategyContribution');
/**
 * apply following rules:
 * 1. `visibility` in scenegraph node
 * 2. other custom culling strategies, eg. frustum culling
 */

var CullingPlugin =
/** @class */
function () {
  function CullingPlugin() {}

  CullingPlugin_1 = CullingPlugin;

  CullingPlugin.prototype.apply = function (renderingService) {
    var strategies = this.strategyProvider.getContributions();
    renderingService.hooks.cull.tap(CullingPlugin_1.tag, function (object) {
      if (object) {
        var cullable = object.cullable;

        if (strategies.length === 0) {
          cullable.visible = true;
        } else {
          // eg. implemented by g-webgl(frustum culling)
          cullable.visible = strategies.every(function (strategy) {
            return strategy.isVisible(object);
          });
        }

        if (!cullable.isCulled() && object.isVisible()) {
          return object;
        }

        return null;
      }

      return object;
    });
    renderingService.hooks.afterRender.tap(CullingPlugin_1.tag, function (object) {
      object.cullable.visibilityPlaneMask = -1;
    });
  };

  var CullingPlugin_1;
  CullingPlugin.tag = 'CullingPlugin';

  __decorate([contrib(CullingStrategyContribution), __metadata("design:type", Object)], CullingPlugin.prototype, "strategyProvider", void 0);

  CullingPlugin = CullingPlugin_1 = __decorate([singleton({
    contrib: RenderingPluginContribution
  })], CullingPlugin);
  return CullingPlugin;
}();

export { CullingPlugin, CullingStrategyContribution };
