import '../../g/es/index.js';
import React, { forwardRef, useRef, useLayoutEffect } from 'react';
import { reconcilor } from './reconciler.js';
import { assertRef } from './util/index.js';
import { Canvas as Canvas$1 } from '../../g/es/Canvas.js';

var Canvas = /*#__PURE__*/forwardRef(function (_a, ref) {
  var children = _a.children,
      classname = _a.classname,
      role = _a.role,
      style = _a.style,
      tabIndex = _a.tabIndex,
      title = _a.title,
      renderer = _a.renderer,
      width = _a.width,
      height = _a.height,
      capture = _a.capture,
      cursor = _a.cursor;
  assertRef(ref);
  var container = useRef();
  var divRef = useRef(null);
  var innerCanvasRef = useRef(null);
  var canvasRef = ref || innerCanvasRef;
  useLayoutEffect(function () {
    var canvas = new Canvas$1({
      renderer: renderer,
      width: width,
      height: height,
      capture: capture,
      cursor: cursor,
      container: divRef.current
    });
    canvasRef.current = canvas;
    container.current = reconcilor.createContainer(canvas, 1, false, null);
    return function () {
      reconcilor.updateContainer(null, container.current, null);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useLayoutEffect(function () {
    if (container.current) {
      reconcilor.updateContainer(children, container.current, null);
    }
  }, [children]);
  useLayoutEffect(function () {
    var _a;

    (_a = canvasRef.current) === null || _a === void 0 ? void 0 : _a.setRenderer(renderer);
  }, [canvasRef, renderer]);
  useLayoutEffect(function () {
    var _a;

    (_a = canvasRef.current) === null || _a === void 0 ? void 0 : _a.setCursor(cursor);
  }, [canvasRef, cursor]);
  useLayoutEffect(function () {
    canvasRef.current.resize(width, height);
  }, [width, height, canvasRef]);
  return /*#__PURE__*/React.createElement("div", {
    ref: divRef,
    className: classname,
    role: role,
    style: style,
    tabIndex: tabIndex,
    title: title
  });
});

export { Canvas };
