function ellipseDistance(squareX, squareY, rx, ry) {
  return squareX / (rx * rx) + squareY / (ry * ry);
}

function isPointInPath(displayObject, _a) {
  var x = _a.x,
      y = _a.y;
  var _b = displayObject.parsedStyle,
      rxInPixels = _b.rx,
      ryInPixels = _b.ry,
      fill = _b.fill,
      stroke = _b.stroke,
      lineWidth = _b.lineWidth,
      clipPathTargets = _b.clipPathTargets;
  var isClipPath = !!(clipPathTargets === null || clipPathTargets === void 0 ? void 0 : clipPathTargets.length);
  var hasFill = fill && !fill.isNone;
  var hasStroke = stroke && !stroke.isNone;
  var rx = rxInPixels.value;
  var ry = ryInPixels.value;
  var halfLineWith = lineWidth.value / 2;
  var squareX = (x - rx) * (x - rx);
  var squareY = (y - ry) * (y - ry); // 使用椭圆的公式： x*x/rx*rx + y*y/ry*ry = 1;

  if (hasFill && hasStroke || isClipPath) {
    return ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1;
  }

  if (hasFill) {
    return ellipseDistance(squareX, squareY, rx, ry) <= 1;
  }

  if (hasStroke) {
    return ellipseDistance(squareX, squareY, rx - halfLineWith, ry - halfLineWith) >= 1 && ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1;
  }

  return false;
}

export { isPointInPath };
