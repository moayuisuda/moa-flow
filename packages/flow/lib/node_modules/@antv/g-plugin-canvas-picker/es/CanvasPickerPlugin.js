import { __values, __decorate, __metadata } from '../../../tslib/tslib.es6.js';
import { DisplayObjectPool, CanvasConfig, OffscreenCanvasCreator, RenderingPluginContribution, Point } from '@antv/g';
import '../../g-plugin-canvas-renderer/es/index.js';
import { Syringe, inject, singleton } from 'mana-syringe';
import { RBushRoot } from '../../g-plugin-canvas-renderer/es/CanvasRendererPlugin.js';
import { PathGeneratorFactory } from '../../g-plugin-canvas-renderer/es/shapes/paths/index.js';
import { fromValues, transformMat4, create as create$1 } from '../../../gl-matrix/esm/vec3.js';
import { multiply, create, invert } from '../../../gl-matrix/esm/mat4.js';

var PointInPathPickerFactory = Syringe.defineToken('PointInPathPicker');
/**
 * pick shape(s) with Mouse/Touch event
 *
 * 1. find AABB with r-tree
 * 2. do math calculation with geometry in an accurate way
 */

var CanvasPickerPlugin =
/** @class */
function () {
  function CanvasPickerPlugin() {
    var _this = this;

    this.isHit = function (displayObject, position, worldTransform) {
      // use picker for current shape's type
      var pick = _this.pointInPathPickerFactory(displayObject.nodeName);

      if (pick) {
        // invert with world matrix
        var invertWorldMat = invert(create(), worldTransform); // transform client position to local space, do picking in local space

        var localPosition = transformMat4(create$1(), fromValues(position[0], position[1], 0), invertWorldMat); // account for anchor

        var halfExtents = displayObject.getGeometryBounds().halfExtents;
        var anchor = displayObject.parsedStyle.anchor;
        localPosition[0] += (anchor && anchor[0].value || 0) * halfExtents[0] * 2;
        localPosition[1] += (anchor && anchor[1].value || 0) * halfExtents[1] * 2;

        if (pick(displayObject, new Point(localPosition[0], localPosition[1]), _this.isPointInPath)) {
          return true;
        }
      }

      return false;
    };
    /**
     * use native picking method
     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInPath
     */


    this.isPointInPath = function (displayObject, position) {
      var context = _this.offscreenCanvas.getOrCreateContext(_this.canvasConfig.offscreenCanvas);

      var generatePath = _this.pathGeneratorFactory(displayObject.nodeName);

      if (generatePath) {
        generatePath(context, displayObject.parsedStyle);
      }

      return context.isPointInPath(position.x, position.y);
    };
  }

  CanvasPickerPlugin_1 = CanvasPickerPlugin;

  CanvasPickerPlugin.prototype.apply = function (renderingService) {
    var _this = this;

    renderingService.hooks.pick.tap(CanvasPickerPlugin_1.tag, function (result) {
      var e_1, _a;

      var topmost = result.topmost,
          _b = result.position,
          x = _b.x,
          y = _b.y; // position in world space

      var position = fromValues(x, y, 0); // query by AABB first with spatial index(r-tree)

      var rBushNodes = _this.rBush.search({
        minX: position[0],
        minY: position[1],
        maxX: position[0],
        maxY: position[1]
      });

      var queriedIds = rBushNodes.map(function (node) {
        return node.id;
      });
      var hitTestList = [];
      rBushNodes.forEach(function (_a) {
        var id = _a.id;

        var displayObject = _this.displayObjectPool.getByEntity(id);

        if (displayObject.isVisible() && !displayObject.isCulled() && displayObject.isInteractive()) {
          // parent is not included, eg. parent is clipped
          if (displayObject.parentNode && queriedIds.indexOf(displayObject.parentNode.entity) === -1) {
            return;
          }

          hitTestList.push(displayObject);
        }
      }); // find group with max z-index

      hitTestList.sort(function (a, b) {
        return b.sortable.renderOrder - a.sortable.renderOrder;
      });
      var pickedDisplayObjects = [];

      try {
        for (var hitTestList_1 = __values(hitTestList), hitTestList_1_1 = hitTestList_1.next(); !hitTestList_1_1.done; hitTestList_1_1 = hitTestList_1.next()) {
          var displayObject = hitTestList_1_1.value; // test with clip path

          var clipPath = displayObject.parsedStyle.clipPath;
          var objectToTest = clipPath || displayObject;
          var worldTransform = displayObject.getWorldTransform(); // clipped's world matrix * clipPath's local matrix

          if (clipPath) {
            worldTransform = multiply(create(), worldTransform, clipPath.getLocalTransform());
          }

          if (_this.isHit(objectToTest, position, worldTransform)) {
            if (topmost) {
              result.picked = [displayObject];
              return result;
            } else {
              pickedDisplayObjects.push(displayObject);
            }
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (hitTestList_1_1 && !hitTestList_1_1.done && (_a = hitTestList_1.return)) _a.call(hitTestList_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      result.picked = pickedDisplayObjects;
      return result;
    });
  };

  var CanvasPickerPlugin_1;
  CanvasPickerPlugin.tag = 'CanvasPickerPlugin';

  __decorate([inject(DisplayObjectPool), __metadata("design:type", DisplayObjectPool)], CanvasPickerPlugin.prototype, "displayObjectPool", void 0);

  __decorate([inject(CanvasConfig), __metadata("design:type", Object)], CanvasPickerPlugin.prototype, "canvasConfig", void 0);

  __decorate([inject(OffscreenCanvasCreator), __metadata("design:type", OffscreenCanvasCreator)], CanvasPickerPlugin.prototype, "offscreenCanvas", void 0);

  __decorate([inject(RBushRoot), __metadata("design:type", Function)], CanvasPickerPlugin.prototype, "rBush", void 0);

  __decorate([inject(PathGeneratorFactory), __metadata("design:type", Function)], CanvasPickerPlugin.prototype, "pathGeneratorFactory", void 0);

  __decorate([inject(PointInPathPickerFactory), __metadata("design:type", Function)], CanvasPickerPlugin.prototype, "pointInPathPickerFactory", void 0);

  CanvasPickerPlugin = CanvasPickerPlugin_1 = __decorate([singleton({
    contrib: RenderingPluginContribution
  })], CanvasPickerPlugin);
  return CanvasPickerPlugin;
}();

export { CanvasPickerPlugin, PointInPathPickerFactory };
